<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Story</title>
  
  <subtitle>虽不能至，然心向往之~~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jingweiz300.github.io/"/>
  <updated>2018-03-14T15:21:30.082Z</updated>
  <id>https://jingweiz300.github.io/</id>
  
  <author>
    <name>JingWei Zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Numpy模块的学习</title>
    <link href="https://jingweiz300.github.io/2018/03/14/Numpy%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://jingweiz300.github.io/2018/03/14/Numpy模块的学习/</id>
    <published>2018-03-14T11:35:37.000Z</published>
    <updated>2018-03-14T15:21:30.082Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Numpy模块的学习：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>介绍一个科学计算数据库的使用，它就是numpy，之后会出一个更流行的pandas模块使用简介</p><p>先贴上原版英文介绍震楼，英文好的同学自己翻译，不好的先去学好英语(开个玩笑)，我直接翻译一下，拿来主义直接看就是了。</p><h3 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h3><p>NumPy is the fundamental package for scientific computing with Python. It contains among other things:</p><ul><li>a powerful N-dimensional array object</li><li>sophisticated (broadcasting) functions</li><li>tools for integrating C/C++ and Fortran code</li><li>useful linear algebra, Fourier transform, and random number capabilities</li></ul><p>Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases.</p><p>NumPy is licensed under the <a href="http://www.numpy.org/license.html#license" target="_blank" rel="noopener">BSD license</a>, enabling reuse with few restrictions.</p><h5 id="我的翻译："><a href="#我的翻译：" class="headerlink" title="我的翻译："></a>我的翻译：</h5><p>numpy是利用python进行科学计算的基础包，她包含了其他一些东西：</p><ol><li>一个有力的、强大的N维数组对象；</li><li>复杂(广播)的功能；</li><li>集成C/C++、公式翻译的工具；Fortran ：FormulaTranslation的缩写，好神奇，百度了才知道</li><li>有用的线性代数，Fourier transform这个玩意儿没反应过来，傅立叶转换(大学数学没好好学)，以及随机数字的能力</li></ol><p>除了以上科学的使用，numpy还可以被逻辑数据用作一个高效的多维的容器，可以随心所遇的定义数据类型，这就使得numpy可以无缝隙、快速的集成一个巨大的数据源。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>python版本：python3.5 </p><p>操作系统：window10 </p><p>建议安装：anaconda自带 Jupyter Notebook</p><hr><h3 id="Numpy代码学习（1）"><a href="#Numpy代码学习（1）" class="headerlink" title="Numpy代码学习（1）"></a>Numpy代码学习（1）</h3><p>从txt类型的文件中获取数据源，用genfromtxt方法，不会的就用help方法打印使用方法，因为数据源为分隔符为“，”所以delimiter=”,”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>,dtype=str)</span><br><span class="line"><span class="comment">#print(type(world_alcohol))</span></span><br><span class="line"><span class="comment">#print (world_alcohol)</span></span><br><span class="line"><span class="keyword">print</span> (help(numpy.genfromtxt))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#The numpy.array() function can take a list or list of lists as input. When we input a list, we get a one-dimensional array as a result:</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line"><span class="comment">#When we input a list of lists, we get a matrix as a result:</span></span><br><span class="line">matrix = numpy.array([[<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>], [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]])</span><br><span class="line"><span class="keyword">print</span> (vector)</span><br><span class="line"><span class="keyword">print</span> (matrix)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#We can use the ndarray.shape property to figure out how many elements are in the array</span></span><br><span class="line">vector = numpy.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(vector.shape)</span><br><span class="line"><span class="comment">#For matrices, the shape property contains a tuple with 2 elements.</span></span><br><span class="line">matrix = numpy.array([[<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>]])</span><br><span class="line">print(matrix.shape)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment">#Each value in a NumPy array has to have the same data type</span></span><br><span class="line"><span class="comment">#NumPy will automatically figure out an appropriate data type when reading in data or converting lists to arrays. </span></span><br><span class="line"><span class="comment">#You can check the data type of a NumPy array using the dtype property.</span></span><br><span class="line">numbers = numpy.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> (numbers)</span><br><span class="line">numbers.dtype</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#When NumPy can't convert a value to a numeric data type like float or integer, it uses a special nan value that stands for Not a Number</span></span><br><span class="line"><span class="comment">#nan is the missing data</span></span><br><span class="line"><span class="comment">#1.98600000e+03 is actually 1.986 * 10 ^ 3</span></span><br><span class="line">world_alcohol</span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>, dtype=str, skip_header=<span class="number">1</span>)</span><br><span class="line">print(world_alcohol)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">uruguay_other_1986 = world_alcohol[<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">third_country = world_alcohol[<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> (uruguay_other_1986)</span><br><span class="line"><span class="keyword">print</span> (third_country)</span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">print(vector[<span class="number">0</span>:<span class="number">3</span>])  </span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[:,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[:,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[<span class="number">1</span>:<span class="number">3</span>,<span class="number">0</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Numpy模块的学习：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="mlearn" scheme="https://jingweiz300.github.io/categories/mlearn/"/>
    
    
      <category term="numpy" scheme="https://jingweiz300.github.io/tags/numpy/"/>
    
      <category term="模块使用" scheme="https://jingweiz300.github.io/tags/%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>生成zabbix图表，通过微信发送群聊</title>
    <link href="https://jingweiz300.github.io/2018/03/13/%E7%94%9F%E6%88%90zabbix%E5%9B%BE%E7%89%87%E5%B9%B6%E9%80%9A%E8%BF%87%E5%BE%AE%E4%BF%A1%E5%8F%91%E9%80%81/"/>
    <id>https://jingweiz300.github.io/2018/03/13/生成zabbix图片并通过微信发送/</id>
    <published>2018-03-13T15:35:37.000Z</published>
    <updated>2018-03-13T15:21:12.615Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 生成zabbix图表，通过微信发送群聊：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>生成zabbix图表，通过微信发送群聊，嘿嘿，实现了微信实时接收服务器的监控性能item<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>环境：python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.request, urllib.error, urllib.parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> itchat, time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZabbixAPI</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        cf = configparser.ConfigParser()</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">'config.ini'</span>):</span><br><span class="line">            cf.read(<span class="string">r'config.ini'</span>)</span><br><span class="line">            self.__url = cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"url"</span>)</span><br><span class="line">            self.__user= cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"user"</span>)</span><br><span class="line">            self.__password = cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"password"</span>)</span><br><span class="line">            self.__header = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json-rpc"</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'未读到文件config.ini'</span>)</span><br><span class="line">            exit()</span><br><span class="line">        self.__token_id = self.UserLogin()</span><br><span class="line">    <span class="comment">#登陆获取token</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">UserLogin</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"user.login"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"user"</span>: self.__user,</span><br><span class="line">                <span class="string">"password"</span>: self.__password</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> self.PostRequest(data)</span><br><span class="line">    <span class="comment">#推送请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostRequest</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        request = urllib.request.Request(self.__url,json.dumps(data).encode(<span class="string">'utf-8'</span>),self.__header)</span><br><span class="line">        result = urllib.request.urlopen(request)</span><br><span class="line">        response = json.loads(result.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># print response['result']</span></span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">'result'</span>]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> KeyError</span><br><span class="line">    <span class="comment">#主机列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostGet</span><span class="params">(self,hostid=None,hostip=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"host.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>:&#123;</span><br><span class="line">                <span class="string">"output"</span>:<span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"selectGroups"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"selectParentTemplates"</span>: [<span class="string">"templateid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectInterfaces"</span>: [<span class="string">"interfaceid"</span>,<span class="string">"ip"</span>],</span><br><span class="line">                <span class="string">"selectInventory"</span>: [<span class="string">"os"</span>],</span><br><span class="line">                <span class="string">"selectItems"</span>:[<span class="string">"itemid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectGraphs"</span>:[<span class="string">"graphid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectApplications"</span>:[<span class="string">"applicationid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectTriggers"</span>:[<span class="string">"triggerid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectScreens"</span>:[<span class="string">"screenid"</span>,<span class="string">"name"</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> hostid:</span><br><span class="line">            data[<span class="string">"params"</span>]=&#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#主机列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostCreate</span><span class="params">(self,hostname,hostip,groupid=None,templateid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"host.create"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"host"</span>: hostname,</span><br><span class="line">                <span class="string">"interfaces"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"main"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"useip"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"ip"</span>: hostip,</span><br><span class="line">                        <span class="string">"dns"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="string">"port"</span>: <span class="string">"10050"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"groups"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"groupid"</span>: groupid</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"templates"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"templateid"</span>: templateid</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#主机组列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostGroupGet</span><span class="params">(self,hostid=None,itemid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"hostgroup.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>:&#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#监控项列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ItemGet</span><span class="params">(self,hostid=None,itemid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"item.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#模板列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">TemplateGet</span><span class="params">(self, hostid=None,templateid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"template.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"templateids"</span>: templateid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#图像列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GraphGet</span><span class="params">(self,hostid=None,graphid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"graph.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"graphids"</span>: graphid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#历史数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">History</span><span class="params">(self,itemid,data_type)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"history.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"history"</span>: data_type,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"clock"</span>,</span><br><span class="line">                <span class="string">"sortorder"</span>: <span class="string">"DESC"</span>,</span><br><span class="line">                <span class="string">"limit"</span>: <span class="number">60</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> self.PostRequest(data)</span><br><span class="line"><span class="comment">#测试：python manager.py shell ; from ZABBIX.ZabbixAPI import * ; main()，代码修改了要ctrl+Z退出重进</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_graph</span><span class="params">(itemid,kind)</span>:</span></span><br><span class="line">    <span class="comment">#实例zabbixapi</span></span><br><span class="line">    zapi=ZabbixAPI()</span><br><span class="line">    token=zapi.UserLogin()</span><br><span class="line">    hosts=zapi.HostGet()</span><br><span class="line">    <span class="comment">#通过api获取历史数据，根据itemid号和类型,类型参考zabbix官网，测试中使用的zabbix3.0版本，https://www.zabbix.com/documentation/3.0/manual/api/reference/history/get</span></span><br><span class="line">    <span class="comment">#ParameterTypeDescription</span></span><br><span class="line">    <span class="comment">#historyintegerHistory object types to return. </span></span><br><span class="line">    <span class="comment">#Possible values: </span></span><br><span class="line">    <span class="comment">#0 - numeric float; </span></span><br><span class="line">    <span class="comment">#1 - character; </span></span><br><span class="line">    <span class="comment">#2 - log; </span></span><br><span class="line">    <span class="comment">#3 - numeric unsigned; </span></span><br><span class="line">    <span class="comment">#4 - text. </span></span><br><span class="line">    <span class="comment">#Default: 3.</span></span><br><span class="line">    host_hisdata=zapi.History(itemid,kind)</span><br><span class="line">    clock_list=[]</span><br><span class="line">    value_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> host_hisdata:</span><br><span class="line">        <span class="comment">#源数据存放</span></span><br><span class="line">        source_clock=i[<span class="string">'clock'</span>]</span><br><span class="line">        source_value=i[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">import</span> time </span><br><span class="line">        <span class="comment">#将时间戳转换为需要使用的正常日期格式</span></span><br><span class="line">        clock_array=time.localtime(int(source_clock))</span><br><span class="line">        clock_used=time.strftime(<span class="string">'%H:%M:%S'</span>,clock_array)</span><br><span class="line">        <span class="comment">#监控指标值转换为需要使用的正常格式；</span></span><br><span class="line">        value_used=int(source_value)/(<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">        <span class="comment">#分别添加到相应的列表中</span></span><br><span class="line">        clock_list.append(clock_used)</span><br><span class="line">        value_list.append(value_used)</span><br><span class="line">    <span class="comment">#定义字典存储获取到的时间和值域</span></span><br><span class="line">    data_dict=&#123;<span class="string">'clock'</span>:clock_list,<span class="string">'value'</span>:value_list&#125;</span><br><span class="line">    <span class="comment">#使用pandas的df数据框，通过字典转换并求转置  data=[n,2]，不能直接通过pd.DataFrame(data_dict['clock'],data_dict['value'])的方法初始化df数据框，会报错</span></span><br><span class="line">    data=pd.DataFrame.from_dict(data_dict,orient=<span class="string">'index'</span>).T    </span><br><span class="line">    <span class="comment">#将x，y值取出</span></span><br><span class="line">    x=range(len(data[<span class="string">'clock'</span>]))</span><br><span class="line">    y=data[<span class="string">'value'</span>]</span><br><span class="line">    <span class="comment">#画图</span></span><br><span class="line">    <span class="comment">#from matplotlib.font_manager import FontProperties</span></span><br><span class="line">    <span class="comment">#font = FontProperties(fname = "/usr/share/fonts/truetype/arphic/ukai.ttc", size=14) </span></span><br><span class="line">    <span class="comment">#plt.title(u"用户数量(Y)关于游戏消费金额(X)的分布图",fontproperties=font)</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">30</span>,<span class="number">15</span>))    </span><br><span class="line">    <span class="comment">#plt.subplot(221)</span></span><br><span class="line">    plt.plot(x,y,<span class="string">'ro-'</span>)</span><br><span class="line">    plt.title(<span class="string">'Memory'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'time'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Memory Avaliable/(M)'</span>)</span><br><span class="line">    plt.xticks(x, data[<span class="string">'clock'</span>],rotation=<span class="number">45</span>)</span><br><span class="line">    <span class="comment">#必须要先保存再show</span></span><br><span class="line">    plt.savefig(<span class="string">'result.jpg'</span>)</span><br><span class="line">    <span class="comment">#plt.show()</span></span><br><span class="line"><span class="comment">#发送微信</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_weixin</span><span class="params">(alart_img,chatroomName)</span>:</span></span><br><span class="line">    <span class="comment">#登录微信接口</span></span><br><span class="line">    itchat.auto_login(hotReload=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment">#查找微信中的指定群聊，入参为群聊名称</span></span><br><span class="line">    chatrooms=itchat.search_chatrooms(name=chatroomName)    </span><br><span class="line">    <span class="comment">#找到群聊的ID号码</span></span><br><span class="line">    chatroom_id=chatrooms[<span class="number">0</span>][<span class="string">'UserName'</span>]</span><br><span class="line">    <span class="comment">#向群聊中发送zabbix生成的图片</span></span><br><span class="line">    itchat.send_image(alart_img,chatroom_id)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    alart_img=<span class="string">'result.jpg'</span></span><br><span class="line">    chatroomName=<span class="string">u'♞魔都村民♛'</span></span><br><span class="line">    itemid=<span class="number">23316</span></span><br><span class="line">    kind=<span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment">#每隔5分钟取一次zabbix数据，画图</span></span><br><span class="line">        make_graph(itemid)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#发送微信群聊信息</span></span><br><span class="line">        send_weixin(alart_img,chatroomName)</span><br><span class="line">        <span class="comment">#循环等待</span></span><br><span class="line">        time.sleep(<span class="number">300</span>)</span><br></pre></td></tr></table></figure><p>忘记配置图了</p><p>config.ini文件和上边脚本放在同一级目录下，内容如下，IP换掉，zabbix的登录用户名如果没有改动的话就是图中所示，照抄即可</p><p><img src="H:\github\blog\source\_posts\生成zabbix图片并通过微信发送-1.png" alt=""></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 生成zabbix图表，通过微信发送群聊：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;生成zabbix图表，通过微信发送群聊，嘿嘿，实现了微信实时接收服务器的监控性能item&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://jingweiz300.github.io/categories/python/"/>
    
    
      <category term="微信" scheme="https://jingweiz300.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="zabbix" scheme="https://jingweiz300.github.io/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>dbfpy模块的使用案例-python2.7</title>
    <link href="https://jingweiz300.github.io/2017/09/10/dbfpy/"/>
    <id>https://jingweiz300.github.io/2017/09/10/dbfpy/</id>
    <published>2017-09-10T11:35:37.000Z</published>
    <updated>2018-03-13T14:50:11.249Z</updated>
    
    <content type="html"><![CDATA[<p><strong> dbfpy模块的使用案例-python2.7：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>前两天写的一段处理dbf文件的案例，用于删除类dbf文件内容，提供了一种新思路。<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>对于每日接收的dbf格式的文件(以.dbf后缀的文件)或者是每日接收的日期结尾的文件，例如XXXX.dbf或者XXXX.0310，</p><p>对于这种实质上dbf内容的文件，需要进行删除操作；</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>百度python能够直接使用的模块无果，比较之下dbfpy文件能够较好的处理dbf文件，dbfpy文件能够实现读取现有的dbf文件内容、字段名称、格式以及长度，以及新写一个新的文件，为了实现删除操作，换一种思路如下:</p><ol><li>读取所有的源文件数据</li><li>去除不要的数据，留下想要的数据，即删除操作</li><li>新建一个新文件，数据结构和字段、长度均为源文件结构</li><li>将第二步留下的数据写入到第三步中产生的新文件中</li></ol><p>好了，需求和分析完成，贴上代码</p><p>因为dbfpy模块是python27下的，因此以下代码实在python2.7下运行的</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> dbfpy <span class="keyword">import</span> dbf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h4 id="重建函数"><a href="#重建函数" class="headerlink" title="重建函数"></a>重建函数</h4><p>定义一个重建函数，将一个文件名称传入函数，例如将XXXXX.dbf作为入参传入函数；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rebulid_dbf</span><span class="params">(x)</span>:</span></span><br><span class="line">    sourcefile = dbf.Dbf(x, <span class="keyword">True</span>)</span><br><span class="line">    sourcefield_name=sourcefile.fieldNames</span><br><span class="line">    sourcefield=sourcefile.header.fields</span><br><span class="line">    ziduan=[]</span><br><span class="line">    leixing=[]</span><br><span class="line">    changdu=[]</span><br><span class="line">    jingdu=[]</span><br><span class="line">    <span class="comment">#n=0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sourcefield:</span><br><span class="line">        k = re.split(<span class="string">' +'</span>, str(i))</span><br><span class="line">        <span class="comment">#print k[1] ,len(k)</span></span><br><span class="line">        ziduan.append(k[<span class="number">0</span>])</span><br><span class="line">        leixing.append(k[<span class="number">1</span>])</span><br><span class="line">        changdu.append(k[<span class="number">2</span>])</span><br><span class="line">        jingdu.append(k[<span class="number">3</span>])</span><br><span class="line">    a = []</span><br><span class="line">    b = []</span><br><span class="line">    time=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="string">'op_ccbdjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf file</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_hyccjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf file</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_jsmxjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_zqjsjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_JSMX'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_JSMX'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_HYCC'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_HYCC'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_HYCB'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_HYCB'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br></pre></td></tr></table></figure><h4 id="预处理、中转函数"><a href="#预处理、中转函数" class="headerlink" title="预处理、中转函数"></a>预处理、中转函数</h4><p>此函数主要用于将原文件拷贝到指定的一个中转mid目录下进行操作，并将处理完的结果拷贝回原目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sett_file</span><span class="params">(x,insett_file,insett_path,location)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> location==<span class="string">'SH'</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> insett_file:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> x:</span><br><span class="line">                os.chdir(insett_path)</span><br><span class="line">                j_f=j+<span class="string">'.dbf'</span></span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">in</span> i <span class="keyword">and</span> i != j_f:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'-------------上海-------------------'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'1、今日存在%s文件，现在拷贝文件到mid.....'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\mid\%s\%s &gt;&gt; ..\mid\%s\copy_%s.log"</span> % (i,YYYYMMDD,i,YYYYMMDD,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'2、%s文件已拷贝至mid'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % j</span><br><span class="line">                    os.chdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">                    <span class="keyword">if</span> os.path.exists(j_f):</span><br><span class="line">                        os.system(<span class="string">"del %s"</span> % j_f)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy ..\..\%s\%s .\%s &gt;&gt; copy_%s.log"</span> % (YYYYMMDD,i,j_f,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'3、mid中文件已拷贝为%s格式供使用'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) %j_f</span><br><span class="line">                    rebulid_dbf(j_f)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'4、mid中文件已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\..\%s\%s  /y &gt;&gt; copy_%s.log"</span> % (<span class="string">'MID_FILE_'</span>+j_f,YYYYMMDD,i,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'5、清算目录下的文件%s已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">    <span class="keyword">elif</span> location==<span class="string">'SZ'</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> insett_file:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> x:</span><br><span class="line">                os.chdir(insett_path)</span><br><span class="line">                j_f_big = j+MMDD+<span class="string">'.DBF'</span></span><br><span class="line">                j_f_small= j+MMDD+<span class="string">'.dbf'</span></span><br><span class="line">                <span class="comment">#print j_f,i</span></span><br><span class="line">                <span class="keyword">if</span> i == j_f_big <span class="keyword">or</span> i == j_f_small:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'-------------深圳-------------------'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'1、今日存在%s文件，现在拷贝文件到mid.....'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\mid\%s\%s &gt;&gt; ..\mid\%s\copy_%s.log"</span> % (i,YYYYMMDD,i,YYYYMMDD,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'2、%s文件已拷贝至mid'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % j</span><br><span class="line">                    os.chdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">                    rebulid_dbf(j_f_big)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'3、mid中文件已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\..\%s\%s  /y &gt;&gt; copy_%s.log"</span> % (<span class="string">'MID_FILE_'</span>+j_f_big,YYYYMMDD,i,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'4、清算目录下的文件%s已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br></pre></td></tr></table></figure><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><p>作为主函数入口，定义时间、路径、要修改的文件名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    YYYYMMDD = time.strftime(<span class="string">'%Y%m%d'</span>, time.localtime())</span><br><span class="line">    MMDD = time.strftime(<span class="string">'%m%d'</span>, time.localtime())</span><br><span class="line">    insett_path = <span class="string">r'D:\abc\abc\%s'</span> % YYYYMMDD</span><br><span class="line">    os.chdir(insett_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'..\mid\%s'</span> % YYYYMMDD):</span><br><span class="line">        os.mkdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">    insett_file = os.listdir(insett_path)</span><br><span class="line">    shzd_targit_file=[<span class="string">'op_ccbdjsq1l'</span>,<span class="string">'op_hyccjsq1l'</span>,<span class="string">'op_jsmxjsq1l'</span>,<span class="string">'op_zqjsjsq1l'</span>]</span><br><span class="line">    sett_file(shzd_targit_file,insett_file,insett_path,<span class="string">'SH'</span>)</span><br><span class="line">    szzd_targit_file=[<span class="string">'SQ_HYCB'</span>,<span class="string">'SQ_HYCC'</span>,<span class="string">'SQ_JSMX'</span>]</span><br><span class="line">    sett_file(szzd_targit_file, insett_file, insett_path, <span class="string">'SZ'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'任务执行成功，如果有问题，请查看中转目录下的日志文件。'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'中转目录为：%s'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % insett_path+<span class="string">'\mid'</span></span><br><span class="line">    input()</span><br></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; dbfpy模块的使用案例-python2.7：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;前两天写的一段处理dbf文件的案例，用于删除类dbf文件内容，提供了一种新思路。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://jingweiz300.github.io/categories/python/"/>
    
    
      <category term="模块使用" scheme="https://jingweiz300.github.io/tags/%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
</feed>

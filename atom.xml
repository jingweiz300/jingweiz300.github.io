<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Story</title>
  
  <subtitle>虽不能至，然心向往之~~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jingweiz300.github.io/"/>
  <updated>2018-03-15T06:40:58.887Z</updated>
  <id>https://jingweiz300.github.io/</id>
  
  <author>
    <name>JingWei Zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Numpy模块的学习（3-5）</title>
    <link href="https://jingweiz300.github.io/2018/03/15/Numpy%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0(3-5)/"/>
    <id>https://jingweiz300.github.io/2018/03/15/Numpy模块的学习(3-5)/</id>
    <published>2018-03-15T04:35:37.000Z</published>
    <updated>2018-03-15T06:40:58.887Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Numpy模块的学习（3-5）：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>介绍一个科学计算数据库的使用，它就是numpy，之后会出一个更流行的pandas模块使用简介</p><p><a href="http://www.numpy.org/" target="_blank" rel="noopener">官方网站</a></p><p>环境</p><p>python版本：python3.5 </p><p>操作系统：window10 </p><p>建议安装：anaconda自带 Jupyter Notebook</p><hr><h3 id="Numpy代码学习（3）"><a href="#Numpy代码学习（3）" class="headerlink" title="Numpy代码学习（3）"></a>Numpy代码学习（3）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reshape函数将源矩阵重铸源矩阵是1行15列的，重铸为3行5列</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">print</span> (np.arange(<span class="number">15</span>))</span><br><span class="line">a = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3,  4],</span></span><br><span class="line"><span class="string">       [ 5,  6,  7,  8,  9],</span></span><br><span class="line"><span class="string">       [10, 11, 12, 13, 14]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#查看维度</span></span><br><span class="line">a.shape</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">(3, 5)</span></span><br><span class="line"><span class="string">#ndim的意思是维度的个数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a.ndim</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#查看值类型的名称</span></span><br><span class="line">a.dtype.name</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'int32'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#查看所有值的个数</span></span><br><span class="line">a.size</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">15</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#初始化一个全是0的矩阵</span></span><br><span class="line">np.zeros ((<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="string">       [ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="string">       [ 0.,  0.,  0.,  0.]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#初始化一个全是1的多维矩阵，并且1的类型为整形，默认情况下出来的float型</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#np.ones( (2,3,4), dtype=np.int32 )</span></span><br><span class="line">np.ones((<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),dtype=np.int32)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[[1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1]]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#创建一个数字序列，从10到30 ，中间间隔5；从1到50，中间间隔0.3</span></span><br><span class="line"><span class="comment">#To create sequences of numbers</span></span><br><span class="line">np.arange( <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span> )</span><br><span class="line">np.arange(<span class="number">1</span>,<span class="number">50</span>,<span class="number">0.3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([  1. ,   1.3,   1.6,   1.9,   2.2,   2.5,   2.8,   3.1,   3.4,</span></span><br><span class="line"><span class="string">         3.7,   4. ,   4.3,   4.6,   4.9,   5.2,   5.5,   5.8,   6.1,</span></span><br><span class="line"><span class="string">         6.4,   6.7,   7. ,   7.3,   7.6,   7.9,   8.2,   8.5,   8.8,</span></span><br><span class="line"><span class="string">         9.1,   9.4,   9.7,  10. ,  10.3,  10.6,  10.9,  11.2,  11.5,</span></span><br><span class="line"><span class="string">        11.8,  12.1,  12.4,  12.7,  13. ,  13.3,  13.6,  13.9,  14.2,</span></span><br><span class="line"><span class="string">        14.5,  14.8,  15.1,  15.4,  15.7,  16. ,  16.3,  16.6,  16.9,</span></span><br><span class="line"><span class="string">        17.2,  17.5,  17.8,  18.1,  18.4,  18.7,  19. ,  19.3,  19.6,</span></span><br><span class="line"><span class="string">        19.9,  20.2,  20.5,  20.8,  21.1,  21.4,  21.7,  22. ,  22.3,</span></span><br><span class="line"><span class="string">        22.6,  22.9,  23.2,  23.5,  23.8,  24.1,  24.4,  24.7,  25. ,</span></span><br><span class="line"><span class="string">        25.3,  25.6,  25.9,  26.2,  26.5,  26.8,  27.1,  27.4,  27.7,</span></span><br><span class="line"><span class="string">        28. ,  28.3,  28.6,  28.9,  29.2,  29.5,  29.8,  30.1,  30.4,</span></span><br><span class="line"><span class="string">        30.7,  31. ,  31.3,  31.6,  31.9,  32.2,  32.5,  32.8,  33.1,</span></span><br><span class="line"><span class="string">        33.4,  33.7,  34. ,  34.3,  34.6,  34.9,  35.2,  35.5,  35.8,</span></span><br><span class="line"><span class="string">        36.1,  36.4,  36.7,  37. ,  37.3,  37.6,  37.9,  38.2,  38.5,</span></span><br><span class="line"><span class="string">        38.8,  39.1,  39.4,  39.7,  40. ,  40.3,  40.6,  40.9,  41.2,</span></span><br><span class="line"><span class="string">        41.5,  41.8,  42.1,  42.4,  42.7,  43. ,  43.3,  43.6,  43.9,</span></span><br><span class="line"><span class="string">        44.2,  44.5,  44.8,  45.1,  45.4,  45.7,  46. ,  46.3,  46.6,</span></span><br><span class="line"><span class="string">        46.9,  47.2,  47.5,  47.8,  48.1,  48.4,  48.7,  49. ,  49.3,</span></span><br><span class="line"><span class="string">        49.6,  49.9])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">np.arange( <span class="number">0</span>, <span class="number">2</span>, <span class="number">0.3</span> )</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([ 0. ,  0.3,  0.6,  0.9,  1.2,  1.5,  1.8])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#初始化0-11，总共12个数字，并且重铸为4行3列</span></span><br><span class="line">np.arange(<span class="number">12</span>).reshape(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3,  4],</span></span><br><span class="line"><span class="string">       [ 5,  6,  7,  8,  9],</span></span><br><span class="line"><span class="string">       [10, 11, 12, 13, 14]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#随机生成一个2行3列的矩阵</span></span><br><span class="line">np.random.random((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0.65026519,  0.4807253 ,  0.10297998],</span></span><br><span class="line"><span class="string">       [ 0.09497607,  0.20531811,  0.63868766]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#导入π，并初始化一个从0到π的1行100列的数组</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> pi</span><br><span class="line">np.linspace( <span class="number">0</span>, pi, <span class="number">100</span> )</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([ 0.        ,  0.03173326,  0.06346652,  0.09519978,  0.12693304,</span></span><br><span class="line"><span class="string">        0.1586663 ,  0.19039955,  0.22213281,  0.25386607,  0.28559933,</span></span><br><span class="line"><span class="string">        0.31733259,  0.34906585,  0.38079911,  0.41253237,  0.44426563,</span></span><br><span class="line"><span class="string">        0.47599889,  0.50773215,  0.53946541,  0.57119866,  0.60293192,</span></span><br><span class="line"><span class="string">        0.63466518,  0.66639844,  0.6981317 ,  0.72986496,  0.76159822,</span></span><br><span class="line"><span class="string">        0.79333148,  0.82506474,  0.856798  ,  0.88853126,  0.92026451,</span></span><br><span class="line"><span class="string">        0.95199777,  0.98373103,  1.01546429,  1.04719755,  1.07893081,</span></span><br><span class="line"><span class="string">        1.11066407,  1.14239733,  1.17413059,  1.20586385,  1.23759711,</span></span><br><span class="line"><span class="string">        1.26933037,  1.30106362,  1.33279688,  1.36453014,  1.3962634 ,</span></span><br><span class="line"><span class="string">        1.42799666,  1.45972992,  1.49146318,  1.52319644,  1.5549297 ,</span></span><br><span class="line"><span class="string">        1.58666296,  1.61839622,  1.65012947,  1.68186273,  1.71359599,</span></span><br><span class="line"><span class="string">        1.74532925,  1.77706251,  1.80879577,  1.84052903,  1.87226229,</span></span><br><span class="line"><span class="string">        1.90399555,  1.93572881,  1.96746207,  1.99919533,  2.03092858,</span></span><br><span class="line"><span class="string">        2.06266184,  2.0943951 ,  2.12612836,  2.15786162,  2.18959488,</span></span><br><span class="line"><span class="string">        2.22132814,  2.2530614 ,  2.28479466,  2.31652792,  2.34826118,</span></span><br><span class="line"><span class="string">        2.37999443,  2.41172769,  2.44346095,  2.47519421,  2.50692747,</span></span><br><span class="line"><span class="string">        2.53866073,  2.57039399,  2.60212725,  2.63386051,  2.66559377,</span></span><br><span class="line"><span class="string">        2.69732703,  2.72906028,  2.76079354,  2.7925268 ,  2.82426006,</span></span><br><span class="line"><span class="string">        2.85599332,  2.88772658,  2.91945984,  2.9511931 ,  2.98292636,</span></span><br><span class="line"><span class="string">        3.01465962,  3.04639288,  3.07812614,  3.10985939,  3.14159265])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#np.sin余弦求法</span></span><br><span class="line">np.sin(np.linspace( <span class="number">0</span>, <span class="number">2</span>*pi, <span class="number">100</span> ))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([  0.00000000e+00,   6.34239197e-02,   1.26592454e-01,</span></span><br><span class="line"><span class="string">         1.89251244e-01,   2.51147987e-01,   3.12033446e-01,</span></span><br><span class="line"><span class="string">         3.71662456e-01,   4.29794912e-01,   4.86196736e-01,</span></span><br><span class="line"><span class="string">         5.40640817e-01,   5.92907929e-01,   6.42787610e-01,</span></span><br><span class="line"><span class="string">         6.90079011e-01,   7.34591709e-01,   7.76146464e-01,</span></span><br><span class="line"><span class="string">         8.14575952e-01,   8.49725430e-01,   8.81453363e-01,</span></span><br><span class="line"><span class="string">         9.09631995e-01,   9.34147860e-01,   9.54902241e-01,</span></span><br><span class="line"><span class="string">         9.71811568e-01,   9.84807753e-01,   9.93838464e-01,</span></span><br><span class="line"><span class="string">         9.98867339e-01,   9.99874128e-01,   9.96854776e-01,</span></span><br><span class="line"><span class="string">         9.89821442e-01,   9.78802446e-01,   9.63842159e-01,</span></span><br><span class="line"><span class="string">         9.45000819e-01,   9.22354294e-01,   8.95993774e-01,</span></span><br><span class="line"><span class="string">         8.66025404e-01,   8.32569855e-01,   7.95761841e-01,</span></span><br><span class="line"><span class="string">         7.55749574e-01,   7.12694171e-01,   6.66769001e-01,</span></span><br><span class="line"><span class="string">         6.18158986e-01,   5.67059864e-01,   5.13677392e-01,</span></span><br><span class="line"><span class="string">         4.58226522e-01,   4.00930535e-01,   3.42020143e-01,</span></span><br><span class="line"><span class="string">         2.81732557e-01,   2.20310533e-01,   1.58001396e-01,</span></span><br><span class="line"><span class="string">         9.50560433e-02,   3.17279335e-02,  -3.17279335e-02,</span></span><br><span class="line"><span class="string">        -9.50560433e-02,  -1.58001396e-01,  -2.20310533e-01,</span></span><br><span class="line"><span class="string">        -2.81732557e-01,  -3.42020143e-01,  -4.00930535e-01,</span></span><br><span class="line"><span class="string">        -4.58226522e-01,  -5.13677392e-01,  -5.67059864e-01,</span></span><br><span class="line"><span class="string">        -6.18158986e-01,  -6.66769001e-01,  -7.12694171e-01,</span></span><br><span class="line"><span class="string">        -7.55749574e-01,  -7.95761841e-01,  -8.32569855e-01,</span></span><br><span class="line"><span class="string">        -8.66025404e-01,  -8.95993774e-01,  -9.22354294e-01,</span></span><br><span class="line"><span class="string">        -9.45000819e-01,  -9.63842159e-01,  -9.78802446e-01,</span></span><br><span class="line"><span class="string">        -9.89821442e-01,  -9.96854776e-01,  -9.99874128e-01,</span></span><br><span class="line"><span class="string">        -9.98867339e-01,  -9.93838464e-01,  -9.84807753e-01,</span></span><br><span class="line"><span class="string">        -9.71811568e-01,  -9.54902241e-01,  -9.34147860e-01,</span></span><br><span class="line"><span class="string">        -9.09631995e-01,  -8.81453363e-01,  -8.49725430e-01,</span></span><br><span class="line"><span class="string">        -8.14575952e-01,  -7.76146464e-01,  -7.34591709e-01,</span></span><br><span class="line"><span class="string">        -6.90079011e-01,  -6.42787610e-01,  -5.92907929e-01,</span></span><br><span class="line"><span class="string">        -5.40640817e-01,  -4.86196736e-01,  -4.29794912e-01,</span></span><br><span class="line"><span class="string">        -3.71662456e-01,  -3.12033446e-01,  -2.51147987e-01,</span></span><br><span class="line"><span class="string">        -1.89251244e-01,  -1.26592454e-01,  -6.34239197e-02,</span></span><br><span class="line"><span class="string">        -2.44929360e-16])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#矩阵的剑法运算，对应位置每个值进行相减</span></span><br><span class="line"><span class="comment">#矩阵的幂运算，对应位置每个值求幂值</span></span><br><span class="line"><span class="comment">#矩阵的比较运算，同==判断一样，一个array&lt;value或者array&gt;value均会返回一个bool矩阵</span></span><br><span class="line"><span class="comment">#the product operator * operates elementwise in NumPy arrays</span></span><br><span class="line">a = np.array( [<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>] )</span><br><span class="line">b = np.arange( <span class="number">4</span> )</span><br><span class="line"><span class="keyword">print</span> (a) </span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#b</span></span><br><span class="line">c = a-b</span><br><span class="line"><span class="keyword">print</span> (c)</span><br><span class="line">c = c <span class="number">-1</span></span><br><span class="line"><span class="keyword">print</span> (c)</span><br><span class="line">b**<span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> (b**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (a&lt;<span class="number">35</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[20 30 40 50]</span></span><br><span class="line"><span class="string">[0 1 2 3]</span></span><br><span class="line"><span class="string">[20 29 38 47]</span></span><br><span class="line"><span class="string">[19 28 37 46]</span></span><br><span class="line"><span class="string">[0 1 4 9]</span></span><br><span class="line"><span class="string">[ True  True False False]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#矩阵的乘法，可以使用A.dot(B)或者np.dot(A,B)两种方法</span></span><br><span class="line"><span class="comment">#The matrix product can be performed using the dot function or method</span></span><br><span class="line">A = np.array( [[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">               [<span class="number">0</span>,<span class="number">1</span>]] )</span><br><span class="line">B = np.array( [[<span class="number">2</span>,<span class="number">0</span>],</span><br><span class="line">               [<span class="number">3</span>,<span class="number">4</span>]] )</span><br><span class="line"><span class="keyword">print</span> (A)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (B)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (A*B)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (A.dot(B))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.dot(A, B)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1 1]</span></span><br><span class="line"><span class="string"> [0 1]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[2 0]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[2 0]</span></span><br><span class="line"><span class="string"> [0 4]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[5 4]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[5 4]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="Numpy代码学习（４）"><a href="#Numpy代码学习（４）" class="headerlink" title="Numpy代码学习（４）"></a>Numpy代码学习（４）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求e的幂，使用np.exp()，参数为array</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">B = np.arange(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (B)</span><br><span class="line"><span class="keyword">print</span> (np.exp(B))</span><br><span class="line"><span class="keyword">print</span> (np.sqrt(B))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[0 1 2]</span></span><br><span class="line"><span class="string">[ 1.          2.71828183  7.3890561 ]</span></span><br><span class="line"><span class="string">[ 0.          1.          1.41421356]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#ｒａｖｅｌ将多维矩阵展开为１维，可以使用．ｓｈａｐｅ方法将建立多维矩阵</span></span><br><span class="line"><span class="comment">#如果ｓｈａｐｅ的参数中有－１，则自动计算维度</span></span><br><span class="line"><span class="comment">#Return the floor of the input</span></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="comment">#a.shape</span></span><br><span class="line"><span class="comment">## flatten the array</span></span><br><span class="line"><span class="keyword">print</span> (a.ravel())</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line">a.shape = (<span class="number">6</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (a) </span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (a.T)</span><br><span class="line"><span class="comment">#If a dimension is given as -1 in a reshaping operation, the other dimensions are automatically calculated:</span></span><br><span class="line"><span class="comment">#a.reshape(3,-1)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 9.  1.  4.  6.]</span></span><br><span class="line"><span class="string"> [ 2.  2.  2.  2.]</span></span><br><span class="line"><span class="string"> [ 1.  0.  8.  3.]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[ 9.  1.  4.  6.  2.  2.  2.  2.  1.  0.  8.  3.]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[ 9.  1.]</span></span><br><span class="line"><span class="string"> [ 4.  6.]</span></span><br><span class="line"><span class="string"> [ 2.  2.]</span></span><br><span class="line"><span class="string"> [ 2.  2.]</span></span><br><span class="line"><span class="string"> [ 1.  0.]</span></span><br><span class="line"><span class="string"> [ 8.  3.]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[ 9.  4.  2.  2.  1.  8.]</span></span><br><span class="line"><span class="string"> [ 1.  6.  2.  2.  0.  3.]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵的拼接，列数相加，</span></span><br><span class="line"><span class="comment">#２×２的矩阵ｖｓｔａｃｋ２×２的矩阵为４×２的矩阵结果ｖ代表了垂直</span></span><br><span class="line"><span class="comment">#２×２的矩阵ｈｓｔａｃｋ２×２的矩阵为２×４的矩阵结果ｈ代表了水平</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line">b = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.vstack((a,b)))</span><br><span class="line"><span class="comment">#np.hstack((a,b))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0.  6.]</span></span><br><span class="line"><span class="string"> [ 4.  6.]]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[[ 3.  3.]</span></span><br><span class="line"><span class="string"> [ 3.  8.]]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[[ 0.  6.]</span></span><br><span class="line"><span class="string"> [ 4.  6.]</span></span><br><span class="line"><span class="string"> [ 3.  3.]</span></span><br><span class="line"><span class="string"> [ 3.  8.]]</span></span><br><span class="line"><span class="string">[[ 0.  6.  3.  3.]</span></span><br><span class="line"><span class="string"> [ 4.  6.  3.  8.]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#水平分隔矩阵的方法hsplit，垂直分隔矩阵的方法vsplit</span></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">12</span>)))</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.hsplit(a,<span class="number">3</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.hsplit(a,(<span class="number">3</span>,<span class="number">4</span>)))   <span class="comment"># Split a after the third and the fourth column</span></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">12</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">np.vsplit(a,<span class="number">3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 1.  6.  1.  0.  1.  5.  6.  3.  1.  5.  6.  9.]</span></span><br><span class="line"><span class="string"> [ 9.  2.  9.  1.  7.  3.  7.  4.  9.  3.  3.  8.]]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[array([[ 1.,  6.,  1.,  0.],</span></span><br><span class="line"><span class="string">       [ 9.,  2.,  9.,  1.]]), array([[ 1.,  5.,  6.,  3.],</span></span><br><span class="line"><span class="string">       [ 7.,  3.,  7.,  4.]]), array([[ 1.,  5.,  6.,  9.],</span></span><br><span class="line"><span class="string">       [ 9.,  3.,  3.,  8.]])]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[array([[ 1.,  6.,  1.],</span></span><br><span class="line"><span class="string">       [ 9.,  2.,  9.]]), array([[ 0.],</span></span><br><span class="line"><span class="string">       [ 1.]]), array([[ 1.,  5.,  6.,  3.,  1.,  5.,  6.,  9.],</span></span><br><span class="line"><span class="string">       [ 7.,  3.,  7.,  4.,  9.,  3.,  3.,  8.]])]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[[ 2.  8.]</span></span><br><span class="line"><span class="string"> [ 8.  6.]</span></span><br><span class="line"><span class="string"> [ 3.  8.]</span></span><br><span class="line"><span class="string"> [ 0.  2.]</span></span><br><span class="line"><span class="string"> [ 8.  2.]</span></span><br><span class="line"><span class="string"> [ 9.  4.]</span></span><br><span class="line"><span class="string"> [ 9.  2.]</span></span><br><span class="line"><span class="string"> [ 1.  9.]</span></span><br><span class="line"><span class="string"> [ 7.  6.]</span></span><br><span class="line"><span class="string"> [ 2.  3.]</span></span><br><span class="line"><span class="string"> [ 8.  5.]</span></span><br><span class="line"><span class="string"> [ 5.  5.]]</span></span><br><span class="line"><span class="string">[array([[ 2.,  8.],</span></span><br><span class="line"><span class="string">        [ 8.,  6.],</span></span><br><span class="line"><span class="string">        [ 3.,  8.],</span></span><br><span class="line"><span class="string">        [ 0.,  2.]]), array([[ 8.,  2.],</span></span><br><span class="line"><span class="string">        [ 9.,  4.],</span></span><br><span class="line"><span class="string">        [ 9.,  2.],</span></span><br><span class="line"><span class="string">        [ 1.,  9.]]), array([[ 7.,  6.],</span></span><br><span class="line"><span class="string">        [ 2.,  3.],</span></span><br><span class="line"><span class="string">        [ 8.,  5.],</span></span><br><span class="line"><span class="string">        [ 5.,  5.]])]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Simple assignments make no copy of array objects or of their data.</span></span><br><span class="line">a = np.arange(<span class="number">12</span>)</span><br><span class="line">b = a</span><br><span class="line"><span class="comment"># a and b are two names for the same ndarray object</span></span><br><span class="line"><span class="keyword">print</span> (b <span class="keyword">is</span> a)</span><br><span class="line">b.shape = <span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">print</span> (a.shape)</span><br><span class="line"><span class="keyword">print</span> (id(a))</span><br><span class="line"><span class="keyword">print</span> (id(b))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">(3, 4)</span></span><br><span class="line"><span class="string">2153802648192</span></span><br><span class="line"><span class="string">2153802648192</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#The view method creates a new array object that looks at the same data.</span></span><br><span class="line">c = a.view()</span><br><span class="line"><span class="keyword">print</span> (c <span class="keyword">is</span> a)</span><br><span class="line">c.shape = <span class="number">2</span>,<span class="number">6</span></span><br><span class="line"><span class="keyword">print</span> (a.shape)</span><br><span class="line">c[<span class="number">0</span>,<span class="number">4</span>] = <span class="number">1234</span></span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (id(a))</span><br><span class="line"><span class="keyword">print</span> (id(c))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">(3, 4)</span></span><br><span class="line"><span class="string">[[   0    1    2    3]</span></span><br><span class="line"><span class="string"> [1234    5    6    7]</span></span><br><span class="line"><span class="string"> [   8    9   10   11]]</span></span><br><span class="line"><span class="string">2153802648192</span></span><br><span class="line"><span class="string">2153802646432</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#ｃｏｐｙ方法能够完全复制到另一个变量，测试方法，ｐｒｉｎｔ（ａ　ｉｓ　ｂ），如果结果为Ｔｒｕｅ，则数据库中对应的是同一个对象</span></span><br><span class="line"><span class="comment">#The copy method makes a complete copy of the array and its data.</span></span><br><span class="line">d = a.copy() </span><br><span class="line">d <span class="keyword">is</span> a</span><br><span class="line">d[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">9999</span></span><br><span class="line"><span class="keyword">print</span> (d) </span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[9999    1    2    3]</span></span><br><span class="line"><span class="string"> [1234    5    6    7]</span></span><br><span class="line"><span class="string"> [   8    9   10   11]]</span></span><br><span class="line"><span class="string">[[   0    1    2    3]</span></span><br><span class="line"><span class="string"> [1234    5    6    7]</span></span><br><span class="line"><span class="string"> [   8    9   10   11]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="Numpy代码学习（５）"><a href="#Numpy代码学习（５）" class="headerlink" title="Numpy代码学习（５）"></a>Numpy代码学习（５）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#argmax沿着坐标横轴取最大的一个索引</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.sin(np.arange(<span class="number">20</span>)).reshape(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br><span class="line">ind = data.argmax(axis=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> (ind)</span><br><span class="line">data_max = data[ind, range(data.shape[<span class="number">1</span>])]</span><br><span class="line"><span class="keyword">print</span> (data_max)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0.          0.84147098  0.90929743  0.14112001]</span></span><br><span class="line"><span class="string"> [-0.7568025  -0.95892427 -0.2794155   0.6569866 ]</span></span><br><span class="line"><span class="string"> [ 0.98935825  0.41211849 -0.54402111 -0.99999021]</span></span><br><span class="line"><span class="string"> [-0.53657292  0.42016704  0.99060736  0.65028784]</span></span><br><span class="line"><span class="string"> [-0.28790332 -0.96139749 -0.75098725  0.14987721]]</span></span><br><span class="line"><span class="string">[2 0 3 1]</span></span><br><span class="line"><span class="string">[ 0.98935825  0.84147098  0.99060736  0.6569866 ]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">40</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">b = np.tile(a, (<span class="number">4</span>, <span class="number">3</span>)) </span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[ 0 10 20 30]</span></span><br><span class="line"><span class="string">[[ 0 10 20 30  0 10 20 30  0 10 20 30]</span></span><br><span class="line"><span class="string"> [ 0 10 20 30  0 10 20 30  0 10 20 30]</span></span><br><span class="line"><span class="string"> [ 0 10 20 30  0 10 20 30  0 10 20 30]</span></span><br><span class="line"><span class="string"> [ 0 10 20 30  0 10 20 30  0 10 20 30]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line">b = np.sort(a, axis=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#b</span></span><br><span class="line">a.sort(axis=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">a = np.array([<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">j = np.argsort(a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (j)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (a[j])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[4 3 5]</span></span><br><span class="line"><span class="string"> [1 2 1]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[3 4 5]</span></span><br><span class="line"><span class="string"> [1 1 2]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[3 4 5]</span></span><br><span class="line"><span class="string"> [1 1 2]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[2 3 1 0]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[1 2 3 4]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>转载：</p><p><a href="https://www.cnblogs.com/xieshengsen/p/6623775.html" target="_blank" rel="noopener">https://www.cnblogs.com/xieshengsen/p/6623775.html</a></p><blockquote><p> 一维数组的索引和切片</p><p># 改变数组的维度<br># reshape 改变数组维度(重新调整矩阵的行数、列数、维数。)</p><p>ravel函数完成展平</p><p>flatten 这个函数恰如其名，flatten就是展平的意思，与ravel函数的功能相同。不过，flatten函数会请求分配内存来保存结果，而ravel函数只是返回数组的一个视图（view）</p><p>shape,用元组设置维度</p><p>resize,resize和reshape函数的功能一样，但resize会直接修改所操作的数组：</p><p>数组的组合</p><p># 1. 水平组合hstack函数</p><p># 2. 垂直组合vstack函数</p><p># 3. 深度组合dstack函数(将一系列数组沿着纵轴（深度）方向进行层叠组合)</p><p># 4. 列组合,column_stack函数对于一维数组将按列方向进行组合,对于二维数组，column_stack与hstack的效果是相同</p><p># 行组合row_stack函数（对于两个一维数组，将直接层叠起来组合成一个二维数组，对于二维数组，row_stack与vstack的效果是相同的）</p><p># 分割数组</p><p># 1. 水平分割 hsplit函数</p><p># 调用split函数并指定参数axis=1</p><p># 2. 垂直分割,vsplit函数</p><p># 调用split函数并指定参数axis=0</p><p># 3. 深度分割,dsplit函数</p><p># 数组的属性</p><p># 1. ndim属性，给出数组的维数，或数组轴的个数</p><p># 2. size属性，给出数组元素的总个数</p><p># 3. itemsize属性，给出数组中的元素在内存中所占的字节数</p><p># 4. nbytes属性,整个数组所占的存储空间(itemsize和size属性值的乘积)</p><p># 5. T属性,效果和transpose函数一样</p><p># 数组的转换,tolist函数</p></blockquote></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Numpy模块的学习（3-5）：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="mlearn" scheme="https://jingweiz300.github.io/categories/mlearn/"/>
    
    
      <category term="numpy" scheme="https://jingweiz300.github.io/tags/numpy/"/>
    
      <category term="模块使用" scheme="https://jingweiz300.github.io/tags/%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Numpy模块的学习(1-2)</title>
    <link href="https://jingweiz300.github.io/2018/03/14/Numpy%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0(1-2)/"/>
    <id>https://jingweiz300.github.io/2018/03/14/Numpy模块的学习(1-2)/</id>
    <published>2018-03-14T11:35:37.000Z</published>
    <updated>2018-03-15T06:45:22.871Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Numpy模块的学习(1-2)：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>介绍一个科学计算数据库的使用，它就是numpy，之后会出一个更流行的pandas模块使用简介</p><p><a href="http://www.numpy.org/" target="_blank" rel="noopener">官方网站</a></p><p>先贴上原版英文介绍震楼，英文好的同学自己翻译，不好的先去学好英语(开个玩笑)，我直接翻译一下，拿来主义直接看就是了。</p><h3 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h3><p>NumPy is the fundamental package for scientific computing with Python. It contains among other things:</p><ul><li>a powerful N-dimensional array object</li><li>sophisticated (broadcasting) functions</li><li>tools for integrating C/C++ and Fortran code</li><li>useful linear algebra, Fourier transform, and random number capabilities</li></ul><p>Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases.</p><p>NumPy is licensed under the <a href="http://www.numpy.org/license.html#license" target="_blank" rel="noopener">BSD license</a>, enabling reuse with few restrictions.</p><p>我的翻译：</p><p>numpy是利用python进行科学计算的基础包，她包含了其他一些东西：</p><ol><li>一个有力的、强大的N维数组对象；</li><li>复杂(广播)的功能；</li><li>集成C/C++、公式翻译的工具；Fortran ：FormulaTranslation的缩写，好神奇，百度了才知道</li><li>有用的线性代数，Fourier transform这个玩意儿没反应过来，傅立叶转换(大学数学没好好学)，以及随机数字的能力</li></ol><p>除了以上科学的使用，numpy还可以被逻辑数据用作一个高效的多维的容器，可以随心所遇的定义数据类型，这就使得numpy可以无缝隙、快速的集成一个巨大的数据源。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>python版本：python3.5 </p><p>操作系统：window10 </p><p>建议安装：anaconda自带 Jupyter Notebook</p><hr><h3 id="Numpy代码学习（1-2）"><a href="#Numpy代码学习（1-2）" class="headerlink" title="Numpy代码学习（1-2）"></a>Numpy代码学习（1-2）</h3><p>从txt类型的文件中获取数据源，用genfromtxt方法，不会的就用help方法打印使用方法，因为数据源为分隔符为“，”所以delimiter=”,”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>,dtype=str)</span><br><span class="line"><span class="comment">#print(type(world_alcohol))</span></span><br><span class="line"><span class="comment">#print (world_alcohol)</span></span><br><span class="line"><span class="keyword">print</span> (help(numpy.genfromtxt))</span><br></pre></td></tr></table></figure><p><img src="http://zhoujw.cn/img/20180314-1.png" alt="图1"></p><p>numpy.array可以使用列表表单或者列表中列表的形式作为入参，当输入一个列表的时候，得到的是一位数组，当输入一个列表中包含列表的入参时，得到的是一个矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#The numpy.array() function can take a list or list of lists as input. When we input a list, we get a one-dimensional array as a result:</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line"><span class="comment">#When we input a list of lists, we get a matrix as a result:</span></span><br><span class="line">matrix = numpy.array([[<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>], [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]])</span><br><span class="line"><span class="keyword">print</span> (vector)</span><br><span class="line"><span class="keyword">print</span> (matrix)</span><br></pre></td></tr></table></figure><p>我们可以使用ndarray.shape这个属性，来查看有多少个元素，对于矩阵来说，可以用同样的方法查看矩阵的维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#We can use the ndarray.shape property to figure out how many elements are in the array</span></span><br><span class="line">vector = numpy.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(vector.shape)</span><br><span class="line"><span class="comment">#For matrices, the shape property contains a tuple with 2 elements.</span></span><br><span class="line">matrix = numpy.array([[<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>]])</span><br><span class="line">print(matrix.shape)</span><br></pre></td></tr></table></figure><p>numpy中的array对象中，每一个数据都拥有相同的数据类型和结构，numpy会自动的找出最适应、最合适的数据类型，当把列表转换为数组的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment">#Each value in a NumPy array has to have the same data type</span></span><br><span class="line"><span class="comment">#NumPy will automatically figure out an appropriate data type when reading in data or converting lists to arrays. </span></span><br><span class="line"><span class="comment">#You can check the data type of a NumPy array using the dtype property.</span></span><br><span class="line">numbers = numpy.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> (numbers)</span><br><span class="line">numbers.dtype</span><br></pre></td></tr></table></figure><p>当numpy无法将一个具体的值转换为数字数据类型的时候，她会使用一个特殊的NAN值来标识，这玩意儿不是数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#When NumPy can't convert a value to a numeric data type like float or integer, it uses a special nan value that stands for Not a Number</span></span><br><span class="line"><span class="comment">#nan is the missing data</span></span><br><span class="line"><span class="comment">#1.98600000e+03 is actually 1.986 * 10 ^ 3</span></span><br><span class="line">world_alcohol</span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>, dtype=str, skip_header=<span class="number">1</span>)</span><br><span class="line">print(world_alcohol)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">    [['1986' 'Western Pacific' 'Viet Nam' 'Wine' '0']</span></span><br><span class="line"><span class="string">     ['1986' 'Americas' 'Uruguay' 'Other' '0.5']</span></span><br><span class="line"><span class="string">     ['1985' 'Africa' "Cte d'Ivoire" 'Wine' '1.62']</span></span><br><span class="line"><span class="string">     ..., </span></span><br><span class="line"><span class="string">     ['1987' 'Africa' 'Malawi' 'Other' '0.75']</span></span><br><span class="line"><span class="string">     ['1989' 'Americas' 'Bahamas' 'Wine' '1.5']</span></span><br><span class="line"><span class="string">     ['1985' 'Africa' 'Malawi' 'Spirits' '0.31']]</span></span><br><span class="line"><span class="string"> '''</span></span><br></pre></td></tr></table></figure><p>跟列表定位数据一样，array使用array[x,y]的方式获取某一个位置上的数据，代表着第x+1行数据，第y+1列数据</p><p>如果是一个一维的数据，获取方式同样参考列表切片的方式</p><p>如果是多维数据array，第一个参数为行定位，第二个代表列定位，行和列都能使用切片，中间用逗号分隔</p><p>print(matrix[:,1])就代表取所有行，第二列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">uruguay_other_1986 = world_alcohol[<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">third_country = world_alcohol[<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> (uruguay_other_1986)</span><br><span class="line"><span class="keyword">print</span> (third_country)</span><br><span class="line"><span class="comment">#out：</span></span><br><span class="line"><span class="comment">#0.5</span></span><br><span class="line"><span class="comment">#Cte d'Ivoire</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">print(vector[<span class="number">0</span>:<span class="number">3</span>])  </span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [ 5 10 15]</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[:,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [10 25 40]</span></span><br></pre></td></tr></table></figure><p>print(matrix[:,0:2])代表着取所有行数据，第1列和第2列的矩阵数据</p><p>print(matrix[1:3,0:2])代表取第2行到第3行的数据，第1列到第二列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[:,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [[ 5 10]</span></span><br><span class="line"><span class="comment">#    [20 25]</span></span><br><span class="line"><span class="comment">#    [35 40]]</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[<span class="number">1</span>:<span class="number">3</span>,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [[20 25]</span></span><br><span class="line"><span class="comment"># [35 40]]</span></span><br></pre></td></tr></table></figure><h3 id="Numpy代码学习（2）"><a href="#Numpy代码学习（2）" class="headerlink" title="Numpy代码学习（2）"></a>Numpy代码学习（2）</h3><p>如果直接用array == 某一个值，相当于每一个元素同右边值对比，如果值相等，python解释器返回true，否则返回false，类型为bool，整体为一个array</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment">#it will compare the second value to each element in the vector</span></span><br><span class="line"><span class="comment"># If the values are equal, the Python interpreter returns True; otherwise, it returns False</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">vector == <span class="number">5</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#array([ True, False, False, False], dtype=bool)</span></span><br><span class="line"></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">matrix == <span class="number">25</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    array([[False, False, False],</span></span><br><span class="line"><span class="comment">#       [False,  True, False],</span></span><br><span class="line"><span class="comment">#       [False, False, False]], dtype=bool)</span></span><br></pre></td></tr></table></figure><p>如果是一维数组，将数组和具体某一个数字的对比结果(true和false)作为参数，传回原数组，可以找出值为true的具体value</p><p>如果是多维数组，可以用同样的方法判断多维数组中某一列或者某一行的所有数据中，等于某一个值的的true和false判断，如果存在，返回True，不存在，返回False，将bool数组作为参数带入原矩阵，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Compares vector to the value 10, which generates a new Boolean vector [False, True, False, False]. It assigns this result to equal_to_ten</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten = (vector == <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> (equal_to_ten)</span><br><span class="line">print(vector[equal_to_ten])</span><br><span class="line"><span class="comment">#print(vector[False True False False])</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[False  True False False]</span></span><br><span class="line"><span class="comment">#[10]</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">             ])</span><br><span class="line">second_column_25 = (matrix[:,<span class="number">1</span>] == <span class="number">25</span>)</span><br><span class="line"><span class="keyword">print</span> (second_column_25)</span><br><span class="line">print(matrix[second_column_25, :])</span><br><span class="line"><span class="comment">#out：</span></span><br><span class="line"><span class="comment">#[False  True False]</span></span><br><span class="line"><span class="comment">#[[20 25 30]]</span></span><br></pre></td></tr></table></figure><p>还可以跟加入多种比较条件，且的公式为&amp;，获得公式为|，如果将bool数组作为入参带入并重新赋值，则将新值写入到bool数组为true的位置，变向的实现了替换的步骤，即将原有一维数组的某一个或者多个值统一替换为某一个值，如果是多维矩阵的话，注意bool数组的维度跟判断条件中的维度有关系即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#We can also perform comparisons with multiple conditions</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten_and_five = (vector == <span class="number">10</span>) &amp; (vector == <span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> (equal_to_ten_and_five)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[False False False False]</span></span><br><span class="line"></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten_or_five = (vector == <span class="number">10</span>) | (vector == <span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> (equal_to_ten_or_five)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [ True  True False False]</span></span><br><span class="line"></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten_or_five = (vector == <span class="number">10</span>) | (vector == <span class="number">5</span>)</span><br><span class="line">vector[equal_to_ten_or_five] = <span class="number">50</span></span><br><span class="line">print(vector)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[50 50 15 20]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">            [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">            [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">            [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">         ])</span><br><span class="line">second_column_25 = matrix[:,<span class="number">1</span>] == <span class="number">25</span></span><br><span class="line"><span class="keyword">print</span> (second_column_25)</span><br><span class="line">matrix[second_column_25, <span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> (matrix)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [False  True False]</span></span><br><span class="line"><span class="comment">#     [[ 5 10 15]</span></span><br><span class="line"><span class="comment">#     [20 10 30]</span></span><br><span class="line"><span class="comment">#     [35 40 45]]</span></span><br></pre></td></tr></table></figure><p>可以使用ndarray的astype方法来讲数据格式转换</p><p>可以使用ndarray的min方法来求出最小值</p><p>axis=1代表着行方向，axis=0代表着列方向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#We can convert the data type of an array with the ndarray.astype() method.</span></span><br><span class="line">vector = numpy.array([<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>])</span><br><span class="line"><span class="keyword">print</span> (vector.dtype)</span><br><span class="line"><span class="keyword">print</span> (vector)</span><br><span class="line">vector = vector.astype(float)</span><br><span class="line"><span class="keyword">print</span> (vector.dtype)</span><br><span class="line"><span class="keyword">print</span> (vector)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">        &lt;U1</span></span><br><span class="line"><span class="string">    ['1' '2' '3']</span></span><br><span class="line"><span class="string">    float64</span></span><br><span class="line"><span class="string">    [ 1.  2.  3.]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">vector.min()</span><br><span class="line"><span class="comment">#print (help(numpy.array))</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The axis dictates which dimension we perform the operation on</span></span><br><span class="line"><span class="comment">#1 means that we want to perform the operation on each row, and 0 means on each column</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">             ])</span><br><span class="line">matrix.sum(axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#matrix.sum(axis=0)</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#array([ 30,  75, 120])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">             ])</span><br><span class="line">matrix.sum(axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    array([60, 75, 90])</span></span><br></pre></td></tr></table></figure><p>numpy.isnan(world_alcohol[:,4]) 就相当于world_alcohol[:,4]==nan</p><p>求平均值可以使用array.mean（）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#replace nan value with 0</span></span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>,dtype=float)</span><br><span class="line"><span class="keyword">print</span> (world_alcohol)</span><br><span class="line">is_value_empty = numpy.isnan(world_alcohol[:,<span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> (is_value_empty)</span><br><span class="line">world_alcohol[is_value_empty, <span class="number">4</span>] = <span class="string">'0'</span></span><br><span class="line">alcohol_consumption = world_alcohol[:,<span class="number">4</span>]</span><br><span class="line">alcohol_consumption = alcohol_consumption.astype(float)</span><br><span class="line">total_alcohol = alcohol_consumption.sum()</span><br><span class="line">average_alcohol = alcohol_consumption.mean()</span><br><span class="line"><span class="keyword">print</span> (total_alcohol)</span><br><span class="line"><span class="keyword">print</span> (average_alcohol)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">[[             nan              nan              nan              nan</span></span><br><span class="line"><span class="string">               nan]</span></span><br><span class="line"><span class="string"> [  1.98600000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    0.00000000e+00]</span></span><br><span class="line"><span class="string"> [  1.98600000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    5.00000000e-01]</span></span><br><span class="line"><span class="string"> ..., </span></span><br><span class="line"><span class="string"> [  1.98700000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    7.50000000e-01]</span></span><br><span class="line"><span class="string"> [  1.98900000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    1.50000000e+00]</span></span><br><span class="line"><span class="string"> [  1.98500000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    3.10000000e-01]]</span></span><br><span class="line"><span class="string">[ True False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False  True False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string">  True False False False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False False False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True  True False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False  True False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False  True False False False False False False False False</span></span><br><span class="line"><span class="string">  True False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False False  True False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True False  True  True False False</span></span><br><span class="line"><span class="string"> False False False  True False False False False False  True False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False  True False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False False False False  True False False  True False False False False</span></span><br><span class="line"><span class="string"> False  True False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True  True False False False False</span></span><br><span class="line"><span class="string"> False  True False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string">  True False False False False False  True False False  True False False</span></span><br><span class="line"><span class="string">  True False False  True False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False  True False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False  True  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False  True False False False  True False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False  True False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False  True False False False False False False False False False</span></span><br><span class="line"><span class="string">  True  True False  True False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True  True False  True False False</span></span><br><span class="line"><span class="string">  True  True False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False  True False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False  True False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False]</span></span><br><span class="line"><span class="string">1137.78</span></span><br><span class="line"><span class="string">1.14006012024</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>bool 用一位存储的布尔类型（值为TRUE或FALSE）</li><li>inti 由所在平台决定其精度的整数（一般为int32或int64）</li><li>int8 整数，范围为128至127</li><li>int16 整数，范围为32 768至32 767</li><li>int32 整数，范围为231至231 1</li><li>int64 整数，范围为263至263 1</li><li>uint8 无符号整数，范围为0至255</li><li>uint16 无符号整数，范围为0至65 535</li><li>uint32 无符号整数，范围为0至2321</li><li>uint64 无符号整数，范围为0至2641</li><li>float16 半精度浮点数（16位）：其中用1位表示正负号，5位表示指数，10位表示尾数</li><li>float32 单精度浮点数（32位）：其中用1位表示正负号，8位表示指数，23位表示尾数</li><li>float64或float 双精度浮点数（64位）：其中用1位表示正负号，11位表示指数，52位表示尾数</li><li>complex64 复数，分别用两个32位浮点数表示实部和虚部</li><li>complex128或complex 复数，分别用两个64位浮点数表示实部和虚部</li></ol></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Numpy模块的学习(1-2)：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="mlearn" scheme="https://jingweiz300.github.io/categories/mlearn/"/>
    
    
      <category term="numpy" scheme="https://jingweiz300.github.io/tags/numpy/"/>
    
      <category term="模块使用" scheme="https://jingweiz300.github.io/tags/%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>生成zabbix图表，通过微信发送群聊</title>
    <link href="https://jingweiz300.github.io/2018/03/13/%E7%94%9F%E6%88%90zabbix%E5%9B%BE%E7%89%87%E5%B9%B6%E9%80%9A%E8%BF%87%E5%BE%AE%E4%BF%A1%E5%8F%91%E9%80%81/"/>
    <id>https://jingweiz300.github.io/2018/03/13/生成zabbix图片并通过微信发送/</id>
    <published>2018-03-13T15:35:37.000Z</published>
    <updated>2018-03-15T06:41:02.960Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 生成zabbix图表，通过微信发送群聊：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>生成zabbix图表，通过微信发送群聊，嘿嘿，实现了微信实时接收服务器的监控性能item<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>环境：python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.request, urllib.error, urllib.parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> itchat, time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZabbixAPI</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        cf = configparser.ConfigParser()</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">'config.ini'</span>):</span><br><span class="line">            cf.read(<span class="string">r'config.ini'</span>)</span><br><span class="line">            self.__url = cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"url"</span>)</span><br><span class="line">            self.__user= cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"user"</span>)</span><br><span class="line">            self.__password = cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"password"</span>)</span><br><span class="line">            self.__header = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json-rpc"</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'未读到文件config.ini'</span>)</span><br><span class="line">            exit()</span><br><span class="line">        self.__token_id = self.UserLogin()</span><br><span class="line">    <span class="comment">#登陆获取token</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">UserLogin</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"user.login"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"user"</span>: self.__user,</span><br><span class="line">                <span class="string">"password"</span>: self.__password</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> self.PostRequest(data)</span><br><span class="line">    <span class="comment">#推送请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostRequest</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        request = urllib.request.Request(self.__url,json.dumps(data).encode(<span class="string">'utf-8'</span>),self.__header)</span><br><span class="line">        result = urllib.request.urlopen(request)</span><br><span class="line">        response = json.loads(result.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># print response['result']</span></span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">'result'</span>]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> KeyError</span><br><span class="line">    <span class="comment">#主机列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostGet</span><span class="params">(self,hostid=None,hostip=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"host.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>:&#123;</span><br><span class="line">                <span class="string">"output"</span>:<span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"selectGroups"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"selectParentTemplates"</span>: [<span class="string">"templateid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectInterfaces"</span>: [<span class="string">"interfaceid"</span>,<span class="string">"ip"</span>],</span><br><span class="line">                <span class="string">"selectInventory"</span>: [<span class="string">"os"</span>],</span><br><span class="line">                <span class="string">"selectItems"</span>:[<span class="string">"itemid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectGraphs"</span>:[<span class="string">"graphid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectApplications"</span>:[<span class="string">"applicationid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectTriggers"</span>:[<span class="string">"triggerid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectScreens"</span>:[<span class="string">"screenid"</span>,<span class="string">"name"</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> hostid:</span><br><span class="line">            data[<span class="string">"params"</span>]=&#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#主机列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostCreate</span><span class="params">(self,hostname,hostip,groupid=None,templateid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"host.create"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"host"</span>: hostname,</span><br><span class="line">                <span class="string">"interfaces"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"main"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"useip"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"ip"</span>: hostip,</span><br><span class="line">                        <span class="string">"dns"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="string">"port"</span>: <span class="string">"10050"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"groups"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"groupid"</span>: groupid</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"templates"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"templateid"</span>: templateid</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#主机组列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostGroupGet</span><span class="params">(self,hostid=None,itemid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"hostgroup.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>:&#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#监控项列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ItemGet</span><span class="params">(self,hostid=None,itemid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"item.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#模板列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">TemplateGet</span><span class="params">(self, hostid=None,templateid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"template.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"templateids"</span>: templateid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#图像列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GraphGet</span><span class="params">(self,hostid=None,graphid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"graph.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"graphids"</span>: graphid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#历史数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">History</span><span class="params">(self,itemid,data_type)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"history.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"history"</span>: data_type,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"clock"</span>,</span><br><span class="line">                <span class="string">"sortorder"</span>: <span class="string">"DESC"</span>,</span><br><span class="line">                <span class="string">"limit"</span>: <span class="number">60</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> self.PostRequest(data)</span><br><span class="line"><span class="comment">#测试：python manager.py shell ; from ZABBIX.ZabbixAPI import * ; main()，代码修改了要ctrl+Z退出重进</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_graph</span><span class="params">(itemid,kind)</span>:</span></span><br><span class="line">    <span class="comment">#实例zabbixapi</span></span><br><span class="line">    zapi=ZabbixAPI()</span><br><span class="line">    token=zapi.UserLogin()</span><br><span class="line">    hosts=zapi.HostGet()</span><br><span class="line">    <span class="comment">#通过api获取历史数据，根据itemid号和类型,类型参考zabbix官网，测试中使用的zabbix3.0版本，https://www.zabbix.com/documentation/3.0/manual/api/reference/history/get</span></span><br><span class="line">    <span class="comment">#ParameterTypeDescription</span></span><br><span class="line">    <span class="comment">#historyintegerHistory object types to return. </span></span><br><span class="line">    <span class="comment">#Possible values: </span></span><br><span class="line">    <span class="comment">#0 - numeric float; </span></span><br><span class="line">    <span class="comment">#1 - character; </span></span><br><span class="line">    <span class="comment">#2 - log; </span></span><br><span class="line">    <span class="comment">#3 - numeric unsigned; </span></span><br><span class="line">    <span class="comment">#4 - text. </span></span><br><span class="line">    <span class="comment">#Default: 3.</span></span><br><span class="line">    host_hisdata=zapi.History(itemid,kind)</span><br><span class="line">    clock_list=[]</span><br><span class="line">    value_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> host_hisdata:</span><br><span class="line">        <span class="comment">#源数据存放</span></span><br><span class="line">        source_clock=i[<span class="string">'clock'</span>]</span><br><span class="line">        source_value=i[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">import</span> time </span><br><span class="line">        <span class="comment">#将时间戳转换为需要使用的正常日期格式</span></span><br><span class="line">        clock_array=time.localtime(int(source_clock))</span><br><span class="line">        clock_used=time.strftime(<span class="string">'%H:%M:%S'</span>,clock_array)</span><br><span class="line">        <span class="comment">#监控指标值转换为需要使用的正常格式；</span></span><br><span class="line">        value_used=int(source_value)/(<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">        <span class="comment">#分别添加到相应的列表中</span></span><br><span class="line">        clock_list.append(clock_used)</span><br><span class="line">        value_list.append(value_used)</span><br><span class="line">    <span class="comment">#定义字典存储获取到的时间和值域</span></span><br><span class="line">    data_dict=&#123;<span class="string">'clock'</span>:clock_list,<span class="string">'value'</span>:value_list&#125;</span><br><span class="line">    <span class="comment">#使用pandas的df数据框，通过字典转换并求转置  data=[n,2]，不能直接通过pd.DataFrame(data_dict['clock'],data_dict['value'])的方法初始化df数据框，会报错</span></span><br><span class="line">    data=pd.DataFrame.from_dict(data_dict,orient=<span class="string">'index'</span>).T    </span><br><span class="line">    <span class="comment">#将x，y值取出</span></span><br><span class="line">    x=range(len(data[<span class="string">'clock'</span>]))</span><br><span class="line">    y=data[<span class="string">'value'</span>]</span><br><span class="line">    <span class="comment">#画图</span></span><br><span class="line">    <span class="comment">#from matplotlib.font_manager import FontProperties</span></span><br><span class="line">    <span class="comment">#font = FontProperties(fname = "/usr/share/fonts/truetype/arphic/ukai.ttc", size=14) </span></span><br><span class="line">    <span class="comment">#plt.title(u"用户数量(Y)关于游戏消费金额(X)的分布图",fontproperties=font)</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">30</span>,<span class="number">15</span>))    </span><br><span class="line">    <span class="comment">#plt.subplot(221)</span></span><br><span class="line">    plt.plot(x,y,<span class="string">'ro-'</span>)</span><br><span class="line">    plt.title(<span class="string">'Memory'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'time'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Memory Avaliable/(M)'</span>)</span><br><span class="line">    plt.xticks(x, data[<span class="string">'clock'</span>],rotation=<span class="number">45</span>)</span><br><span class="line">    <span class="comment">#必须要先保存再show</span></span><br><span class="line">    plt.savefig(<span class="string">'result.jpg'</span>)</span><br><span class="line">    <span class="comment">#plt.show()</span></span><br><span class="line"><span class="comment">#发送微信</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_weixin</span><span class="params">(alart_img,chatroomName)</span>:</span></span><br><span class="line">    <span class="comment">#登录微信接口</span></span><br><span class="line">    itchat.auto_login(hotReload=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment">#查找微信中的指定群聊，入参为群聊名称</span></span><br><span class="line">    chatrooms=itchat.search_chatrooms(name=chatroomName)    </span><br><span class="line">    <span class="comment">#找到群聊的ID号码</span></span><br><span class="line">    chatroom_id=chatrooms[<span class="number">0</span>][<span class="string">'UserName'</span>]</span><br><span class="line">    <span class="comment">#向群聊中发送zabbix生成的图片</span></span><br><span class="line">    itchat.send_image(alart_img,chatroom_id)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    alart_img=<span class="string">'result.jpg'</span></span><br><span class="line">    chatroomName=<span class="string">u'♞魔都村民♛'</span></span><br><span class="line">    itemid=<span class="number">23316</span></span><br><span class="line">    kind=<span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment">#每隔5分钟取一次zabbix数据，画图</span></span><br><span class="line">        make_graph(itemid)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#发送微信群聊信息</span></span><br><span class="line">        send_weixin(alart_img,chatroomName)</span><br><span class="line">        <span class="comment">#循环等待</span></span><br><span class="line">        time.sleep(<span class="number">300</span>)</span><br></pre></td></tr></table></figure><p>忘记配置图了</p><p>config.ini文件和上边脚本放在同一级目录下，内容如下，IP换掉，zabbix的登录用户名如果没有改动的话就是图中所示，照抄即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[db]</span><br><span class="line">name = MY-DB</span><br><span class="line">host = 192.168.126.100</span><br><span class="line">port = 3306</span><br><span class="line">user = root</span><br><span class="line">pass = 123456</span><br><span class="line">[zabbix_server]</span><br><span class="line">url = http://192.168.1.110/zabbix/api_jsonrpc.php</span><br><span class="line">graphurl = http://192.168.1.110/zabbix/chart2.php</span><br><span class="line">itemurl = http://192.168.1.110/zabbix/chart.php</span><br><span class="line">header = &#123;&quot;Content-Type&quot;: &quot;application/json&quot;&#125;</span><br><span class="line">user = Admin</span><br><span class="line">password = zabbix</span><br></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 生成zabbix图表，通过微信发送群聊：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;生成zabbix图表，通过微信发送群聊，嘿嘿，实现了微信实时接收服务器的监控性能item&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://jingweiz300.github.io/categories/python/"/>
    
    
      <category term="微信" scheme="https://jingweiz300.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="zabbix" scheme="https://jingweiz300.github.io/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>dbfpy模块的使用案例-python2.7</title>
    <link href="https://jingweiz300.github.io/2017/09/10/dbfpy/"/>
    <id>https://jingweiz300.github.io/2017/09/10/dbfpy/</id>
    <published>2017-09-10T11:35:37.000Z</published>
    <updated>2018-03-15T06:41:04.541Z</updated>
    
    <content type="html"><![CDATA[<p><strong> dbfpy模块的使用案例-python2.7：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>前两天写的一段处理dbf文件的案例，用于删除类dbf文件内容，提供了一种新思路。<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>对于每日接收的dbf格式的文件(以.dbf后缀的文件)或者是每日接收的日期结尾的文件，例如XXXX.dbf或者XXXX.0310，</p><p>对于这种实质上dbf内容的文件，需要进行删除操作；</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>百度python能够直接使用的模块无果，比较之下dbfpy文件能够较好的处理dbf文件，dbfpy文件能够实现读取现有的dbf文件内容、字段名称、格式以及长度，以及新写一个新的文件，为了实现删除操作，换一种思路如下:</p><ol><li>读取所有的源文件数据</li><li>去除不要的数据，留下想要的数据，即删除操作</li><li>新建一个新文件，数据结构和字段、长度均为源文件结构</li><li>将第二步留下的数据写入到第三步中产生的新文件中</li></ol><p>好了，需求和分析完成，贴上代码</p><p>因为dbfpy模块是python27下的，因此以下代码实在python2.7下运行的</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> dbfpy <span class="keyword">import</span> dbf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h4 id="重建函数"><a href="#重建函数" class="headerlink" title="重建函数"></a>重建函数</h4><p>定义一个重建函数，将一个文件名称传入函数，例如将XXXXX.dbf作为入参传入函数；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rebulid_dbf</span><span class="params">(x)</span>:</span></span><br><span class="line">    sourcefile = dbf.Dbf(x, <span class="keyword">True</span>)</span><br><span class="line">    sourcefield_name=sourcefile.fieldNames</span><br><span class="line">    sourcefield=sourcefile.header.fields</span><br><span class="line">    ziduan=[]</span><br><span class="line">    leixing=[]</span><br><span class="line">    changdu=[]</span><br><span class="line">    jingdu=[]</span><br><span class="line">    <span class="comment">#n=0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sourcefield:</span><br><span class="line">        k = re.split(<span class="string">' +'</span>, str(i))</span><br><span class="line">        <span class="comment">#print k[1] ,len(k)</span></span><br><span class="line">        ziduan.append(k[<span class="number">0</span>])</span><br><span class="line">        leixing.append(k[<span class="number">1</span>])</span><br><span class="line">        changdu.append(k[<span class="number">2</span>])</span><br><span class="line">        jingdu.append(k[<span class="number">3</span>])</span><br><span class="line">    a = []</span><br><span class="line">    b = []</span><br><span class="line">    time=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="string">'op_ccbdjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf file</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_hyccjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf file</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_jsmxjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_zqjsjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_JSMX'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_JSMX'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_HYCC'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_HYCC'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_HYCB'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_HYCB'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br></pre></td></tr></table></figure><h4 id="预处理、中转函数"><a href="#预处理、中转函数" class="headerlink" title="预处理、中转函数"></a>预处理、中转函数</h4><p>此函数主要用于将原文件拷贝到指定的一个中转mid目录下进行操作，并将处理完的结果拷贝回原目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sett_file</span><span class="params">(x,insett_file,insett_path,location)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> location==<span class="string">'SH'</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> insett_file:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> x:</span><br><span class="line">                os.chdir(insett_path)</span><br><span class="line">                j_f=j+<span class="string">'.dbf'</span></span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">in</span> i <span class="keyword">and</span> i != j_f:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'-------------上海-------------------'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'1、今日存在%s文件，现在拷贝文件到mid.....'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\mid\%s\%s &gt;&gt; ..\mid\%s\copy_%s.log"</span> % (i,YYYYMMDD,i,YYYYMMDD,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'2、%s文件已拷贝至mid'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % j</span><br><span class="line">                    os.chdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">                    <span class="keyword">if</span> os.path.exists(j_f):</span><br><span class="line">                        os.system(<span class="string">"del %s"</span> % j_f)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy ..\..\%s\%s .\%s &gt;&gt; copy_%s.log"</span> % (YYYYMMDD,i,j_f,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'3、mid中文件已拷贝为%s格式供使用'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) %j_f</span><br><span class="line">                    rebulid_dbf(j_f)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'4、mid中文件已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\..\%s\%s  /y &gt;&gt; copy_%s.log"</span> % (<span class="string">'MID_FILE_'</span>+j_f,YYYYMMDD,i,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'5、清算目录下的文件%s已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">    <span class="keyword">elif</span> location==<span class="string">'SZ'</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> insett_file:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> x:</span><br><span class="line">                os.chdir(insett_path)</span><br><span class="line">                j_f_big = j+MMDD+<span class="string">'.DBF'</span></span><br><span class="line">                j_f_small= j+MMDD+<span class="string">'.dbf'</span></span><br><span class="line">                <span class="comment">#print j_f,i</span></span><br><span class="line">                <span class="keyword">if</span> i == j_f_big <span class="keyword">or</span> i == j_f_small:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'-------------深圳-------------------'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'1、今日存在%s文件，现在拷贝文件到mid.....'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\mid\%s\%s &gt;&gt; ..\mid\%s\copy_%s.log"</span> % (i,YYYYMMDD,i,YYYYMMDD,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'2、%s文件已拷贝至mid'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % j</span><br><span class="line">                    os.chdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">                    rebulid_dbf(j_f_big)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'3、mid中文件已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\..\%s\%s  /y &gt;&gt; copy_%s.log"</span> % (<span class="string">'MID_FILE_'</span>+j_f_big,YYYYMMDD,i,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'4、清算目录下的文件%s已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br></pre></td></tr></table></figure><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><p>作为主函数入口，定义时间、路径、要修改的文件名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    YYYYMMDD = time.strftime(<span class="string">'%Y%m%d'</span>, time.localtime())</span><br><span class="line">    MMDD = time.strftime(<span class="string">'%m%d'</span>, time.localtime())</span><br><span class="line">    insett_path = <span class="string">r'D:\abc\abc\%s'</span> % YYYYMMDD</span><br><span class="line">    os.chdir(insett_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'..\mid\%s'</span> % YYYYMMDD):</span><br><span class="line">        os.mkdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">    insett_file = os.listdir(insett_path)</span><br><span class="line">    shzd_targit_file=[<span class="string">'op_ccbdjsq1l'</span>,<span class="string">'op_hyccjsq1l'</span>,<span class="string">'op_jsmxjsq1l'</span>,<span class="string">'op_zqjsjsq1l'</span>]</span><br><span class="line">    sett_file(shzd_targit_file,insett_file,insett_path,<span class="string">'SH'</span>)</span><br><span class="line">    szzd_targit_file=[<span class="string">'SQ_HYCB'</span>,<span class="string">'SQ_HYCC'</span>,<span class="string">'SQ_JSMX'</span>]</span><br><span class="line">    sett_file(szzd_targit_file, insett_file, insett_path, <span class="string">'SZ'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'任务执行成功，如果有问题，请查看中转目录下的日志文件。'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'中转目录为：%s'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % insett_path+<span class="string">'\mid'</span></span><br><span class="line">    input()</span><br></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; dbfpy模块的使用案例-python2.7：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;前两天写的一段处理dbf文件的案例，用于删除类dbf文件内容，提供了一种新思路。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://jingweiz300.github.io/categories/python/"/>
    
    
      <category term="模块使用" scheme="https://jingweiz300.github.io/tags/%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
</feed>

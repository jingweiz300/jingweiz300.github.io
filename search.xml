<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>zabbix监控MSSQL</title>
      <link href="/2018/06/13/zabbix%E7%9B%91%E6%8E%A7MSSQL/"/>
      <content type="html"><![CDATA[<p><strong> zabbix监控MSSQL：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>1.思路整理</p><p>1、在zabbix server上安装Freetds、unixODBC、unixODBC-devel使其能够访问SQL Server数据库。</p><p>2、配置ODBC访问Sql Server数据库。</p><p>3、定制SQL语句</p><p>4、在zabbix管理界面添加监控数据库的item。</p><p>2.操作过程</p><p>1、在zabbix server上安装Freetds、unixODBC、unixODBC-devel</p><p>#yuminstall unixODBC unixODBC-devel</p><p>​    注：freetds通常yum源里面没有，需要下载编译安装</p><p> #wget <a href="http://ibiblio.org/pub/Linux/ALPHA/freetds/stable/freetds-stable.tgz" target="_blank" rel="noopener">http://ibiblio.org/pub/Linux/ALPHA/freetds/stable/freetds-stable.tgz</a></p><p> tar -zxvf freetds-stable.tgz </p><p>  #cdfreetds-0.91/</p><p> #./configure –prefix=/usr/local/freetds –with-tdsver=8.0 –enable-msdblib</p><p>   #make</p><p>   #makeinstall</p><p>2、配置ODBC访问Sql Server数据库</p><p>a.查找libtdsodbc.so.0驱动的位置</p><p>#locate libtdsodbc.so.0</p><p>如果没有locate命令，安装mlocate执行</p><p>#yuminstall mlocate &amp;&amp; updatedb</p><p>找到libtdsodbc.so.0文件后复制其路径做个软连接</p><p>#ln -s/usr/local/freetds/lib/libtdsodbc.so.0 /usr/lib64/libtdsodbc.so.0</p><p>b.修改/etc/odbcinst.ini添加一行</p><p>#vim/etc/odbcinst.ini</p><p>[FreeTDS]</p><p>Driver =/usr/lib64/libtdsodbc.so.0</p><p>c.配置odbc连接信息</p><p>#vim/etc/odbc.ini #写入以下配置文件</p><p>[DBNAME]             #定义一个标识</p><p>Driver = FreeTDS</p><p>Server = [SQL Server IP]</p><p>PORT = 1433</p><p>TDS_Version = 8.0</p><p>#isql-v DBNAME（odbc.ini中定义的） 数据库账号数据库密码</p><p>d.连接数据库测试</p><p>连接到数据库并执行SQL测试</p><p><img src="file:///C:\Users\jingw\AppData\Local\Temp\msohtmlclip1\01\clip_image001.png" alt="image.png"></p><p>3、定制SQL语句因需求而异。</p><p>4、在zabbix管理界面添加监控数据库的item。</p><p>找到被监控的SQL Server主句，添加item  </p><p><img src="file:///C:\Users\jingw\AppData\Local\Temp\msohtmlclip1\01\clip_image001.png" alt="image.png"></p><p>zabbix采集到的数据。与上面SQL查询到的一致。</p><p>方法二 </p><ol><li>到官方下载模版</li></ol><p>下载地址：<a href="https://share.zabbix.com/databases/microsoft-sql-server/template-ms-sql-2012" target="_blank" rel="noopener">https://share.zabbix.com/databases/microsoft-sql-server/template-ms-sql-2012</a></p><ol><li>修改agentd.conf</li></ol><p>修改zabbix_agent.conf文件</p><p>添加下边这行到配置文件最后</p><p>UserParameter=sqldatabasename.discovery,powershell-NoProfile -ExecutionPolicy Bypass -FileC:\zabbix\scripts\SQLBaseName_To_Zabbix.ps1</p><p>将powershell脚本放在目录下</p><p>将SQLBaseName_To_Zabbix.ps1脚本放在C:\zabbix\scripts\目录下</p><ol><li><p>.重启agentd</p></li><li><p>导入模板文件</p></li></ol><p>导入模板MS SQL 2012.xml</p><p><img src="file:///C:\Users\jingw\AppData\Local\Temp\msohtmlclip1\01\clip_image002.png" alt="image.png"></p><p><img src="file:///C:\Users\jingw\AppData\Local\Temp\msohtmlclip1\01\clip_image002.png" alt="image.png"></p><p>5.主机应用模版</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机编码</title>
      <link href="/2018/05/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/"/>
      <content type="html"><![CDATA[<p><strong> 计算机编码：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>本文转载：<a href="http://python.jobbole.com/87145/" target="_blank" rel="noopener">http://python.jobbole.com/87145/</a></p><p>在人机交互之字符编码 一文中对字符编码进行了详细的讨论，并通过一些简单的小程序验证了我们对于字符编码的认识。但仅了解这篇文章的内容，并不能帮我们在日常编程中躲过一些字符编码相关的坑，Stackoverflow 上就有大量编码相关的问题，比如 <a href="http://stackoverflow.com/questions/9942594/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa0-in-position-20" target="_blank" rel="noopener">1</a>，<a href="http://python.jobbole.com/87145/Convert%20Unicode%20to%20ASCII%20without%20errors" target="_blank" rel="noopener">2</a>，<a href="http://stackoverflow.com/questions/2688020/how-to-print-chinese-word-in-my-code-using-python" target="_blank" rel="noopener">3</a>。</p><p><img src="http://xuelangzf-github.qiniudn.com/20161228_encode_decode_1.png" alt="图1. 错误的编解码"></p><p>本文首先尝试对编码、解码进行一个<strong>宏观、直观</strong>的解读，然后详细来解释 python2 中的str和unicode，并对常见的UnicodeEncodeError 和 UnicodeDecodeError 异常进行剖析。</p><h1 id="如何理解编、解码？"><a href="#如何理解编、解码？" class="headerlink" title="如何理解编、解码？"></a>如何理解编、解码？</h1><p>如何去理解编码、解码？举个例子，Alice同学刚加入了机器学习这门课，想给同班的Bob同学打个招呼。但是作为人，Alice不能通过意念和Bob交流，必须通过某种方式，比如手语、声音、文字等来表达自己的想法。如果Alice选择用文字，那么他可能会写下这么一段文字：<code>My name is： boot …… 来学机器学习喽</code>，写文字这个过程其实就是<strong>编码</strong>，经过编码后的文字才能给Bob看。Bob收到Alice的文字后，就会用自己对文字的认知来解读Alice传达的含义，这个过程其实就是<strong>解码</strong>。当然，如果Bob不懂中文，那么就无法理解Alice的最后一句了，如果Bob不识字，就完全不知道Alice想表达什么了。</p><p>上面的例子只是为了方便我们理解编码、解码这个抽象的概念，现在来看看对于计算机程序来说，如何去理解字符的编码、解码过程。我们知道绝大多数程序都是读取数据，做一些操作，然后输出数据。比如当我们打开一个文本文件时，就会从硬盘读取文件中的数据，接着我们输入了新的数据，点击保存后，文本程序会将更新后的内容输出到硬盘。程序读取数据就相当于Bob读文字，必须进行一个解码的过程，解码后的数据才能让我们进行各种操作。同理，保存到硬盘时，也需要对数据进行编码。</p><p>下图方框 A 代表一个输出数据的程序，方框 B 代表一个读取数据的程序。当然这里的程序只是一个概念，表示一个处理数据的逻辑单元，可以是一个进程、一个函数甚至一个语句等。A 和 B 也可以是同一个程序，先解码外部获取的数据，内部操作后，再进行某种编码。</p><p><img src="http://xuelangzf-github.qiniudn.com/20161228_encode_decode_2.png" alt="图2. 编码、解码的过程"></p><p>值得注意的是，有的编码方案不一定能表示某些信息，这时编码就会失败，比如 ASCII 就不能用来表示中文。当然，如果以错误的方式去解读某段内容，解码也会失败，比如用 ASCII 来解读包含 UTF-8的信息。至于什么是 ASCII，UTF-8等，在<a href="http://selfboot.cn/2014/08/28/character_encoding/" target="_blank" rel="noopener">人机交互之字符编码</a> 中有详细的说明，这里不再赘述。下面结合具体的例子，来看看编码、解码的细节问题。</p><h1 id="python2-x-中的字符串"><a href="#python2-x-中的字符串" class="headerlink" title="python2.x 中的字符串"></a>python2.x 中的字符串</h1><p>在程序设计中，字符串一般是指一连串的<a href="https://docs.python.org/2/howto/unicode.html#definitions" target="_blank" rel="noopener">字符</a>，比如<code>hello world!</code>、<code>你好</code>或者<code>もしもし</code>（日语）等等。各种语言对于字符串的支持各不相同，Python 2 中字符串的设计颇不合理，导致新手经常会出现各种问题，类似下面的提示信息相信很多人都遇到过（<code>UnicodeEncodeError</code> 或者 <code>UnicodeDecodeError</code>）：</p><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>下面我们一起来解决这个疑难杂症。首先需要搞清楚python中的两个类型：<code>&lt;type &#39;str&#39;&gt;</code>和 <code>&lt;type &#39;unicode&#39;&gt;</code>，<a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" target="_blank" rel="noopener">文档</a>中关于这两个类型的说明其实挺含糊的：</p><blockquote><p>There are seven sequence types: strings, Unicode strings, lists, …</p><p>String literals are written in single or double quotes: ‘xyzzy’, “frobozz”. Unicode strings are much like strings, but are specified in the syntax using a preceding ‘u’ character: u’abc’, u”def”.</p></blockquote><p>上面并没有给出什么有用的信息，不过好在<a href="https://www.azavea.com/blog/2014/03/24/solving-unicode-problems-in-python-2-7/" target="_blank" rel="noopener">这篇文章</a>讲的特别好，简单来说：</p><ul><li>str：是<code>字节串（container for bytes）</code>，由 Unicode 经过编码(encode)后的字节组成的。</li><li>unicode：真正意义上的<code>字符串</code>，其中的每个字符用 Unicode 中对应的 <a href="https://en.wikipedia.org/wiki/Code_point" target="_blank" rel="noopener">Code Point</a> 表示。翻译成<strong>人话</strong>就是，unicode 有点类似于前面 Alice 打招呼传递的想法，而 str 则是写下来的文字（或者是说出来的声音，甚至可以是手语）。我们可以用 GBK，UTF-8 等编码方案将 Unicode 类型转换为 str 类型，类似于用语言、文字或者手语来表达想法。</li></ul><h2 id="repr-与终端交互"><a href="#repr-与终端交互" class="headerlink" title="repr 与终端交互"></a>repr 与终端交互</h2><p>  为了彻底理解字符编码、解码，下面要用 python 交互界面进行一些小实验来加深我们的理解（下面所有的交互代码均在 Linux 平台下）。在这之前，我们先来看下面交互代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo = <span class="string">'Test 试试'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo</span><br><span class="line"><span class="string">'Test \xe8\xaf\x95\xe8\xaf\x95'</span></span><br></pre></td></tr></table></figure><p>当我们只输入标识符 demo 时，终端返回了 demo 的内容。这里返回的内容是怎么得到呢？答案是通过 <a href="https://docs.python.org/2/library/functions.html#repr" target="_blank" rel="noopener">repr() 函数</a> 获得。文档中对于 repr 函数解释如下：</p><p>  > Return a string containing a printable representation of an object.</p><p>  所以，我们可以在源文件中用下面的代码，来获取和上面终端一样的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">demo = <span class="string">'Test 试试'</span></span><br><span class="line"><span class="keyword">print</span> repr(demo)</span><br><span class="line"><span class="comment"># 'Test \xe8\xaf\x95\xe8\xaf\x95'</span></span><br></pre></td></tr></table></figure><p>对于字符串来说，<code>repr()</code> 的返回值很好地说明了其在python内部的表示方式。通过 repr 的返回值，我们可以真切体会到前面提到的两点：</p><ul><li><p><strong>str：实际上是字节串</strong></p></li><li><p>unicode：真正意义上的字符串</p><p>下面分别来看看这两个类型。</p><p>​</p><h2 id="unicode-类型"><a href="#unicode-类型" class="headerlink" title="unicode 类型"></a>unicode 类型</h2><p><strong>unicode 是真正意义上的字符串</strong>，为了理解这句话，先看下面的一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>unicode_str = u’Welcome to 广州’ # ‘’前面的 u 表示这是一个 unicode 字符串</p><blockquote><p>unicode_str, type(unicode_str) # repr(unicode_str)<br>   Welcome to \u5e7f\u5dde’, <type 'unicode'="">)<br>1<br>2<br>3<br>unicode_str = u’Welcome to 广州’ # ‘’前面的 u 表示这是一个 unicode 字符串<br>unicode_str, type(unicode_str) # repr(unicode_str)<br>   Welcome to \u5e7f\u5dde’, <type 'unicode'="">)</type></type></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote></blockquote><p>repr 返回的 <code>Welcome to \u5e7f\u5dde</code> 说明了unicode_str存储的内容，其中两个<code>\u</code>后面的数字分别对应了<code>广、州</code>在unicode中的code point：</p></li><li><p><code>5e7f</code> 对应<code>广</code>字；</p></li><li><p>5dde</p></li></ul><p>  对应州字；英文字母也有对应的code point，它的值等于ASCII值，不过repr并没有直接输出。我们可以在</p><p>  站长工具中查看所有字符对应的code point。也可以用 python 的内置函数ord查看字符的 code point，如下所示（调用了 format 将code point转换为十六进制）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:04x&#125;'</span>.format(ord(<span class="string">u'广'</span>))</span><br><span class="line"><span class="string">'5e7f'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:04x&#125;'</span>.format(ord(<span class="string">u'W'</span>))</span><br><span class="line"><span class="string">'0057'</span></span><br></pre></td></tr></table></figure><p>  总结一下，我们可以将 <code>&amp;amp;lt;type &#39;unicode&#39;&amp;amp;gt;</code> 看作是<strong>一系列字符组成的数组</strong>，数组的每一项是一个code point，用来表示相应位置的字符。所以对于 unicode 来说，其长度等于它包含的字符（<code>a</code> 和 <code>广</code> 都是一个字符）的数目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(unicode_str)</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unicode_str[<span class="number">0</span>], unicode_str[<span class="number">12</span>], unicode_str[<span class="number">-1</span>]</span><br><span class="line">(<span class="string">u'W'</span>, <span class="string">u'\u5dde'</span>, <span class="string">u'\u5dde'</span>)</span><br></pre></td></tr></table></figure><h2 id="str-类型"><a href="#str-类型" class="headerlink" title="str 类型"></a>str 类型</h2><p>  <strong>str 是字节串（container for bytes）</strong>，为了理解这句话，先来看下面的一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_str = <span class="string">'Welcome to 广州'</span> <span class="comment"># 这是一个 str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_str, type(str_str)</span><br><span class="line">(<span class="string">'Welcome to \xe5\xb9\xbf\xe5\xb7\x9e'</span>, &lt;type <span class="string">'str'</span>&gt;)</span><br></pre></td></tr></table></figure><p>  python中 <code>\xhh</code>（h为16进制数字）表示一个字节，输出中的<code>\xe5\xb9\xbf\xe5\xb7\x9e</code> 就是所谓的字节串，它对应了<code>广州</code>。实际上 str_str 中的英文字母也是保存为字节串的，不过 repr 并没有以 <code>\x</code> 的形式返回。为了验证上面输出内容确实是<strong>字节串</strong>，我们用python提供的 <a href="https://docs.python.org/2.7/library/functions.html#bytearray" target="_blank" rel="noopener">bytearray 函数</a>将相同内容的 unicode字符串用 UTF-8 编码为字节数组，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>unicode_str = <span class="string">u'Welcome to 广州'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytearray(unicode_str, <span class="string">'UTF-8'</span>)</span><br><span class="line">bytearray(<span class="string">b'Welcome to \xe5\xb9\xbf\xe5\xb7\x9e'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(bytearray(unicode_str, <span class="string">'UTF-8'</span>)) </span><br><span class="line"><span class="comment"># 字节数组，每一项为一个字节；</span></span><br><span class="line">[<span class="number">87</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">229</span>, <span class="number">185</span>, <span class="number">191</span>, <span class="number">229</span>, <span class="number">183</span>, <span class="number">158</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">r"\x"</span> + <span class="string">r"\x"</span>.join([<span class="string">"%02x"</span> % c <span class="keyword">for</span> c <span class="keyword">in</span> list(bytearray(unicode_str, <span class="string">'UTF-8'</span>))])</span><br><span class="line"><span class="comment"># 转换为 \xhh 的形式</span></span><br><span class="line">\x57\x65\x6c\x63\x6f\x6d\x65\x20\x74\x6f\x20\xe5\xb9\xbf\xe5\xb7\x9e</span><br></pre></td></tr></table></figure><p>可见，上面的 str<em>str 是 unicode_str 经过 UTF-8 编码 后的字节串。这里透漏了一个十分重要的信息，**str类型隐含有某种编码方式**，正是这种隐式编码（_implicit encoding</em>）的存在导致了许多问题的出现（后面详细说明）。值得注意的是，str类型字节串的隐式编码不一定都是’UTF-8’，前面示例程序都是在 OS X 平台下的终端，所以隐式编码是 UTF-8。对于 Windows 而言，如果语言设置为简体中文，那么交互界面输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Win 平台下，系统语言为简体中文</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_str = <span class="string">'Welcome to 广州'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_str, type(str_str)</span><br><span class="line">(<span class="string">'Welcome to \xb9\xe3\xd6\xdd'</span>, &lt;type <span class="string">'str'</span>&gt;)</span><br></pre></td></tr></table></figure><p>这里str_str的隐式编码是<strong>cp936</strong>，可以用 <code>bytearray(unicode_str, &#39;cp936&#39;)</code> 来验证这点。终端下，str类型的隐式编码由系统 locale 决定，可以采用下面方式查看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Unix or Linux</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> locale</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>locale.getdefaultlocale() </span><br><span class="line">(<span class="string">'zh_CN'</span>, <span class="string">'UTF-8'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 简体中文 Windows</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>locale.getdefaultlocale() </span><br><span class="line">(<span class="string">'zh_CN'</span>, <span class="string">'cp936'</span>)</span><br></pre></td></tr></table></figure><p>总结一下，我们可以将 <code>&amp;amp;lt;type &#39;str&#39;&amp;amp;gt;</code> 看作是<strong>unicode字符串经过某种编码后的字节组成的数组</strong>。数组的每一项是一个字节，用 <code>\xhh</code> 来表示。所以对于 str 字符串来说，其长度等于编码后字节的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(str_str)</span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_str[<span class="number">0</span>], str_str[<span class="number">-1</span>]</span><br><span class="line">(<span class="string">'W'</span>, <span class="string">'\x9e'</span>) <span class="comment"># 实际上是('\x57', '\x9e')</span></span><br></pre></td></tr></table></figure><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>  Python 2.x 中为上面两种类型的字符串都提供了 <a href="https://docs.python.org/2/library/stdtypes.html#string-methods" target="_blank" rel="noopener">encode 和 decode</a> 方法，原型如下：</p><p>  > str.decode([encoding[, errors]]) &gt; str.encode([encoding[, errors]])</p><p>  利用上面的两个函数，可以实现 str 和 unicode 类型之间的相互转换，如下图所示：</p><p>  <img src="http://xuelangzf-github.qiniudn.com/20161228_encode_decode_3.png" alt="图3. 类型间相互转换"></p><p>  上图中绿色线段标示的即为我们常用的转换方法，红色标示的转换在 python 2.x 中是合法的，不过没有什么意义，通常会抛出错误（可以参见 <a href="http://stackoverflow.com/questions/447107/what-is-the-difference-between-encode-decode" target="_blank" rel="noopener">What is the difference between encode/decode?</a>）。下面是两种类型之间的转换示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decode： &lt;type 'str'&gt; 到 &lt;type 'unicode'&gt;的转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = str_str.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc, type(enc)</span><br><span class="line">(<span class="string">u'Welcome to \u5e7f\u5dde'</span>, &lt;type <span class="string">'unicode'</span>&gt;)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># encode： &lt;type 'unicode'&gt; 到 &lt;type 'str'&gt; 的转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec = unicode_str.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec, type(dec)</span><br><span class="line">(<span class="string">'Welcome to \xe5\xb9\xbf\xe5\xb7\x9e'</span>, &lt;type <span class="string">'str'</span>&gt;)</span><br></pre></td></tr></table></figure><p>  上面代码中通过encode将unicode类型<strong>编码</strong>为str类型，通过 decode 将str类型<strong>解码</strong>为unicode类型。当然，编码、解码的过程并不总是一帆风顺的，通常会出现各种错误。</p><h2 id="编、解码错误"><a href="#编、解码错误" class="headerlink" title="编、解码错误"></a>编、解码错误</h2><p>  Python 中经常会遇到 UnicodeEncodeError 和 UnicodeDecodeError，怎么产生的呢？ 如下代码所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'Hello 广州'</span>.encode(<span class="string">'ascii'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 6-7: ordinal not in range(128)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&gt;&gt;&gt; '</span>Hello 广州<span class="string">'.decode('</span>ascii<span class="string">')</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string"> File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">UnicodeDecodeError: '</span>ascii<span class="string">' codec can'</span>t decode byte <span class="number">0xe5</span> <span class="keyword">in</span> position <span class="number">6</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> range(<span class="number">128</span>)</span><br></pre></td></tr></table></figure><p>  当我们用 ascii 去编码带有中文的unicode字符串时，发生了UnicodeEncodeError，当我们用 ascii 去解码有中文的str字节串时，发生了UnicodeDecodeError。我们知道，ascii 只包含 127 个字符，根本无法表示中文。所以，让 ascii 来编码、解码中文，就超出了其能力范围。这就像你对一个不懂中文的老外说中文，他根本没法听懂。简单来说，<strong>所有的编码、解码错误都是由于所选的编码、解码方式无法表示某些字符造成的</strong>。</p><p>  有时候我们就是想用 ascii 去编码一段夹杂中文的str字节串，并不希望抛出异常。那么可以通过 errors 参数来指定当无法编码某个字符时的处理方式，常用的处理方式有 “strict”，”ignore”和”replace”。改动后的程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'Hello 广州'</span>.encode(<span class="string">'ascii'</span>, <span class="string">'replace'</span>)</span><br><span class="line"><span class="string">'Hello ??'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'Hello 广州'</span>.encode(<span class="string">'ascii'</span>, <span class="string">'ignore'</span>)</span><br><span class="line"><span class="string">'Hello</span></span><br></pre></td></tr></table></figure><h2 id="隐藏的解码"><a href="#隐藏的解码" class="headerlink" title="隐藏的解码"></a>隐藏的解码</h2><p>  str和unicode类型都可以用来表示字符串，为了方便它们之间进行操作，python并不要求在操作之前统一类型，所以下面的代码是合法的，并且能得到正确的输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_str = <span class="string">u'Welcome to '</span> + <span class="string">'GuangZhou'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_str, type(new_str)</span><br><span class="line">(<span class="string">u'Welcome to GuangZhou'</span>, &lt;type <span class="string">'unicode'</span>&gt;)</span><br></pre></td></tr></table></figure><p>  因为str类型是隐含有某种编码方式的字节码，所以python内部将其<strong>解码</strong>为unicode后，再和unicode类型进行 <code>+ 操作</code>，最后返回的结果也是unicode类型。</p><p>  第2步的解码过程是在幕后悄悄发生的，<strong>默认采用ascii来进行解码</strong>，可以通过 <code>sys.getdefaultencoding()</code> 来获取默认编码方式。Python 之所以采用 ascii，是因为 ascii 是最早的编码方式，是许多编码方式的子集。</p><p>  不过正是这个不可见的解码过程，有时候会导致出乎意料的解码错误，考虑下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'Welcome to'</span> + <span class="string">'广州'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xe5 in position 0: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>  上面在字符串的+操作时，python 偷偷对’广州’用 ascii 做解码操作，所以抛出了UnicodeDecodeError异常。其实上面操作等同于 <code>u&#39;Welcome to&#39; + &#39;广州&#39;.decode(&#39;ascii&#39;)</code> ，你会发现这句代码抛出的异常和上面的一模一样。</p><h2 id="隐藏的编码"><a href="#隐藏的编码" class="headerlink" title="隐藏的编码"></a>隐藏的编码</h2><p>  Python 不只偷偷地用 ascii 来解码str类型的字节串，有时还会偷偷用ascii来编码unicode类型。如果函数或类等对象接收的是 str 类型的字符串，但传进去的是unicode，python2 就会使用 ascii 将其编码成str类型再做运算。</p><p>  以raw_input为例，我们可以给 <a href="https://docs.python.org/2/library/functions.html#raw_input" target="_blank" rel="noopener">raw_input</a> 函数提供 prompt 参数，作为输入提示内容。这里如果 prompt 是 unicode 类型，python会先用ascii对其进行编码，所以下面代码会抛出UnicodeEncodeError异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = raw_input(<span class="string">u'请输入内容: '</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-4: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>  上面操作完全等同于 <code>a = raw_input(u&#39;请输入内容: &#39;.encode(&#39;ascii&#39;))</code>，你会发现它们抛出的异常完全一样。此外，如果尝试将unicode字符串重定向输出到文本中，也可能会抛出UnicodeEncodeError异常。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat a.py</span><br><span class="line">demo = u'Test 试试'</span><br><span class="line">print demo</span><br><span class="line"><span class="meta">$</span> python a.py &gt; output</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File "a.py", line 5, in &lt;module&gt;</span><br><span class="line"> print demo</span><br><span class="line">UnicodeEncodeError: 'ascii' codec can't encode characters in position 5-6: ordinal not in range(128)</span><br></pre></td></tr></table></figure><p>当然，如果直接在终端进行输出，则不会抛出异常。因为python会使用控制台的默认编码，而不是 ascii。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结下本文的内容：</p><ul><li>str可以看作是unicode字符串经过某种编码后的字节组成的数组</li><li>unicode是真正意义上的字符串</li><li>通过 encode 可以将unicode类型<strong>编码</strong>为str类型</li><li>通过 decode 可以将str类型<strong>解码</strong>为unicode类型</li><li>python 会隐式地进行编码、解码，默认采用 ascii</li><li>所有的编码、解码错误都是由于所选的编码、解码方式无法表示某些字符造成的</li></ul><p>如果你明白了上面每句话的含义，那么应该能解决大部分编、解码引起的问题了。当然，本篇文章其实并不能帮你完全避免python编码中的坑（坑太多）。还有许多问题在这里并没有说明：</p><ul><li>读取、写入文件时的编码问题：</li><li>数据库的读写</li><li>网络数据操作</li><li>源文件编码格式的指定</li></ul></the>]]></content>
      
      <categories>
          
          <category> feeling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多线程的一点思考</title>
      <link href="/2018/05/10/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
      <content type="html"><![CDATA[<p><strong> 多线程的一点思考：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>threading的run内容必须加lock，不然对于同样的操作，比如打印print a,self.name；在同一个时间点上，多个线程会打印出很长一句莫名其妙的拼接；可自行测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,id,name)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.id=id</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        a=[]</span><br><span class="line">        <span class="comment">#a.append('data')</span></span><br><span class="line">        <span class="comment">#print a,self.name</span></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-----------'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'bedig time:'</span>,datetime.datetime.now()</span><br><span class="line">        b = []</span><br><span class="line">        <span class="comment">#print b,id(b),self.name</span></span><br><span class="line">        b.append(<span class="string">'data'</span>)</span><br><span class="line">        <span class="keyword">print</span> b,self.name,id(b)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'end time:'</span>,datetime.datetime.now()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-----------'</span></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#print a,id(a)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    thread_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">        id=i</span><br><span class="line">        name=<span class="string">'Thread_%s'</span> % i</span><br><span class="line">        Thread=myThread(id,name)</span><br><span class="line">        thread_list.append(Thread)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> thread_list:</span><br><span class="line">        i.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> thread_list:</span><br><span class="line">        i.join()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-----------'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'bedig time:'</span>, datetime.datetime.now()</span><br><span class="line">        b = []</span><br><span class="line">        <span class="comment"># print b,id(b),self.name</span></span><br><span class="line">        b.append(<span class="string">'data'</span>)</span><br><span class="line">        <span class="keyword">print</span> b, id(b)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'end time:'</span>, datetime.datetime.now()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-----------'</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock=threading.Lock()</span><br><span class="line">    begin_time=datetime.datetime.now()</span><br><span class="line">    main()</span><br><span class="line">    end_time=datetime.datetime.now()</span><br><span class="line">    used_time=end_time - begin_time</span><br><span class="line">    <span class="keyword">print</span> used_time</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
            <tag> threading </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pandas操作excel</title>
      <link href="/2018/04/25/pandas%E6%93%8D%E4%BD%9Cexcel/"/>
      <content type="html"><![CDATA[<p><strong> pandas操作excel：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>无聊帮同事解决一个小需求</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="记录一："><a href="#记录一：" class="headerlink" title="记录一："></a>记录一：</h3><p>当天收到同事一个小需求，将一份excel文件里边的数据，批量生成数据库的插入语句，原始数据为第一行为列名，第一行之后的行数据为values值，即要插入的数据，要生成的表明为excel表单名称；</p><p>table-name2的内容如图一</p><p><img src="/2018/04/25/pandas操作excel/1.png" alt="图一"></p><p>标签名称如图二</p><p><img src="/2018/04/25/pandas操作excel/2.png" alt="图二"></p><p>要将上边的数据生成insert into table-name (columns-1,columns-2,columns-3,columns-4)  values(‘values-1’,’values-2’,’values-3’,’values-4’)的文本文件</p><p>掐指一算，可以利用pandas来实现，因为在学习ai，就不用xlwt模块了，下面贴上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#自行修改要读取的文件路径</span></span><br><span class="line">k=pd.ExcelFile(<span class="string">'C:\\Users\\jingw\\Desktop\\123.xlsx'</span>)</span><br><span class="line">sheet_names=k.sheet_names</span><br><span class="line"><span class="keyword">print</span> (sheet_names)</span><br><span class="line"><span class="keyword">for</span> sheet_num <span class="keyword">in</span> range(len(sheet_names)):</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'d:\\insert_sql.txt'</span>,<span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write((<span class="string">'--%s'</span> % sheet_names[sheet_num] + <span class="string">'\n'</span>).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    f=pd.read_excel(<span class="string">'C:\\Users\\jingw\\Desktop\\123.xlsx'</span>,sheetname=sheet_num)</span><br><span class="line">    my_columns = []</span><br><span class="line">    columns_len=len(f.columns)</span><br><span class="line">    j=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.columns:</span><br><span class="line">        my_columns.append(i)</span><br><span class="line">    <span class="comment">#print (my_columns)</span></span><br><span class="line">    my_columns_tuple = tuple(my_columns)</span><br><span class="line"></span><br><span class="line">    insert_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> my_columns:</span><br><span class="line">        <span class="keyword">if</span> insert_str==<span class="string">''</span>:</span><br><span class="line">            insert_str = insert_str + i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            insert_str = insert_str + <span class="string">','</span> + i</span><br><span class="line">    <span class="keyword">print</span> (insert_str)</span><br><span class="line">    my_insert_columns = <span class="string">'insert into %s (%s)'</span> % (sheet_names[sheet_num],insert_str) + <span class="string">' '</span>+ <span class="string">'values'</span></span><br><span class="line">    <span class="keyword">print</span> (my_insert_columns)</span><br><span class="line">    <span class="keyword">for</span> index,raws <span class="keyword">in</span> f.iterrows():</span><br><span class="line">        <span class="keyword">print</span> (raws)</span><br><span class="line">        insert_values = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(columns_len):</span><br><span class="line">            insert_values = insert_values +<span class="string">'"'</span>+ str(raws[i])+ <span class="string">'"'</span>+<span class="string">','</span></span><br><span class="line">        <span class="comment">#print (insert_values)</span></span><br><span class="line">        <span class="comment">#自行修改生成的文件路径</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'d:\\insert_sql.txt'</span>,<span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            insert_sql=<span class="string">''</span></span><br><span class="line">            insert_sql=my_insert_columns+<span class="string">'(%s)'</span> % insert_values[:<span class="number">-1</span>] + <span class="string">'\n'</span></span><br><span class="line">            <span class="keyword">print</span> (insert_sql)</span><br><span class="line">            f.write(insert_sql.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>最后实现结果，完美解决：</p><p><img src="/2018/04/25/pandas操作excel/3.png" alt="图三"></p><h3 id="记录二"><a href="#记录二" class="headerlink" title="记录二"></a>记录二</h3><p>之后同事又提出了需求，将一张sheet下的每一行分别写入其他多张sheet内（除去第一行），如下图</p><p><img src="/2018/04/25/pandas操作excel/2-1.png" alt="图2-1"></p><p>实现后的结果如下图</p><p><img src="/2018/04/25/pandas操作excel/2-2.png" alt="图2-2"></p><p><img src="/2018/04/25/pandas操作excel/2-3.png" alt="图2-3"></p><p><img src="/2018/04/25/pandas操作excel/2-4.png" alt="图2-4"></p><p>贴上代码，方便查阅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data=pd.read_excel(<span class="string">'C:\\Users\\jingw\\Desktop\\123.xlsx'</span>,sheetname=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#print (data.head(),data.shape[0])</span></span><br><span class="line">my_raws=data.shape[<span class="number">0</span>]</span><br><span class="line">my_max_columns=data.shape[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(my_raws):</span><br><span class="line">    <span class="comment">#print (data.loc[i][1:])</span></span><br><span class="line">    table_columns_length=data.loc[i][<span class="number">1</span>:]</span><br><span class="line">    data_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(table_columns_length)):</span><br><span class="line">        data_dict[j]=data.loc[i][j+<span class="number">1</span>]</span><br><span class="line">    df=pd.DataFrame(data=data_dict,index=[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">print</span> (df)</span><br><span class="line">    df.to_excel(excel_writer=<span class="string">'C:\\Users\\jingw\\Desktop\\%s.xlsx'</span> % data.loc[i][<span class="number">0</span>],sheet_name=data.loc[i][<span class="number">0</span>],)</span><br></pre></td></tr></table></figure><h3 id="记录三"><a href="#记录三" class="headerlink" title="记录三"></a>记录三</h3><p>后来这货又提出一个需求，把sheet1的数据插入到sheet0中，当然是按照每张sheet的第一行，也就是列值进行筛选，如果同时存在就将数据插入，如果不存在sheet0中的列，就不要，如果在sheet0中的列，又不在sheet1中的列，则生成结果置空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data0=pd.read_excel(<span class="string">'C:\\Users\\jingw\\Desktop\\123-3.xlsx'</span>,sheetname=<span class="number">0</span>)</span><br><span class="line">sheet0_columns=set(data0.head(<span class="number">1</span>))</span><br><span class="line">data1=pd.read_excel(<span class="string">'C:\\Users\\jingw\\Desktop\\123-3.xlsx'</span>,sheetname=<span class="number">1</span>)</span><br><span class="line">sheet1_columns=set(data1.head(<span class="number">1</span>))</span><br><span class="line">columns_union=sheet0_columns &amp; sheet1_columns</span><br><span class="line">columns_subtraction=sheet0_columns - sheet1_columns</span><br><span class="line"><span class="keyword">print</span> (columns_union)</span><br><span class="line"><span class="keyword">if</span> columns_union:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> columns_union:</span><br><span class="line">        data0[i]=data1[i]</span><br><span class="line"><span class="keyword">if</span> columns_subtraction:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> columns_subtraction:</span><br><span class="line">        data0[i]=<span class="keyword">None</span></span><br><span class="line"><span class="keyword">print</span> (data0.head())</span><br><span class="line">data0.to_excel(<span class="string">'C:\\Users\\jingw\\Desktop\\reulst.xlsx'</span>)</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> mlearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pandas模块的学习</title>
      <link href="/2018/03/16/Pandas%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p><strong> Pandas模块的学习：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>pandas 是基于 Numpy 构建的含有更高级数据结构和工具的数据分析包</p><p>类似于 Numpy 的核心是 ndarray，pandas 也是围绕着 Series 和 DataFrame 两个核心数据结构展开的 。Series 和 DataFrame 分别对应于一维的序列和二维的表结构。pandas 约定俗成的导入方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><hr><h3 id="Pandas代码学习-1"><a href="#Pandas代码学习-1" class="headerlink" title="Pandas代码学习(1)"></a>Pandas代码学习(1)</h3><p>pandas提供了读取文件的方法，pandas.read_csv()</p><p>查看dataframe数据框架中的各个字段的类型，可以调用实例的dypes属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line">food_info = pandas.read_csv(<span class="string">"food_info.csv"</span>)</span><br><span class="line">print(type(food_info))</span><br><span class="line"><span class="keyword">print</span> (food_info.dtypes)</span><br><span class="line"><span class="comment">#print (help(pandas.read_csv))</span></span><br></pre></td></tr></table></figure><p><class 'pandas.core.frame.dataframe'=""><br>NDB_No               int64<br>Shrt_Desc           object<br>Water_(g)          float64<br>Energ_Kcal           int64<br>Protein_(g)        float64<br>Lipid_Tot_(g)      float64<br>Ash_(g)            float64<br>Carbohydrt_(g)     float64<br>Fiber_TD_(g)       float64<br>Sugar_Tot_(g)      float64<br>Calcium_(mg)       float64<br>Iron_(mg)          float64<br>Magnesium_(mg)     float64<br>Phosphorus_(mg)    float64<br>Potassium_(mg)     float64<br>Sodium_(mg)        float64<br>Zinc_(mg)          float64<br>Copper_(mg)        float64<br>Manganese_(mg)     float64<br>Selenium_(mcg)     float64<br>Vit_C_(mg)         float64<br>Thiamin_(mg)       float64<br>Riboflavin_(mg)    float64<br>Niacin_(mg)        float64<br>Vit_B6_(mg)        float64<br>Vit_B12_(mcg)      float64<br>Vit_A_IU           float64<br>Vit_A_RAE          float64<br>Vit_E_(mg)         float64<br>Vit_D_mcg          float64<br>Vit_D_IU           float64<br>Vit_K_(mcg)        float64<br>FA_Sat_(g)         float64<br>FA_Mono_(g)        float64<br>FA_Poly_(g)        float64<br>Cholestrl_(mg)     float64<br>dtype: object</class></p><p>同ndarray的属性，dataframe查看前、后数据的方法为head()，tail()方法；</p><p>查看列名的话可以调用实例的columns属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (food_info.head(<span class="number">3</span>))</span><br><span class="line">first_rows = food_info.head()</span><br><span class="line">first_rows</span><br><span class="line"><span class="comment">#food_info.tail(4)</span></span><br><span class="line"><span class="comment">#print(food_info.tail(3))</span></span><br><span class="line"><span class="keyword">print</span> (food_info.columns)</span><br><span class="line"><span class="comment">#print (food_info.shape)</span></span><br></pre></td></tr></table></figure><p>NDB_No                 Shrt_Desc  Water_(g)  Energ_Kcal  Protein_(g)  \<br>0    1001          BUTTER WITH SALT      15.87         717         0.85<br>1    1002  BUTTER WHIPPED WITH SALT      15.87         717         0.85<br>2    1003      BUTTER OIL ANHYDROUS       0.24         876         0.28   </p><p>   Lipid_Tot_(g)  Ash_(g)  Carbohydrt_(g)  Fiber_TD_(g)  Sugar_Tot_(g)  \<br>0          81.11     2.11            0.06           0.0           0.06<br>1          81.11     2.11            0.06           0.0           0.06<br>2          99.48     0.00            0.00           0.0           0.00   </p><p>​        …        Vit_A_IU  Vit_A_RAE  Vit_E_(mg)  Vit_D_mcg  Vit_D_IU  \<br>0       …          2499.0      684.0        2.32        1.5      60.0<br>1       …          2499.0      684.0        2.32        1.5      60.0<br>2       …          3069.0      840.0        2.80        1.8      73.0   </p><p>   Vit_K_(mcg)  FA_Sat_(g)  FA_Mono_(g)  FA_Poly_(g)  Cholestrl_(mg)<br>0          7.0      51.368       21.021        3.043           215.0<br>1          7.0      50.489       23.426        3.012           219.0<br>2          8.6      61.924       28.732        3.694           256.0  </p><p>[3 rows x 36 columns]<br>Index([‘NDB_No’, ‘Shrt_Desc’, ‘Water_(g)’, ‘Energ_Kcal’, ‘Protein_(g)’,<br>​       ‘Lipid_Tot_(g)’, ‘Ash_(g)’, ‘Carbohydrt_(g)’, ‘Fiber_TD_(g)’,<br>​       ‘Sugar_Tot_(g)’, ‘Calcium_(mg)’, ‘Iron_(mg)’, ‘Magnesium_(mg)’,<br>​       ‘Phosphorus_(mg)’, ‘Potassium_(mg)’, ‘Sodium_(mg)’, ‘Zinc_(mg)’,<br>​       ‘Copper_(mg)’, ‘Manganese_(mg)’, ‘Selenium_(mcg)’, ‘Vit_C_(mg)’,<br>​       ‘Thiamin_(mg)’, ‘Riboflavin_(mg)’, ‘Niacin_(mg)’, ‘Vit_B6_(mg)’,<br>​       ‘Vit_B12_(mcg)’, ‘Vit_A_IU’, ‘Vit_A_RAE’, ‘Vit_E_(mg)’, ‘Vit_D_mcg’,<br>​       ‘Vit_D_IU’, ‘Vit_K_(mcg)’, ‘FA_Sat_(g)’, ‘FA_Mono_(g)’, ‘FA_Poly_(g)’,<br>​       ‘Cholestrl_(mg)’],<br>​      dtype=’object’)</p><p>想要调用指定位置的行数据，调用实例的loc方法，并指定索引区间；df使用的从零开始的索引顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pandas uses zero-indexing</span></span><br><span class="line"><span class="comment">#Series object representing the row at index 0.</span></span><br><span class="line"><span class="comment">#print (food_info.loc[0:1])</span></span><br><span class="line">food_info.loc[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line"><span class="comment"># Series object representing the seventh row.</span></span><br><span class="line"><span class="comment">#food_info.loc[6]</span></span><br><span class="line"><span class="comment"># Will throw an error: "KeyError: 'the label [8620] is not in the [index]'"</span></span><br><span class="line"><span class="comment">#food_info.loc[8620]</span></span><br><span class="line"><span class="comment">#The object dtype is equivalent to a string in Python</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>NDB_No</th><th>Shrt_Desc</th><th>Water_(g)</th><th>Energ_Kcal</th><th>Protein_(g)</th><th>Lipid_Tot_(g)</th><th>Ash_(g)</th><th>Carbohydrt_(g)</th><th>Fiber_TD_(g)</th><th>Sugar_Tot_(g)</th><th>…</th><th>Vit_A_IU</th><th>Vit_A_RAE</th><th>Vit_E_(mg)</th><th>Vit_D_mcg</th><th>Vit_D_IU</th><th>Vit_K_(mcg)</th><th>FA_Sat_(g)</th><th>FA_Mono_(g)</th><th>FA_Poly_(g)</th><th>Cholestrl_(mg)</th><th></th></tr></thead><tbody><tr><td>0</td><td>1001</td><td>BUTTER WITH SALT</td><td>15.87</td><td>717</td><td>0.85</td><td>81.11</td><td>2.11</td><td>0.06</td><td>0.0</td><td>0.06</td><td>…</td><td>2499.0</td><td>684.0</td><td>2.32</td><td>1.5</td><td>60.0</td><td>7.0</td><td>51.368</td><td>21.021</td><td>3.043</td><td>215.0</td></tr><tr><td>1</td><td>1002</td><td>BUTTER WHIPPED WITH SALT</td><td>15.87</td><td>717</td><td>0.85</td><td>81.11</td><td>2.11</td><td>0.06</td><td>0.0</td><td>0.06</td><td>…</td><td>2499.0</td><td>684.0</td><td>2.32</td><td>1.5</td><td>60.0</td><td>7.0</td><td>50.489</td><td>23.426</td><td>3.012</td><td>219.0</td></tr></tbody></table><p>2 rows × 36 columns</p><p>调用dtypes查看出来的类型分类如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#object - For string values</span></span><br><span class="line"><span class="comment">#int - For integer values</span></span><br><span class="line"><span class="comment">#float - For float values</span></span><br><span class="line"><span class="comment">#datetime - For time values</span></span><br><span class="line"><span class="comment">#bool - For Boolean values</span></span><br><span class="line">food_info.dtypes</span><br></pre></td></tr></table></figure><p>loc的参数为行数的列表或者列表区间，food_info.loc[[2,5,10]]查看2、5、10行的数据，注意loc的参数是一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Returns a DataFrame containing the rows at indexes 3, 4, 5, and 6.</span></span><br><span class="line">food_info.loc[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line"><span class="comment"># Returns a DataFrame containing the rows at indexes 2, 5, and 10. Either of the following approaches will work.</span></span><br><span class="line"><span class="comment"># Method 1</span></span><br><span class="line"><span class="comment">#two_five_ten = [2,5,10] </span></span><br><span class="line"><span class="comment">#food_info.loc[two_five_ten]</span></span><br><span class="line"><span class="comment"># Method 2</span></span><br><span class="line"><span class="comment">#food_info.loc[[2,5,10]]</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>NDB_No</th><th>Shrt_Desc</th><th>Water_(g)</th><th>Energ_Kcal</th><th>Protein_(g)</th><th>Lipid_Tot_(g)</th><th>Ash_(g)</th><th>Carbohydrt_(g)</th><th>Fiber_TD_(g)</th><th>Sugar_Tot_(g)</th><th>…</th><th>Vit_A_IU</th><th>Vit_A_RAE</th><th>Vit_E_(mg)</th><th>Vit_D_mcg</th><th>Vit_D_IU</th><th>Vit_K_(mcg)</th><th>FA_Sat_(g)</th><th>FA_Mono_(g)</th><th>FA_Poly_(g)</th><th>Cholestrl_(mg)</th><th></th></tr></thead><tbody><tr><td>3</td><td>1004</td><td>CHEESE BLUE</td><td>42.41</td><td>353</td><td>21.40</td><td>28.74</td><td>5.11</td><td>2.34</td><td>0.0</td><td>0.50</td><td>…</td><td>721.0</td><td>198.0</td><td>0.25</td><td>0.5</td><td>21.0</td><td>2.4</td><td>18.669</td><td>7.778</td><td>0.800</td><td>75.0</td></tr><tr><td>4</td><td>1005</td><td>CHEESE BRICK</td><td>41.11</td><td>371</td><td>23.24</td><td>29.68</td><td>3.18</td><td>2.79</td><td>0.0</td><td>0.51</td><td>…</td><td>1080.0</td><td>292.0</td><td>0.26</td><td>0.5</td><td>22.0</td><td>2.5</td><td>18.764</td><td>8.598</td><td>0.784</td><td>94.0</td></tr><tr><td>5</td><td>1006</td><td>CHEESE BRIE</td><td>48.42</td><td>334</td><td>20.75</td><td>27.68</td><td>2.70</td><td>0.45</td><td>0.0</td><td>0.45</td><td>…</td><td>592.0</td><td>174.0</td><td>0.24</td><td>0.5</td><td>20.0</td><td>2.3</td><td>17.410</td><td>8.013</td><td>0.826</td><td>100.0</td></tr><tr><td>6</td><td>1007</td><td>CHEESE CAMEMBERT</td><td>51.80</td><td>300</td><td>19.80</td><td>24.26</td><td>3.68</td><td>0.46</td><td>0.0</td><td>0.46</td><td>…</td><td>820.0</td><td>241.0</td><td>0.21</td><td>0.4</td><td>18.0</td><td>2.0</td><td>15.259</td><td>7.023</td><td>0.724</td><td>72.0</td></tr></tbody></table><p>4 rows × 36 columns</p><p>dataframe支持直接输入列名字符串来作为获取列值数据，或者是输入包含列名的字符串变量；</p><p>计算数据长度的话可以使用先取出某一列的数据列表，然后使用列表的len方法计算数据行数,查看所有列的行数的话使用df的count方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Series object representing the "NDB_No" column.</span></span><br><span class="line">ndb_col = food_info[<span class="string">"NDB_No"</span>]</span><br><span class="line"><span class="comment">#print (ndb_col)</span></span><br><span class="line"><span class="keyword">print</span> (len(ndb_col))</span><br><span class="line"><span class="keyword">print</span> (food_info.count())</span><br><span class="line"><span class="comment"># Alternatively, you can access a column by passing in a string variable.</span></span><br><span class="line"><span class="comment">#col_name = "NDB_No"</span></span><br><span class="line"><span class="comment">#ndb_col = food_info[col_name]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">8618</span></span><br><span class="line"><span class="string">NDB_No             8618</span></span><br><span class="line"><span class="string">Shrt_Desc          8618</span></span><br><span class="line"><span class="string">Water_(g)          8612</span></span><br><span class="line"><span class="string">Energ_Kcal         8618</span></span><br><span class="line"><span class="string">Protein_(g)        8618</span></span><br><span class="line"><span class="string">Lipid_Tot_(g)      8618</span></span><br><span class="line"><span class="string">Ash_(g)            8286</span></span><br><span class="line"><span class="string">Carbohydrt_(g)     8618</span></span><br><span class="line"><span class="string">Fiber_TD_(g)       7962</span></span><br><span class="line"><span class="string">Sugar_Tot_(g)      6679</span></span><br><span class="line"><span class="string">Calcium_(mg)       8264</span></span><br><span class="line"><span class="string">Iron_(mg)          8471</span></span><br><span class="line"><span class="string">Magnesium_(mg)     7936</span></span><br><span class="line"><span class="string">Phosphorus_(mg)    8046</span></span><br><span class="line"><span class="string">Potassium_(mg)     8208</span></span><br><span class="line"><span class="string">Sodium_(mg)        8535</span></span><br><span class="line"><span class="string">Zinc_(mg)          7917</span></span><br><span class="line"><span class="string">Copper_(mg)        7363</span></span><br><span class="line"><span class="string">Manganese_(mg)     6478</span></span><br><span class="line"><span class="string">Selenium_(mcg)     6868</span></span><br><span class="line"><span class="string">Vit_C_(mg)         7826</span></span><br><span class="line"><span class="string">Thiamin_(mg)       7939</span></span><br><span class="line"><span class="string">Riboflavin_(mg)    7961</span></span><br><span class="line"><span class="string">Niacin_(mg)        7937</span></span><br><span class="line"><span class="string">Vit_B6_(mg)        7677</span></span><br><span class="line"><span class="string">Vit_B12_(mcg)      7427</span></span><br><span class="line"><span class="string">Vit_A_IU           7932</span></span><br><span class="line"><span class="string">Vit_A_RAE          7089</span></span><br><span class="line"><span class="string">Vit_E_(mg)         5613</span></span><br><span class="line"><span class="string">Vit_D_mcg          5319</span></span><br><span class="line"><span class="string">Vit_D_IU           5320</span></span><br><span class="line"><span class="string">Vit_K_(mcg)        4969</span></span><br><span class="line"><span class="string">FA_Sat_(g)         8274</span></span><br><span class="line"><span class="string">FA_Mono_(g)        7947</span></span><br><span class="line"><span class="string">FA_Poly_(g)        7954</span></span><br><span class="line"><span class="string">Cholestrl_(mg)     8250</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>取某几列的一般方法就是做一个列名列表，并作为df的入参DF.[列名列表]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">columns = [<span class="string">"Zinc_(mg)"</span>, <span class="string">"Copper_(mg)"</span>,<span class="string">"Energ_Kcal"</span>]</span><br><span class="line"><span class="keyword">print</span> (type(food_info.columns))</span><br><span class="line">zinc_copper = food_info[columns]</span><br><span class="line"><span class="keyword">print</span> (zinc_copper)</span><br><span class="line"><span class="comment">#print zinc_copper</span></span><br><span class="line"><span class="comment"># Skipping the assignment.</span></span><br><span class="line"><span class="comment">#zinc_copper = food_info[["Zinc_(mg)", "Copper_(mg)"]]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;class 'pandas.core.indexes.base.Index'&gt;</span></span><br><span class="line"><span class="string">      Zinc_(mg)  Copper_(mg)  Energ_Kcal</span></span><br><span class="line"><span class="string">0          0.09        0.000         717</span></span><br><span class="line"><span class="string">1          0.05        0.016         717</span></span><br><span class="line"><span class="string">2          0.01        0.001         876</span></span><br><span class="line"><span class="string">3          2.66        0.040         353</span></span><br><span class="line"><span class="string">4          2.60        0.024         371</span></span><br><span class="line"><span class="string">5          2.38        0.019         334</span></span><br><span class="line"><span class="string">6          2.38        0.021         300</span></span><br><span class="line"><span class="string">7          2.94        0.024         376</span></span><br><span class="line"><span class="string">8          3.43        0.056         406</span></span><br><span class="line"><span class="string">9          2.79        0.042         387</span></span><br><span class="line"><span class="string">10         3.07        0.042         394</span></span><br><span class="line"><span class="string">11         0.40        0.029          98</span></span><br><span class="line"><span class="string">12         0.33        0.040          97</span></span><br><span class="line"><span class="string">13         0.47        0.030          72</span></span><br><span class="line"><span class="string">14         0.51        0.033          81</span></span><br><span class="line"><span class="string">15         0.38        0.028          72</span></span><br><span class="line"><span class="string">16         0.51        0.019         342</span></span><br><span class="line"><span class="string">17         3.75        0.036         357</span></span><br><span class="line"><span class="string">18         2.88        0.032         264</span></span><br><span class="line"><span class="string">19         3.50        0.025         389</span></span><br><span class="line"><span class="string">20         1.14        0.080         466</span></span><br><span class="line"><span class="string">21         3.90        0.036         356</span></span><br><span class="line"><span class="string">22         3.90        0.032         413</span></span><br><span class="line"><span class="string">23         2.10        0.021         327</span></span><br><span class="line"><span class="string">24         3.00        0.032         373</span></span><br><span class="line"><span class="string">25         2.92        0.011         300</span></span><br><span class="line"><span class="string">26         2.46        0.022         318</span></span><br><span class="line"><span class="string">27         2.76        0.025         254</span></span><br><span class="line"><span class="string">28         3.61        0.034         301</span></span><br><span class="line"><span class="string">29         2.81        0.031         368</span></span><br><span class="line"><span class="string"><span class="meta">... </span>        ...          ...         ...</span></span><br><span class="line"><span class="string">8588       3.30        0.377         389</span></span><br><span class="line"><span class="string">8589       0.05        0.040          91</span></span><br><span class="line"><span class="string">8590       0.05        0.030          68</span></span><br><span class="line"><span class="string">8591       1.15        0.116         465</span></span><br><span class="line"><span class="string">8592       5.03        0.200         401</span></span><br><span class="line"><span class="string">8593       3.83        0.545         429</span></span><br><span class="line"><span class="string">8594       0.08        0.035          73</span></span><br><span class="line"><span class="string">8595       3.90        0.027         179</span></span><br><span class="line"><span class="string">8596       4.10        0.100         377</span></span><br><span class="line"><span class="string">8597       3.13        0.027         280</span></span><br><span class="line"><span class="string">8598       0.13        0.000         688</span></span><br><span class="line"><span class="string">8599       0.02        0.000         884</span></span><br><span class="line"><span class="string">8600       0.09        0.037         279</span></span><br><span class="line"><span class="string">8601       0.21        0.026         257</span></span><br><span class="line"><span class="string">8602       2.77        0.571         319</span></span><br><span class="line"><span class="string">8603       0.41        0.838         356</span></span><br><span class="line"><span class="string">8604       0.05        0.028          62</span></span><br><span class="line"><span class="string">8605       0.03        0.023         179</span></span><br><span class="line"><span class="string">8606       0.10        0.112         181</span></span><br><span class="line"><span class="string">8607       0.02        0.020         287</span></span><br><span class="line"><span class="string">8608       1.49        0.854         365</span></span><br><span class="line"><span class="string">8609       0.19        0.040         351</span></span><br><span class="line"><span class="string">8610       0.10        0.038         350</span></span><br><span class="line"><span class="string">8611       0.85        0.182         370</span></span><br><span class="line"><span class="string">8612       1.00        0.250          73</span></span><br><span class="line"><span class="string">8613       1.10        0.100         305</span></span><br><span class="line"><span class="string">8614       1.55        0.033         111</span></span><br><span class="line"><span class="string">8615       0.19        0.020         269</span></span><br><span class="line"><span class="string">8616       1.00        0.400          90</span></span><br><span class="line"><span class="string">8617       1.00        0.250          89</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[8618 rows x 3 columns]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>DF的列名类型为<class 'pandas.core.indexes.base.index'=""></class></p><p>如果要方便的操作列名，columns集成了tolist()方法直接变成列表形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#print(food_info.columns)</span></span><br><span class="line"><span class="comment">#print(food_info.head(2))</span></span><br><span class="line">col_names = food_info.columns.tolist()</span><br><span class="line"><span class="keyword">print</span> (col_names)</span><br><span class="line">gram_columns = []</span><br><span class="line"><span class="comment">#如果有的字段为(g)结尾，取出作为我们想要的数据</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> col_names:</span><br><span class="line">    <span class="keyword">if</span> c.endswith(<span class="string">"(g)"</span>):</span><br><span class="line">        gram_columns.append(c)</span><br><span class="line">gram_df = food_info[gram_columns]</span><br><span class="line">print(gram_df.head(<span class="number">3</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">['NDB_No', 'Shrt_Desc', 'Water_(g)', 'Energ_Kcal', 'Protein_(g)', 'Lipid_Tot_(g)', 'Ash_(g)', 'Carbohydrt_(g)', 'Fiber_TD_(g)', 'Sugar_Tot_(g)', 'Calcium_(mg)', 'Iron_(mg)', 'Magnesium_(mg)', 'Phosphorus_(mg)', 'Potassium_(mg)', 'Sodium_(mg)', 'Zinc_(mg)', 'Copper_(mg)', 'Manganese_(mg)', 'Selenium_(mcg)', 'Vit_C_(mg)', 'Thiamin_(mg)', 'Riboflavin_(mg)', 'Niacin_(mg)', 'Vit_B6_(mg)', 'Vit_B12_(mcg)', 'Vit_A_IU', 'Vit_A_RAE', 'Vit_E_(mg)', 'Vit_D_mcg', 'Vit_D_IU', 'Vit_K_(mcg)', 'FA_Sat_(g)', 'FA_Mono_(g)', 'FA_Poly_(g)', 'Cholestrl_(mg)']</span></span><br><span class="line"><span class="string">   Water_(g)  Protein_(g)  Lipid_Tot_(g)  Ash_(g)  Carbohydrt_(g)  \</span></span><br><span class="line"><span class="string">0      15.87         0.85          81.11     2.11            0.06   </span></span><br><span class="line"><span class="string">1      15.87         0.85          81.11     2.11            0.06   </span></span><br><span class="line"><span class="string">2       0.24         0.28          99.48     0.00            0.00   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Fiber_TD_(g)  Sugar_Tot_(g)  FA_Sat_(g)  FA_Mono_(g)  FA_Poly_(g)  </span></span><br><span class="line"><span class="string">0           0.0           0.06      51.368       21.021        3.043  </span></span><br><span class="line"><span class="string">1           0.0           0.06      50.489       23.426        3.012  </span></span><br><span class="line"><span class="string">2           0.0           0.00      61.924       28.732        3.694  </span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h3 id="Pandas代码学习-2"><a href="#Pandas代码学习-2" class="headerlink" title="Pandas代码学习(2)"></a>Pandas代码学习(2)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line">food_info = pandas.read_csv(<span class="string">"food_info.csv"</span>)</span><br><span class="line">col_names = food_info.columns.tolist()</span><br><span class="line">print(col_names)</span><br><span class="line">print(food_info.head(<span class="number">3</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import pandas</span></span><br><span class="line"><span class="string">food_info = pandas.read_csv("food_info.csv")</span></span><br><span class="line"><span class="string">col_names = food_info.columns.tolist()</span></span><br><span class="line"><span class="string">print(col_names)</span></span><br><span class="line"><span class="string">print(food_info.head(3))</span></span><br><span class="line"><span class="string">import pandas</span></span><br><span class="line"><span class="string">food_info = pandas.read_csv("food_info.csv")</span></span><br><span class="line"><span class="string">col_names = food_info.columns.tolist()</span></span><br><span class="line"><span class="string">print(col_names)</span></span><br><span class="line"><span class="string">print(food_info.head(3))</span></span><br><span class="line"><span class="string">['NDB_No', 'Shrt_Desc', 'Water_(g)', 'Energ_Kcal', 'Protein_(g)', 'Lipid_Tot_(g)', 'Ash_(g)', 'Carbohydrt_(g)', 'Fiber_TD_(g)', 'Sugar_Tot_(g)', 'Calcium_(mg)', 'Iron_(mg)', 'Magnesium_(mg)', 'Phosphorus_(mg)', 'Potassium_(mg)', 'Sodium_(mg)', 'Zinc_(mg)', 'Copper_(mg)', 'Manganese_(mg)', 'Selenium_(mcg)', 'Vit_C_(mg)', 'Thiamin_(mg)', 'Riboflavin_(mg)', 'Niacin_(mg)', 'Vit_B6_(mg)', 'Vit_B12_(mcg)', 'Vit_A_IU', 'Vit_A_RAE', 'Vit_E_(mg)', 'Vit_D_mcg', 'Vit_D_IU', 'Vit_K_(mcg)', 'FA_Sat_(g)', 'FA_Mono_(g)', 'FA_Poly_(g)', 'Cholestrl_(mg)']</span></span><br><span class="line"><span class="string">   NDB_No                 Shrt_Desc  Water_(g)  Energ_Kcal  Protein_(g)  \</span></span><br><span class="line"><span class="string">0    1001          BUTTER WITH SALT      15.87         717         0.85   </span></span><br><span class="line"><span class="string">1    1002  BUTTER WHIPPED WITH SALT      15.87         717         0.85   </span></span><br><span class="line"><span class="string">2    1003      BUTTER OIL ANHYDROUS       0.24         876         0.28   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Lipid_Tot_(g)  Ash_(g)  Carbohydrt_(g)  Fiber_TD_(g)  Sugar_Tot_(g)  \</span></span><br><span class="line"><span class="string">0          81.11     2.11            0.06           0.0           0.06   </span></span><br><span class="line"><span class="string">1          81.11     2.11            0.06           0.0           0.06   </span></span><br><span class="line"><span class="string">2          99.48     0.00            0.00           0.0           0.00   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ...        Vit_A_IU  Vit_A_RAE  Vit_E_(mg)  Vit_D_mcg  Vit_D_IU  \</span></span><br><span class="line"><span class="string">0       ...          2499.0      684.0        2.32        1.5      60.0   </span></span><br><span class="line"><span class="string">1       ...          2499.0      684.0        2.32        1.5      60.0   </span></span><br><span class="line"><span class="string">2       ...          3069.0      840.0        2.80        1.8      73.0   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Vit_K_(mcg)  FA_Sat_(g)  FA_Mono_(g)  FA_Poly_(g)  Cholestrl_(mg)  </span></span><br><span class="line"><span class="string">0          7.0      51.368       21.021        3.043           215.0  </span></span><br><span class="line"><span class="string">1          7.0      50.489       23.426        3.012           219.0  </span></span><br><span class="line"><span class="string">2          8.6      61.924       28.732        3.694           256.0  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[3 rows x 36 columns]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>做加减乘除法运算的情况下，每一个value都要进行相应的运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Iron_(mg)"</span>][<span class="number">0</span>:<span class="number">10</span>])</span><br><span class="line">div_1000 = food_info[<span class="string">"Iron_(mg)"</span>] [<span class="number">100</span>:<span class="number">110</span>]/ <span class="number">1000</span></span><br><span class="line"><span class="keyword">print</span> (div_1000)</span><br><span class="line"><span class="comment"># Adds 100 to each value in the column and returns a Series object.</span></span><br><span class="line"><span class="comment">#add_100 = food_info["Iron_(mg)"] + 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subtracts 100 from each value in the column and returns a Series object.</span></span><br><span class="line"><span class="comment">#sub_100 = food_info["Iron_(mg)"] - 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiplies each value in the column by 2 and returns a Series object.</span></span><br><span class="line"><span class="comment">#mult_2 = food_info["Iron_(mg)"]*2</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">276      0.33</span></span><br><span class="line"><span class="string">5814     0.00</span></span><br><span class="line"><span class="string">6192     7.07</span></span><br><span class="line"><span class="string">1242     1.00</span></span><br><span class="line"><span class="string">1245     1.87</span></span><br><span class="line"><span class="string">1243     2.23</span></span><br><span class="line"><span class="string">1244     1.03</span></span><br><span class="line"><span class="string">292      0.00</span></span><br><span class="line"><span class="string">1254     9.30</span></span><br><span class="line"><span class="string">5811    11.02</span></span><br><span class="line"><span class="string">Name: Iron_(mg), dtype: float64</span></span><br><span class="line"><span class="string">1653    0.00156</span></span><br><span class="line"><span class="string">1574    0.00393</span></span><br><span class="line"><span class="string">6356    0.00167</span></span><br><span class="line"><span class="string">163     0.00016</span></span><br><span class="line"><span class="string">132     0.00087</span></span><br><span class="line"><span class="string">2729    0.00095</span></span><br><span class="line"><span class="string">5912    0.00381</span></span><br><span class="line"><span class="string">8501    0.00077</span></span><br><span class="line"><span class="string">212     0.00063</span></span><br><span class="line"><span class="string">41      0.00063</span></span><br><span class="line"><span class="string">Name: Iron_(mg), dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#It applies the arithmetic operator to the first value in both columns, the second value in both columns, and so on</span></span><br><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Water_(g)"</span>].count(),food_info[<span class="string">"Energ_Kcal"</span>].count())</span><br><span class="line">water_energy = food_info[<span class="string">"Water_(g)"</span>] * food_info[<span class="string">"Energ_Kcal"</span>]</span><br><span class="line">water_energy = food_info[<span class="string">"Water_(g)"</span>] * food_info[<span class="string">"Energ_Kcal"</span>]</span><br><span class="line"><span class="keyword">print</span> (water_energy.size,water_energy[:].size)</span><br><span class="line">iron_grams = food_info[<span class="string">"Iron_(mg)"</span>][<span class="number">1</span>:<span class="number">15</span>] / <span class="number">1000</span>  </span><br><span class="line"><span class="keyword">print</span> (iron_grams)</span><br><span class="line"><span class="keyword">print</span> (food_info.shape)</span><br><span class="line">food_info[<span class="string">"Iron_(g)"</span>] = iron_grams</span><br><span class="line"><span class="keyword">print</span> (food_info.shape)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">8612 8618</span></span><br><span class="line"><span class="string">8618 8618</span></span><br><span class="line"><span class="string">5814    0.00000</span></span><br><span class="line"><span class="string">6192    0.00707</span></span><br><span class="line"><span class="string">1242    0.00100</span></span><br><span class="line"><span class="string">1245    0.00187</span></span><br><span class="line"><span class="string">1243    0.00223</span></span><br><span class="line"><span class="string">1244    0.00103</span></span><br><span class="line"><span class="string">292     0.00000</span></span><br><span class="line"><span class="string">1254    0.00930</span></span><br><span class="line"><span class="string">5811    0.01102</span></span><br><span class="line"><span class="string">8575    0.00227</span></span><br><span class="line"><span class="string">291     0.00675</span></span><br><span class="line"><span class="string">1249    0.00125</span></span><br><span class="line"><span class="string">5812    0.01127</span></span><br><span class="line"><span class="string">1292    0.00078</span></span><br><span class="line"><span class="string">Name: Iron_(mg), dtype: float64</span></span><br><span class="line"><span class="string">(8618, 39)</span></span><br><span class="line"><span class="string">(8618, 39)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Score=2×(Protein_(g))−0.75×(Lipid_Tot_(g))</span></span><br><span class="line">weighted_protein = food_info[<span class="string">"Protein_(g)"</span>] * <span class="number">2</span></span><br><span class="line">weighted_fat = <span class="number">-0.75</span> * food_info[<span class="string">"Lipid_Tot_(g)"</span>]</span><br><span class="line">initial_rating = weighted_protein + weighted_fat</span><br><span class="line"><span class="keyword">print</span> (initial_rating[<span class="number">1</span>:<span class="number">15</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5814     0.0000</span></span><br><span class="line"><span class="string">6192     1.9250</span></span><br><span class="line"><span class="string">1242    25.2725</span></span><br><span class="line"><span class="string">1245    25.6750</span></span><br><span class="line"><span class="string">1243    31.6000</span></span><br><span class="line"><span class="string">1244    22.9100</span></span><br><span class="line"><span class="string">292      0.0000</span></span><br><span class="line"><span class="string">1254    11.1775</span></span><br><span class="line"><span class="string">5811     0.0000</span></span><br><span class="line"><span class="string">8575     9.9500</span></span><br><span class="line"><span class="string">291      0.0000</span></span><br><span class="line"><span class="string">1249    14.7050</span></span><br><span class="line"><span class="string">5812     0.2000</span></span><br><span class="line"><span class="string">1292    10.1125</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the "Vit_A_IU" column ranges from 0 to 100000, while the "Fiber_TD_(g)" column ranges from 0 to 79</span></span><br><span class="line"><span class="comment">#For certain calculations, columns like "Vit_A_IU" can have a greater effect on the result, </span></span><br><span class="line"><span class="comment">#due to the scale of the values</span></span><br><span class="line"><span class="comment"># The largest value in the "Energ_Kcal" column.</span></span><br><span class="line">max_calories = food_info[<span class="string">"Energ_Kcal"</span>].max()</span><br><span class="line"><span class="comment"># Divide the values in "Energ_Kcal" by the largest value.</span></span><br><span class="line">normalized_calories = food_info[<span class="string">"Energ_Kcal"</span>] / max_calories</span><br><span class="line">normalized_protein = food_info[<span class="string">"Protein_(g)"</span>] / food_info[<span class="string">"Protein_(g)"</span>].max()</span><br><span class="line">normalized_fat = food_info[<span class="string">"Lipid_Tot_(g)"</span>] / food_info[<span class="string">"Lipid_Tot_(g)"</span>].max()</span><br><span class="line">food_info[<span class="string">"Normalized_Protein"</span>] = normalized_protein</span><br><span class="line">food_info[<span class="string">"Normalized_Fat"</span>] = normalized_fat</span><br><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Normalized_Protein"</span>][<span class="number">1</span>:<span class="number">10</span>])</span><br><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Normalized_Fat"</span>][<span class="number">1</span>:<span class="number">10</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5814    0.000000</span></span><br><span class="line"><span class="string">6192    0.011322</span></span><br><span class="line"><span class="string">1242    0.180820</span></span><br><span class="line"><span class="string">1245    0.165308</span></span><br><span class="line"><span class="string">1243    0.195879</span></span><br><span class="line"><span class="string">1244    0.188632</span></span><br><span class="line"><span class="string">292     0.000000</span></span><br><span class="line"><span class="string">1254    0.104167</span></span><br><span class="line"><span class="string">5811    0.000000</span></span><br><span class="line"><span class="string">Name: Normalized_Protein, dtype: float64</span></span><br><span class="line"><span class="string">5814    0.0000</span></span><br><span class="line"><span class="string">6192    0.0010</span></span><br><span class="line"><span class="string">1242    0.0889</span></span><br><span class="line"><span class="string">1245    0.0470</span></span><br><span class="line"><span class="string">1243    0.0400</span></span><br><span class="line"><span class="string">1244    0.1388</span></span><br><span class="line"><span class="string">292     0.0000</span></span><br><span class="line"><span class="string">1254    0.0963</span></span><br><span class="line"><span class="string">5811    0.0000</span></span><br><span class="line"><span class="string">Name: Normalized_Fat, dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>排序的方式使用df的sort_values()的方法，指明需要的列和是否要返回新的dataframe    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#By default, pandas will sort the data by the column we specify in ascending order and return a new DataFrame</span></span><br><span class="line"><span class="comment"># Sorts the DataFrame in-place, rather than=true returning a new DataFrame.</span></span><br><span class="line"><span class="comment">#print food_info["Sodium_(mg)"]</span></span><br><span class="line">food_info.sort_values(<span class="string">"Sodium_(mg)"</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Sodium_(mg)"</span>][<span class="number">1</span>:<span class="number">10</span>])</span><br><span class="line"><span class="comment">#Sorts by descending order, rather than ascending.</span></span><br><span class="line">food_info.sort_values(<span class="string">"Sodium_(mg)"</span>, inplace=<span class="keyword">True</span>, ascending=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Sodium_(mg)"</span>][<span class="number">1</span>:<span class="number">10</span>])</span><br><span class="line"><span class="keyword">print</span> (food_info.columns.size)</span><br><span class="line"><span class="keyword">print</span> (food_info.iloc[<span class="number">1</span>:<span class="number">3</span>,<span class="number">0</span>].size)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">383     0.0</span></span><br><span class="line"><span class="string">405     0.0</span></span><br><span class="line"><span class="string">745     0.0</span></span><br><span class="line"><span class="string">2397    0.0</span></span><br><span class="line"><span class="string">763     0.0</span></span><br><span class="line"><span class="string">407     0.0</span></span><br><span class="line"><span class="string">6574    0.0</span></span><br><span class="line"><span class="string">4397    0.0</span></span><br><span class="line"><span class="string">396     0.0</span></span><br><span class="line"><span class="string">Name: Sodium_(mg), dtype: float64</span></span><br><span class="line"><span class="string">5814    27360.0</span></span><br><span class="line"><span class="string">6192    26050.0</span></span><br><span class="line"><span class="string">1242    26000.0</span></span><br><span class="line"><span class="string">1245    24000.0</span></span><br><span class="line"><span class="string">1243    24000.0</span></span><br><span class="line"><span class="string">1244    23875.0</span></span><br><span class="line"><span class="string">292     17000.0</span></span><br><span class="line"><span class="string">1254    11588.0</span></span><br><span class="line"><span class="string">5811    10600.0</span></span><br><span class="line"><span class="string">Name: Sodium_(mg), dtype: float64</span></span><br><span class="line"><span class="string">39</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h3 id="Pandas代码学习-3"><a href="#Pandas代码学习-3" class="headerlink" title="Pandas代码学习(3)"></a>Pandas代码学习(3)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">titanic_survival = pd.read_csv(<span class="string">"titanic_train.csv"</span>)</span><br><span class="line">titanic_survival.head()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   PassengerId  Survived  Pclass  \</span></span><br><span class="line"><span class="string">0            1         0       3   </span></span><br><span class="line"><span class="string">1            2         1       1   </span></span><br><span class="line"><span class="string">2            3         1       3   </span></span><br><span class="line"><span class="string">3            4         1       1   </span></span><br><span class="line"><span class="string">4            5         0       3   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                                                Name     Sex   Age  SibSp  \</span></span><br><span class="line"><span class="string">0                            Braund, Mr. Owen Harris    male  22.0      1   </span></span><br><span class="line"><span class="string">1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   </span></span><br><span class="line"><span class="string">2                             Heikkinen, Miss. Laina  female  26.0      0   </span></span><br><span class="line"><span class="string">3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   </span></span><br><span class="line"><span class="string">4                           Allen, Mr. William Henry    male  35.0      0   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Parch            Ticket     Fare Cabin Embarked  </span></span><br><span class="line"><span class="string">0      0         A/5 21171   7.2500   NaN        S  </span></span><br><span class="line"><span class="string">1      0          PC 17599  71.2833   C85        C  </span></span><br><span class="line"><span class="string">2      0  STON/O2. 3101282   7.9250   NaN        S  </span></span><br><span class="line"><span class="string">3      0            113803  53.1000  C123        S  </span></span><br><span class="line"><span class="string">4      0            373450   8.0500   NaN        S  </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#The Pandas library uses NaN, which stands for "not a number", to indicate a missing value.</span></span><br><span class="line"><span class="comment">#we can use the pandas.isnull() function which takes a pandas series and returns a series of True and False values</span></span><br><span class="line">age = titanic_survival[<span class="string">"Age"</span>]</span><br><span class="line"><span class="comment">#print(age.loc[0:10])</span></span><br><span class="line">age_is_null = pd.isnull(age)</span><br><span class="line"><span class="keyword">print</span> (age_is_null)</span><br><span class="line">age_null_true = age[age_is_null]</span><br><span class="line"><span class="comment">#print (age_null_true)</span></span><br><span class="line">age_null_count = len(age_null_true)</span><br><span class="line">print(age_null_count)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0     False</span></span><br><span class="line"><span class="string">1     False</span></span><br><span class="line"><span class="string">2     False</span></span><br><span class="line"><span class="string">3     False</span></span><br><span class="line"><span class="string">4     False</span></span><br><span class="line"><span class="string">5      True</span></span><br><span class="line"><span class="string">6     False</span></span><br><span class="line"><span class="string">7     False</span></span><br><span class="line"><span class="string">8     False</span></span><br><span class="line"><span class="string">9     False</span></span><br><span class="line"><span class="string">10    False</span></span><br><span class="line"><span class="string">11    False</span></span><br><span class="line"><span class="string">12    False</span></span><br><span class="line"><span class="string">13    False</span></span><br><span class="line"><span class="string">14    False</span></span><br><span class="line"><span class="string">Name: Age, dtype: bool</span></span><br><span class="line"><span class="string">177</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h3 id="Pandas代码学习-4"><a href="#Pandas代码学习-4" class="headerlink" title="Pandas代码学习(4)"></a>Pandas代码学习(4)</h3><hr><h3 id="Pandas代码学习-5"><a href="#Pandas代码学习-5" class="headerlink" title="Pandas代码学习(5)"></a>Pandas代码学习(5)</h3></the>]]></content>
      
      <categories>
          
          <category> mlearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Numpy模块的学习(3-5)</title>
      <link href="/2018/03/15/Numpy%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0(3-5)/"/>
      <content type="html"><![CDATA[<p><strong> Numpy模块的学习(3-5)：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>介绍一个科学计算数据库的使用，它就是numpy，之后会出一个更流行的pandas模块使用简介</p><p><a href="http://www.numpy.org/" target="_blank" rel="noopener">官方网站</a></p><p>环境</p><p>python版本：python3.5 </p><p>操作系统：window10 </p><p>建议安装：anaconda自带 Jupyter Notebook</p><hr><h3 id="Numpy代码学习（3）"><a href="#Numpy代码学习（3）" class="headerlink" title="Numpy代码学习（3）"></a>Numpy代码学习（3）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reshape函数将源矩阵重铸源矩阵是1行15列的，重铸为3行5列</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">print</span> (np.arange(<span class="number">15</span>))</span><br><span class="line">a = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3,  4],</span></span><br><span class="line"><span class="string">       [ 5,  6,  7,  8,  9],</span></span><br><span class="line"><span class="string">       [10, 11, 12, 13, 14]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#查看维度</span></span><br><span class="line">a.shape</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">(3, 5)</span></span><br><span class="line"><span class="string">#ndim的意思是维度的个数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a.ndim</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#查看值类型的名称</span></span><br><span class="line">a.dtype.name</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'int32'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#查看所有值的个数</span></span><br><span class="line">a.size</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">15</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#初始化一个全是0的矩阵</span></span><br><span class="line">np.zeros ((<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="string">       [ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="string">       [ 0.,  0.,  0.,  0.]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#初始化一个全是1的多维矩阵，并且1的类型为整形，默认情况下出来的float型</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#np.ones( (2,3,4), dtype=np.int32 )</span></span><br><span class="line">np.ones((<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),dtype=np.int32)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[[1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1]]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#创建一个数字序列，从10到30 ，中间间隔5；从1到50，中间间隔0.3</span></span><br><span class="line"><span class="comment">#To create sequences of numbers</span></span><br><span class="line">np.arange( <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span> )</span><br><span class="line">np.arange(<span class="number">1</span>,<span class="number">50</span>,<span class="number">0.3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([  1. ,   1.3,   1.6,   1.9,   2.2,   2.5,   2.8,   3.1,   3.4,</span></span><br><span class="line"><span class="string">         3.7,   4. ,   4.3,   4.6,   4.9,   5.2,   5.5,   5.8,   6.1,</span></span><br><span class="line"><span class="string">         6.4,   6.7,   7. ,   7.3,   7.6,   7.9,   8.2,   8.5,   8.8,</span></span><br><span class="line"><span class="string">         9.1,   9.4,   9.7,  10. ,  10.3,  10.6,  10.9,  11.2,  11.5,</span></span><br><span class="line"><span class="string">        11.8,  12.1,  12.4,  12.7,  13. ,  13.3,  13.6,  13.9,  14.2,</span></span><br><span class="line"><span class="string">        14.5,  14.8,  15.1,  15.4,  15.7,  16. ,  16.3,  16.6,  16.9,</span></span><br><span class="line"><span class="string">        17.2,  17.5,  17.8,  18.1,  18.4,  18.7,  19. ,  19.3,  19.6,</span></span><br><span class="line"><span class="string">        19.9,  20.2,  20.5,  20.8,  21.1,  21.4,  21.7,  22. ,  22.3,</span></span><br><span class="line"><span class="string">        22.6,  22.9,  23.2,  23.5,  23.8,  24.1,  24.4,  24.7,  25. ,</span></span><br><span class="line"><span class="string">        25.3,  25.6,  25.9,  26.2,  26.5,  26.8,  27.1,  27.4,  27.7,</span></span><br><span class="line"><span class="string">        28. ,  28.3,  28.6,  28.9,  29.2,  29.5,  29.8,  30.1,  30.4,</span></span><br><span class="line"><span class="string">        30.7,  31. ,  31.3,  31.6,  31.9,  32.2,  32.5,  32.8,  33.1,</span></span><br><span class="line"><span class="string">        33.4,  33.7,  34. ,  34.3,  34.6,  34.9,  35.2,  35.5,  35.8,</span></span><br><span class="line"><span class="string">        36.1,  36.4,  36.7,  37. ,  37.3,  37.6,  37.9,  38.2,  38.5,</span></span><br><span class="line"><span class="string">        38.8,  39.1,  39.4,  39.7,  40. ,  40.3,  40.6,  40.9,  41.2,</span></span><br><span class="line"><span class="string">        41.5,  41.8,  42.1,  42.4,  42.7,  43. ,  43.3,  43.6,  43.9,</span></span><br><span class="line"><span class="string">        44.2,  44.5,  44.8,  45.1,  45.4,  45.7,  46. ,  46.3,  46.6,</span></span><br><span class="line"><span class="string">        46.9,  47.2,  47.5,  47.8,  48.1,  48.4,  48.7,  49. ,  49.3,</span></span><br><span class="line"><span class="string">        49.6,  49.9])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">np.arange( <span class="number">0</span>, <span class="number">2</span>, <span class="number">0.3</span> )</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([ 0. ,  0.3,  0.6,  0.9,  1.2,  1.5,  1.8])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#初始化0-11，总共12个数字，并且重铸为4行3列</span></span><br><span class="line">np.arange(<span class="number">12</span>).reshape(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3,  4],</span></span><br><span class="line"><span class="string">       [ 5,  6,  7,  8,  9],</span></span><br><span class="line"><span class="string">       [10, 11, 12, 13, 14]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#随机生成一个2行3列的矩阵</span></span><br><span class="line">np.random.random((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0.65026519,  0.4807253 ,  0.10297998],</span></span><br><span class="line"><span class="string">       [ 0.09497607,  0.20531811,  0.63868766]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#导入π，并初始化一个从0到π的1行100列的数组</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> pi</span><br><span class="line">np.linspace( <span class="number">0</span>, pi, <span class="number">100</span> )</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([ 0.        ,  0.03173326,  0.06346652,  0.09519978,  0.12693304,</span></span><br><span class="line"><span class="string">        0.1586663 ,  0.19039955,  0.22213281,  0.25386607,  0.28559933,</span></span><br><span class="line"><span class="string">        0.31733259,  0.34906585,  0.38079911,  0.41253237,  0.44426563,</span></span><br><span class="line"><span class="string">        0.47599889,  0.50773215,  0.53946541,  0.57119866,  0.60293192,</span></span><br><span class="line"><span class="string">        0.63466518,  0.66639844,  0.6981317 ,  0.72986496,  0.76159822,</span></span><br><span class="line"><span class="string">        0.79333148,  0.82506474,  0.856798  ,  0.88853126,  0.92026451,</span></span><br><span class="line"><span class="string">        0.95199777,  0.98373103,  1.01546429,  1.04719755,  1.07893081,</span></span><br><span class="line"><span class="string">        1.11066407,  1.14239733,  1.17413059,  1.20586385,  1.23759711,</span></span><br><span class="line"><span class="string">        1.26933037,  1.30106362,  1.33279688,  1.36453014,  1.3962634 ,</span></span><br><span class="line"><span class="string">        1.42799666,  1.45972992,  1.49146318,  1.52319644,  1.5549297 ,</span></span><br><span class="line"><span class="string">        1.58666296,  1.61839622,  1.65012947,  1.68186273,  1.71359599,</span></span><br><span class="line"><span class="string">        1.74532925,  1.77706251,  1.80879577,  1.84052903,  1.87226229,</span></span><br><span class="line"><span class="string">        1.90399555,  1.93572881,  1.96746207,  1.99919533,  2.03092858,</span></span><br><span class="line"><span class="string">        2.06266184,  2.0943951 ,  2.12612836,  2.15786162,  2.18959488,</span></span><br><span class="line"><span class="string">        2.22132814,  2.2530614 ,  2.28479466,  2.31652792,  2.34826118,</span></span><br><span class="line"><span class="string">        2.37999443,  2.41172769,  2.44346095,  2.47519421,  2.50692747,</span></span><br><span class="line"><span class="string">        2.53866073,  2.57039399,  2.60212725,  2.63386051,  2.66559377,</span></span><br><span class="line"><span class="string">        2.69732703,  2.72906028,  2.76079354,  2.7925268 ,  2.82426006,</span></span><br><span class="line"><span class="string">        2.85599332,  2.88772658,  2.91945984,  2.9511931 ,  2.98292636,</span></span><br><span class="line"><span class="string">        3.01465962,  3.04639288,  3.07812614,  3.10985939,  3.14159265])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#np.sin余弦求法</span></span><br><span class="line">np.sin(np.linspace( <span class="number">0</span>, <span class="number">2</span>*pi, <span class="number">100</span> ))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([  0.00000000e+00,   6.34239197e-02,   1.26592454e-01,</span></span><br><span class="line"><span class="string">         1.89251244e-01,   2.51147987e-01,   3.12033446e-01,</span></span><br><span class="line"><span class="string">         3.71662456e-01,   4.29794912e-01,   4.86196736e-01,</span></span><br><span class="line"><span class="string">         5.40640817e-01,   5.92907929e-01,   6.42787610e-01,</span></span><br><span class="line"><span class="string">         6.90079011e-01,   7.34591709e-01,   7.76146464e-01,</span></span><br><span class="line"><span class="string">         8.14575952e-01,   8.49725430e-01,   8.81453363e-01,</span></span><br><span class="line"><span class="string">         9.09631995e-01,   9.34147860e-01,   9.54902241e-01,</span></span><br><span class="line"><span class="string">         9.71811568e-01,   9.84807753e-01,   9.93838464e-01,</span></span><br><span class="line"><span class="string">         9.98867339e-01,   9.99874128e-01,   9.96854776e-01,</span></span><br><span class="line"><span class="string">         9.89821442e-01,   9.78802446e-01,   9.63842159e-01,</span></span><br><span class="line"><span class="string">         9.45000819e-01,   9.22354294e-01,   8.95993774e-01,</span></span><br><span class="line"><span class="string">         8.66025404e-01,   8.32569855e-01,   7.95761841e-01,</span></span><br><span class="line"><span class="string">         7.55749574e-01,   7.12694171e-01,   6.66769001e-01,</span></span><br><span class="line"><span class="string">         6.18158986e-01,   5.67059864e-01,   5.13677392e-01,</span></span><br><span class="line"><span class="string">         4.58226522e-01,   4.00930535e-01,   3.42020143e-01,</span></span><br><span class="line"><span class="string">         2.81732557e-01,   2.20310533e-01,   1.58001396e-01,</span></span><br><span class="line"><span class="string">         9.50560433e-02,   3.17279335e-02,  -3.17279335e-02,</span></span><br><span class="line"><span class="string">        -9.50560433e-02,  -1.58001396e-01,  -2.20310533e-01,</span></span><br><span class="line"><span class="string">        -2.81732557e-01,  -3.42020143e-01,  -4.00930535e-01,</span></span><br><span class="line"><span class="string">        -4.58226522e-01,  -5.13677392e-01,  -5.67059864e-01,</span></span><br><span class="line"><span class="string">        -6.18158986e-01,  -6.66769001e-01,  -7.12694171e-01,</span></span><br><span class="line"><span class="string">        -7.55749574e-01,  -7.95761841e-01,  -8.32569855e-01,</span></span><br><span class="line"><span class="string">        -8.66025404e-01,  -8.95993774e-01,  -9.22354294e-01,</span></span><br><span class="line"><span class="string">        -9.45000819e-01,  -9.63842159e-01,  -9.78802446e-01,</span></span><br><span class="line"><span class="string">        -9.89821442e-01,  -9.96854776e-01,  -9.99874128e-01,</span></span><br><span class="line"><span class="string">        -9.98867339e-01,  -9.93838464e-01,  -9.84807753e-01,</span></span><br><span class="line"><span class="string">        -9.71811568e-01,  -9.54902241e-01,  -9.34147860e-01,</span></span><br><span class="line"><span class="string">        -9.09631995e-01,  -8.81453363e-01,  -8.49725430e-01,</span></span><br><span class="line"><span class="string">        -8.14575952e-01,  -7.76146464e-01,  -7.34591709e-01,</span></span><br><span class="line"><span class="string">        -6.90079011e-01,  -6.42787610e-01,  -5.92907929e-01,</span></span><br><span class="line"><span class="string">        -5.40640817e-01,  -4.86196736e-01,  -4.29794912e-01,</span></span><br><span class="line"><span class="string">        -3.71662456e-01,  -3.12033446e-01,  -2.51147987e-01,</span></span><br><span class="line"><span class="string">        -1.89251244e-01,  -1.26592454e-01,  -6.34239197e-02,</span></span><br><span class="line"><span class="string">        -2.44929360e-16])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#矩阵的剑法运算，对应位置每个值进行相减</span></span><br><span class="line"><span class="comment">#矩阵的幂运算，对应位置每个值求幂值</span></span><br><span class="line"><span class="comment">#矩阵的比较运算，同==判断一样，一个array&lt;value或者array&gt;value均会返回一个bool矩阵</span></span><br><span class="line"><span class="comment">#the product operator * operates elementwise in NumPy arrays</span></span><br><span class="line">a = np.array( [<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>] )</span><br><span class="line">b = np.arange( <span class="number">4</span> )</span><br><span class="line"><span class="keyword">print</span> (a) </span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#b</span></span><br><span class="line">c = a-b</span><br><span class="line"><span class="keyword">print</span> (c)</span><br><span class="line">c = c <span class="number">-1</span></span><br><span class="line"><span class="keyword">print</span> (c)</span><br><span class="line">b**<span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> (b**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (a&lt;<span class="number">35</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[20 30 40 50]</span></span><br><span class="line"><span class="string">[0 1 2 3]</span></span><br><span class="line"><span class="string">[20 29 38 47]</span></span><br><span class="line"><span class="string">[19 28 37 46]</span></span><br><span class="line"><span class="string">[0 1 4 9]</span></span><br><span class="line"><span class="string">[ True  True False False]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#矩阵的乘法，可以使用A.dot(B)或者np.dot(A,B)两种方法</span></span><br><span class="line"><span class="comment">#The matrix product can be performed using the dot function or method</span></span><br><span class="line">A = np.array( [[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">               [<span class="number">0</span>,<span class="number">1</span>]] )</span><br><span class="line">B = np.array( [[<span class="number">2</span>,<span class="number">0</span>],</span><br><span class="line">               [<span class="number">3</span>,<span class="number">4</span>]] )</span><br><span class="line"><span class="keyword">print</span> (A)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (B)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (A*B)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (A.dot(B))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.dot(A, B)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1 1]</span></span><br><span class="line"><span class="string"> [0 1]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[2 0]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[2 0]</span></span><br><span class="line"><span class="string"> [0 4]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[5 4]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[5 4]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="Numpy代码学习（４）"><a href="#Numpy代码学习（４）" class="headerlink" title="Numpy代码学习（４）"></a>Numpy代码学习（４）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求e的幂，使用np.exp()，参数为array</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">B = np.arange(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (B)</span><br><span class="line"><span class="keyword">print</span> (np.exp(B))</span><br><span class="line"><span class="keyword">print</span> (np.sqrt(B))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[0 1 2]</span></span><br><span class="line"><span class="string">[ 1.          2.71828183  7.3890561 ]</span></span><br><span class="line"><span class="string">[ 0.          1.          1.41421356]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#ｒａｖｅｌ将多维矩阵展开为１维，可以使用．ｓｈａｐｅ方法将建立多维矩阵</span></span><br><span class="line"><span class="comment">#如果ｓｈａｐｅ的参数中有－１，则自动计算维度</span></span><br><span class="line"><span class="comment">#Return the floor of the input</span></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="comment">#a.shape</span></span><br><span class="line"><span class="comment">## flatten the array</span></span><br><span class="line"><span class="keyword">print</span> (a.ravel())</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line">a.shape = (<span class="number">6</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (a) </span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (a.T)</span><br><span class="line"><span class="comment">#If a dimension is given as -1 in a reshaping operation, the other dimensions are automatically calculated:</span></span><br><span class="line"><span class="comment">#a.reshape(3,-1)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 9.  1.  4.  6.]</span></span><br><span class="line"><span class="string"> [ 2.  2.  2.  2.]</span></span><br><span class="line"><span class="string"> [ 1.  0.  8.  3.]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[ 9.  1.  4.  6.  2.  2.  2.  2.  1.  0.  8.  3.]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[ 9.  1.]</span></span><br><span class="line"><span class="string"> [ 4.  6.]</span></span><br><span class="line"><span class="string"> [ 2.  2.]</span></span><br><span class="line"><span class="string"> [ 2.  2.]</span></span><br><span class="line"><span class="string"> [ 1.  0.]</span></span><br><span class="line"><span class="string"> [ 8.  3.]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[ 9.  4.  2.  2.  1.  8.]</span></span><br><span class="line"><span class="string"> [ 1.  6.  2.  2.  0.  3.]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵的拼接，列数相加，</span></span><br><span class="line"><span class="comment">#２×２的矩阵ｖｓｔａｃｋ２×２的矩阵为４×２的矩阵结果ｖ代表了垂直</span></span><br><span class="line"><span class="comment">#２×２的矩阵ｈｓｔａｃｋ２×２的矩阵为２×４的矩阵结果ｈ代表了水平</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line">b = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.vstack((a,b)))</span><br><span class="line"><span class="comment">#np.hstack((a,b))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0.  6.]</span></span><br><span class="line"><span class="string"> [ 4.  6.]]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[[ 3.  3.]</span></span><br><span class="line"><span class="string"> [ 3.  8.]]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[[ 0.  6.]</span></span><br><span class="line"><span class="string"> [ 4.  6.]</span></span><br><span class="line"><span class="string"> [ 3.  3.]</span></span><br><span class="line"><span class="string"> [ 3.  8.]]</span></span><br><span class="line"><span class="string">[[ 0.  6.  3.  3.]</span></span><br><span class="line"><span class="string"> [ 4.  6.  3.  8.]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#水平分隔矩阵的方法hsplit，垂直分隔矩阵的方法vsplit</span></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">12</span>)))</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.hsplit(a,<span class="number">3</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.hsplit(a,(<span class="number">3</span>,<span class="number">4</span>)))   <span class="comment"># Split a after the third and the fourth column</span></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">12</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">np.vsplit(a,<span class="number">3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 1.  6.  1.  0.  1.  5.  6.  3.  1.  5.  6.  9.]</span></span><br><span class="line"><span class="string"> [ 9.  2.  9.  1.  7.  3.  7.  4.  9.  3.  3.  8.]]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[array([[ 1.,  6.,  1.,  0.],</span></span><br><span class="line"><span class="string">       [ 9.,  2.,  9.,  1.]]), array([[ 1.,  5.,  6.,  3.],</span></span><br><span class="line"><span class="string">       [ 7.,  3.,  7.,  4.]]), array([[ 1.,  5.,  6.,  9.],</span></span><br><span class="line"><span class="string">       [ 9.,  3.,  3.,  8.]])]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[array([[ 1.,  6.,  1.],</span></span><br><span class="line"><span class="string">       [ 9.,  2.,  9.]]), array([[ 0.],</span></span><br><span class="line"><span class="string">       [ 1.]]), array([[ 1.,  5.,  6.,  3.,  1.,  5.,  6.,  9.],</span></span><br><span class="line"><span class="string">       [ 7.,  3.,  7.,  4.,  9.,  3.,  3.,  8.]])]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[[ 2.  8.]</span></span><br><span class="line"><span class="string"> [ 8.  6.]</span></span><br><span class="line"><span class="string"> [ 3.  8.]</span></span><br><span class="line"><span class="string"> [ 0.  2.]</span></span><br><span class="line"><span class="string"> [ 8.  2.]</span></span><br><span class="line"><span class="string"> [ 9.  4.]</span></span><br><span class="line"><span class="string"> [ 9.  2.]</span></span><br><span class="line"><span class="string"> [ 1.  9.]</span></span><br><span class="line"><span class="string"> [ 7.  6.]</span></span><br><span class="line"><span class="string"> [ 2.  3.]</span></span><br><span class="line"><span class="string"> [ 8.  5.]</span></span><br><span class="line"><span class="string"> [ 5.  5.]]</span></span><br><span class="line"><span class="string">[array([[ 2.,  8.],</span></span><br><span class="line"><span class="string">        [ 8.,  6.],</span></span><br><span class="line"><span class="string">        [ 3.,  8.],</span></span><br><span class="line"><span class="string">        [ 0.,  2.]]), array([[ 8.,  2.],</span></span><br><span class="line"><span class="string">        [ 9.,  4.],</span></span><br><span class="line"><span class="string">        [ 9.,  2.],</span></span><br><span class="line"><span class="string">        [ 1.,  9.]]), array([[ 7.,  6.],</span></span><br><span class="line"><span class="string">        [ 2.,  3.],</span></span><br><span class="line"><span class="string">        [ 8.,  5.],</span></span><br><span class="line"><span class="string">        [ 5.,  5.]])]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Simple assignments make no copy of array objects or of their data.</span></span><br><span class="line">a = np.arange(<span class="number">12</span>)</span><br><span class="line">b = a</span><br><span class="line"><span class="comment"># a and b are two names for the same ndarray object</span></span><br><span class="line"><span class="keyword">print</span> (b <span class="keyword">is</span> a)</span><br><span class="line">b.shape = <span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">print</span> (a.shape)</span><br><span class="line"><span class="keyword">print</span> (id(a))</span><br><span class="line"><span class="keyword">print</span> (id(b))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">(3, 4)</span></span><br><span class="line"><span class="string">2153802648192</span></span><br><span class="line"><span class="string">2153802648192</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#The view method creates a new array object that looks at the same data.</span></span><br><span class="line">c = a.view()</span><br><span class="line"><span class="keyword">print</span> (c <span class="keyword">is</span> a)</span><br><span class="line">c.shape = <span class="number">2</span>,<span class="number">6</span></span><br><span class="line"><span class="keyword">print</span> (a.shape)</span><br><span class="line">c[<span class="number">0</span>,<span class="number">4</span>] = <span class="number">1234</span></span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (id(a))</span><br><span class="line"><span class="keyword">print</span> (id(c))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">(3, 4)</span></span><br><span class="line"><span class="string">[[   0    1    2    3]</span></span><br><span class="line"><span class="string"> [1234    5    6    7]</span></span><br><span class="line"><span class="string"> [   8    9   10   11]]</span></span><br><span class="line"><span class="string">2153802648192</span></span><br><span class="line"><span class="string">2153802646432</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#ｃｏｐｙ方法能够完全复制到另一个变量，测试方法，ｐｒｉｎｔ（ａ　ｉｓ　ｂ），如果结果为Ｔｒｕｅ，则数据库中对应的是同一个对象</span></span><br><span class="line"><span class="comment">#The copy method makes a complete copy of the array and its data.</span></span><br><span class="line">d = a.copy() </span><br><span class="line">d <span class="keyword">is</span> a</span><br><span class="line">d[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">9999</span></span><br><span class="line"><span class="keyword">print</span> (d) </span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[9999    1    2    3]</span></span><br><span class="line"><span class="string"> [1234    5    6    7]</span></span><br><span class="line"><span class="string"> [   8    9   10   11]]</span></span><br><span class="line"><span class="string">[[   0    1    2    3]</span></span><br><span class="line"><span class="string"> [1234    5    6    7]</span></span><br><span class="line"><span class="string"> [   8    9   10   11]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="Numpy代码学习（５）"><a href="#Numpy代码学习（５）" class="headerlink" title="Numpy代码学习（５）"></a>Numpy代码学习（５）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#argmax沿着坐标横轴取最大的一个索引</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.sin(np.arange(<span class="number">20</span>)).reshape(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br><span class="line">ind = data.argmax(axis=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> (ind)</span><br><span class="line">data_max = data[ind, range(data.shape[<span class="number">1</span>])]</span><br><span class="line"><span class="keyword">print</span> (data_max)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0.          0.84147098  0.90929743  0.14112001]</span></span><br><span class="line"><span class="string"> [-0.7568025  -0.95892427 -0.2794155   0.6569866 ]</span></span><br><span class="line"><span class="string"> [ 0.98935825  0.41211849 -0.54402111 -0.99999021]</span></span><br><span class="line"><span class="string"> [-0.53657292  0.42016704  0.99060736  0.65028784]</span></span><br><span class="line"><span class="string"> [-0.28790332 -0.96139749 -0.75098725  0.14987721]]</span></span><br><span class="line"><span class="string">[2 0 3 1]</span></span><br><span class="line"><span class="string">[ 0.98935825  0.84147098  0.99060736  0.6569866 ]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">40</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">b = np.tile(a, (<span class="number">4</span>, <span class="number">3</span>)) </span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[ 0 10 20 30]</span></span><br><span class="line"><span class="string">[[ 0 10 20 30  0 10 20 30  0 10 20 30]</span></span><br><span class="line"><span class="string"> [ 0 10 20 30  0 10 20 30  0 10 20 30]</span></span><br><span class="line"><span class="string"> [ 0 10 20 30  0 10 20 30  0 10 20 30]</span></span><br><span class="line"><span class="string"> [ 0 10 20 30  0 10 20 30  0 10 20 30]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line">b = np.sort(a, axis=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#b</span></span><br><span class="line">a.sort(axis=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">a = np.array([<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">j = np.argsort(a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (j)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (a[j])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[4 3 5]</span></span><br><span class="line"><span class="string"> [1 2 1]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[3 4 5]</span></span><br><span class="line"><span class="string"> [1 1 2]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[3 4 5]</span></span><br><span class="line"><span class="string"> [1 1 2]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[2 3 1 0]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[1 2 3 4]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>转载：</p><p><a href="https://www.cnblogs.com/xieshengsen/p/6623775.html" target="_blank" rel="noopener">https://www.cnblogs.com/xieshengsen/p/6623775.html</a></p><blockquote><p> 一维数组的索引和切片</p><p># 改变数组的维度<br># reshape 改变数组维度(重新调整矩阵的行数、列数、维数。)</p><p>ravel函数完成展平</p><p>flatten 这个函数恰如其名，flatten就是展平的意思，与ravel函数的功能相同。不过，flatten函数会请求分配内存来保存结果，而ravel函数只是返回数组的一个视图（view）</p><p>shape,用元组设置维度</p><p>resize,resize和reshape函数的功能一样，但resize会直接修改所操作的数组：</p><p>数组的组合</p><p># 1. 水平组合hstack函数</p><p># 2. 垂直组合vstack函数</p><p># 3. 深度组合dstack函数(将一系列数组沿着纵轴（深度）方向进行层叠组合)</p><p># 4. 列组合,column_stack函数对于一维数组将按列方向进行组合,对于二维数组，column_stack与hstack的效果是相同</p><p># 行组合row_stack函数（对于两个一维数组，将直接层叠起来组合成一个二维数组，对于二维数组，row_stack与vstack的效果是相同的）</p><p># 分割数组</p><p># 1. 水平分割 hsplit函数</p><p># 调用split函数并指定参数axis=1</p><p># 2. 垂直分割,vsplit函数</p><p># 调用split函数并指定参数axis=0</p><p># 3. 深度分割,dsplit函数</p><p># 数组的属性</p><p># 1. ndim属性，给出数组的维数，或数组轴的个数</p><p># 2. size属性，给出数组元素的总个数</p><p># 3. itemsize属性，给出数组中的元素在内存中所占的字节数</p><p># 4. nbytes属性,整个数组所占的存储空间(itemsize和size属性值的乘积)</p><p># 5. T属性,效果和transpose函数一样</p><p># 数组的转换,tolist函数</p></blockquote></the>]]></content>
      
      <categories>
          
          <category> mlearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Numpy模块的学习(1-2)</title>
      <link href="/2018/03/14/Numpy%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0(1-2)/"/>
      <content type="html"><![CDATA[<p><strong> Numpy模块的学习(1-2)：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>介绍一个科学计算数据库的使用，它就是numpy，之后会出一个更流行的pandas模块使用简介</p><p><a href="http://www.numpy.org/" target="_blank" rel="noopener">官方网站</a></p><p>先贴上原版英文介绍震楼，英文好的同学自己翻译，不好的先去学好英语(开个玩笑)，我直接翻译一下，拿来主义直接看就是了。</p><h3 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h3><p>NumPy is the fundamental package for scientific computing with Python. It contains among other things:</p><ul><li>a powerful N-dimensional array object</li><li>sophisticated (broadcasting) functions</li><li>tools for integrating C/C++ and Fortran code</li><li>useful linear algebra, Fourier transform, and random number capabilities</li></ul><p>Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases.</p><p>NumPy is licensed under the <a href="http://www.numpy.org/license.html#license" target="_blank" rel="noopener">BSD license</a>, enabling reuse with few restrictions.</p><p>我的翻译：</p><p>numpy是利用python进行科学计算的基础包，她包含了其他一些东西：</p><ol><li>一个有力的、强大的N维数组对象；</li><li>复杂(广播)的功能；</li><li>集成C/C++、公式翻译的工具；Fortran ：FormulaTranslation的缩写，好神奇，百度了才知道</li><li>有用的线性代数，Fourier transform这个玩意儿没反应过来，傅立叶转换(大学数学没好好学)，以及随机数字的能力</li></ol><p>除了以上科学的使用，numpy还可以被逻辑数据用作一个高效的多维的容器，可以随心所遇的定义数据类型，这就使得numpy可以无缝隙、快速的集成一个巨大的数据源。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>python版本：python3.5 </p><p>操作系统：window10 </p><p>建议安装：anaconda自带 Jupyter Notebook</p><hr><h3 id="Numpy代码学习（1）"><a href="#Numpy代码学习（1）" class="headerlink" title="Numpy代码学习（1）"></a>Numpy代码学习（1）</h3><p>从txt类型的文件中获取数据源，用genfromtxt方法，不会的就用help方法打印使用方法，因为数据源为分隔符为“，”所以delimiter=”,”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>,dtype=str)</span><br><span class="line"><span class="comment">#print(type(world_alcohol))</span></span><br><span class="line"><span class="comment">#print (world_alcohol)</span></span><br><span class="line"><span class="keyword">print</span> (help(numpy.genfromtxt))</span><br></pre></td></tr></table></figure><p><img src="http://zhoujw.cn/img/20180314-1.png" alt="图1"></p><p>numpy.array可以使用列表表单或者列表中列表的形式作为入参，当输入一个列表的时候，得到的是一位数组，当输入一个列表中包含列表的入参时，得到的是一个矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#The numpy.array() function can take a list or list of lists as input. When we input a list, we get a one-dimensional array as a result:</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line"><span class="comment">#When we input a list of lists, we get a matrix as a result:</span></span><br><span class="line">matrix = numpy.array([[<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>], [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]])</span><br><span class="line"><span class="keyword">print</span> (vector)</span><br><span class="line"><span class="keyword">print</span> (matrix)</span><br></pre></td></tr></table></figure><p>我们可以使用ndarray.shape这个属性，来查看有多少个元素，对于矩阵来说，可以用同样的方法查看矩阵的维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#We can use the ndarray.shape property to figure out how many elements are in the array</span></span><br><span class="line">vector = numpy.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(vector.shape)</span><br><span class="line"><span class="comment">#For matrices, the shape property contains a tuple with 2 elements.</span></span><br><span class="line">matrix = numpy.array([[<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>]])</span><br><span class="line">print(matrix.shape)</span><br></pre></td></tr></table></figure><p>numpy中的array对象中，每一个数据都拥有相同的数据类型和结构，numpy会自动的找出最适应、最合适的数据类型，当把列表转换为数组的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment">#Each value in a NumPy array has to have the same data type</span></span><br><span class="line"><span class="comment">#NumPy will automatically figure out an appropriate data type when reading in data or converting lists to arrays. </span></span><br><span class="line"><span class="comment">#You can check the data type of a NumPy array using the dtype property.</span></span><br><span class="line">numbers = numpy.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> (numbers)</span><br><span class="line">numbers.dtype</span><br></pre></td></tr></table></figure><p>当numpy无法将一个具体的值转换为数字数据类型的时候，她会使用一个特殊的NAN值来标识，这玩意儿不是数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#When NumPy can't convert a value to a numeric data type like float or integer, it uses a special nan value that stands for Not a Number</span></span><br><span class="line"><span class="comment">#nan is the missing data</span></span><br><span class="line"><span class="comment">#1.98600000e+03 is actually 1.986 * 10 ^ 3</span></span><br><span class="line">world_alcohol</span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>, dtype=str, skip_header=<span class="number">1</span>)</span><br><span class="line">print(world_alcohol)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">    [['1986' 'Western Pacific' 'Viet Nam' 'Wine' '0']</span></span><br><span class="line"><span class="string">     ['1986' 'Americas' 'Uruguay' 'Other' '0.5']</span></span><br><span class="line"><span class="string">     ['1985' 'Africa' "Cte d'Ivoire" 'Wine' '1.62']</span></span><br><span class="line"><span class="string">     ..., </span></span><br><span class="line"><span class="string">     ['1987' 'Africa' 'Malawi' 'Other' '0.75']</span></span><br><span class="line"><span class="string">     ['1989' 'Americas' 'Bahamas' 'Wine' '1.5']</span></span><br><span class="line"><span class="string">     ['1985' 'Africa' 'Malawi' 'Spirits' '0.31']]</span></span><br><span class="line"><span class="string"> '''</span></span><br></pre></td></tr></table></figure><p>跟列表定位数据一样，array使用array[x,y]的方式获取某一个位置上的数据，代表着第x+1行数据，第y+1列数据</p><p>如果是一个一维的数据，获取方式同样参考列表切片的方式</p><p>如果是多维数据array，第一个参数为行定位，第二个代表列定位，行和列都能使用切片，中间用逗号分隔</p><p>print(matrix[:,1])就代表取所有行，第二列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">uruguay_other_1986 = world_alcohol[<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">third_country = world_alcohol[<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> (uruguay_other_1986)</span><br><span class="line"><span class="keyword">print</span> (third_country)</span><br><span class="line"><span class="comment">#out：</span></span><br><span class="line"><span class="comment">#0.5</span></span><br><span class="line"><span class="comment">#Cte d'Ivoire</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">print(vector[<span class="number">0</span>:<span class="number">3</span>])  </span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [ 5 10 15]</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[:,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [10 25 40]</span></span><br></pre></td></tr></table></figure><p>print(matrix[:,0:2])代表着取所有行数据，第1列和第2列的矩阵数据</p><p>print(matrix[1:3,0:2])代表取第2行到第3行的数据，第1列到第二列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[:,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [[ 5 10]</span></span><br><span class="line"><span class="comment">#    [20 25]</span></span><br><span class="line"><span class="comment">#    [35 40]]</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[<span class="number">1</span>:<span class="number">3</span>,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [[20 25]</span></span><br><span class="line"><span class="comment"># [35 40]]</span></span><br></pre></td></tr></table></figure><h3 id="Numpy代码学习（2）"><a href="#Numpy代码学习（2）" class="headerlink" title="Numpy代码学习（2）"></a>Numpy代码学习（2）</h3><p>如果直接用array == 某一个值，相当于每一个元素同右边值对比，如果值相等，python解释器返回true，否则返回false，类型为bool，整体为一个array</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment">#it will compare the second value to each element in the vector</span></span><br><span class="line"><span class="comment"># If the values are equal, the Python interpreter returns True; otherwise, it returns False</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">vector == <span class="number">5</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#array([ True, False, False, False], dtype=bool)</span></span><br><span class="line"></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">matrix == <span class="number">25</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    array([[False, False, False],</span></span><br><span class="line"><span class="comment">#       [False,  True, False],</span></span><br><span class="line"><span class="comment">#       [False, False, False]], dtype=bool)</span></span><br></pre></td></tr></table></figure><p>如果是一维数组，将数组和具体某一个数字的对比结果(true和false)作为参数，传回原数组，可以找出值为true的具体value</p><p>如果是多维数组，可以用同样的方法判断多维数组中某一列或者某一行的所有数据中，等于某一个值的的true和false判断，如果存在，返回True，不存在，返回False，将bool数组作为参数带入原矩阵，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Compares vector to the value 10, which generates a new Boolean vector [False, True, False, False]. It assigns this result to equal_to_ten</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten = (vector == <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> (equal_to_ten)</span><br><span class="line">print(vector[equal_to_ten])</span><br><span class="line"><span class="comment">#print(vector[False True False False])</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[False  True False False]</span></span><br><span class="line"><span class="comment">#[10]</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">             ])</span><br><span class="line">second_column_25 = (matrix[:,<span class="number">1</span>] == <span class="number">25</span>)</span><br><span class="line"><span class="keyword">print</span> (second_column_25)</span><br><span class="line">print(matrix[second_column_25, :])</span><br><span class="line"><span class="comment">#out：</span></span><br><span class="line"><span class="comment">#[False  True False]</span></span><br><span class="line"><span class="comment">#[[20 25 30]]</span></span><br></pre></td></tr></table></figure><p>还可以跟加入多种比较条件，且的公式为&amp;，获得公式为|，如果将bool数组作为入参带入并重新赋值，则将新值写入到bool数组为true的位置，变向的实现了替换的步骤，即将原有一维数组的某一个或者多个值统一替换为某一个值，如果是多维矩阵的话，注意bool数组的维度跟判断条件中的维度有关系即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#We can also perform comparisons with multiple conditions</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten_and_five = (vector == <span class="number">10</span>) &amp; (vector == <span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> (equal_to_ten_and_five)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[False False False False]</span></span><br><span class="line"></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten_or_five = (vector == <span class="number">10</span>) | (vector == <span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> (equal_to_ten_or_five)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [ True  True False False]</span></span><br><span class="line"></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten_or_five = (vector == <span class="number">10</span>) | (vector == <span class="number">5</span>)</span><br><span class="line">vector[equal_to_ten_or_five] = <span class="number">50</span></span><br><span class="line">print(vector)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[50 50 15 20]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">            [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">            [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">            [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">         ])</span><br><span class="line">second_column_25 = matrix[:,<span class="number">1</span>] == <span class="number">25</span></span><br><span class="line"><span class="keyword">print</span> (second_column_25)</span><br><span class="line">matrix[second_column_25, <span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> (matrix)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [False  True False]</span></span><br><span class="line"><span class="comment">#     [[ 5 10 15]</span></span><br><span class="line"><span class="comment">#     [20 10 30]</span></span><br><span class="line"><span class="comment">#     [35 40 45]]</span></span><br></pre></td></tr></table></figure><p>可以使用ndarray的astype方法来讲数据格式转换</p><p>可以使用ndarray的min方法来求出最小值</p><p>axis=1代表着行方向，axis=0代表着列方向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#We can convert the data type of an array with the ndarray.astype() method.</span></span><br><span class="line">vector = numpy.array([<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>])</span><br><span class="line"><span class="keyword">print</span> (vector.dtype)</span><br><span class="line"><span class="keyword">print</span> (vector)</span><br><span class="line">vector = vector.astype(float)</span><br><span class="line"><span class="keyword">print</span> (vector.dtype)</span><br><span class="line"><span class="keyword">print</span> (vector)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">        &lt;U1</span></span><br><span class="line"><span class="string">    ['1' '2' '3']</span></span><br><span class="line"><span class="string">    float64</span></span><br><span class="line"><span class="string">    [ 1.  2.  3.]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">vector.min()</span><br><span class="line"><span class="comment">#print (help(numpy.array))</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The axis dictates which dimension we perform the operation on</span></span><br><span class="line"><span class="comment">#1 means that we want to perform the operation on each row, and 0 means on each column</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">             ])</span><br><span class="line">matrix.sum(axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#matrix.sum(axis=0)</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#array([ 30,  75, 120])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">             ])</span><br><span class="line">matrix.sum(axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    array([60, 75, 90])</span></span><br></pre></td></tr></table></figure><p>numpy.isnan(world_alcohol[:,4]) 就相当于world_alcohol[:,4]==nan</p><p>求平均值可以使用array.mean（）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#replace nan value with 0</span></span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>,dtype=float)</span><br><span class="line"><span class="keyword">print</span> (world_alcohol)</span><br><span class="line">is_value_empty = numpy.isnan(world_alcohol[:,<span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> (is_value_empty)</span><br><span class="line">world_alcohol[is_value_empty, <span class="number">4</span>] = <span class="string">'0'</span></span><br><span class="line">alcohol_consumption = world_alcohol[:,<span class="number">4</span>]</span><br><span class="line">alcohol_consumption = alcohol_consumption.astype(float)</span><br><span class="line">total_alcohol = alcohol_consumption.sum()</span><br><span class="line">average_alcohol = alcohol_consumption.mean()</span><br><span class="line"><span class="keyword">print</span> (total_alcohol)</span><br><span class="line"><span class="keyword">print</span> (average_alcohol)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">[[             nan              nan              nan              nan</span></span><br><span class="line"><span class="string">               nan]</span></span><br><span class="line"><span class="string"> [  1.98600000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    0.00000000e+00]</span></span><br><span class="line"><span class="string"> [  1.98600000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    5.00000000e-01]</span></span><br><span class="line"><span class="string"> ..., </span></span><br><span class="line"><span class="string"> [  1.98700000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    7.50000000e-01]</span></span><br><span class="line"><span class="string"> [  1.98900000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    1.50000000e+00]</span></span><br><span class="line"><span class="string"> [  1.98500000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    3.10000000e-01]]</span></span><br><span class="line"><span class="string">[ True False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False  True False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string">  True False False False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False False False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True  True False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False  True False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False  True False False False False False False False False</span></span><br><span class="line"><span class="string">  True False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False False  True False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True False  True  True False False</span></span><br><span class="line"><span class="string"> False False False  True False False False False False  True False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False  True False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False False False False  True False False  True False False False False</span></span><br><span class="line"><span class="string"> False  True False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True  True False False False False</span></span><br><span class="line"><span class="string"> False  True False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string">  True False False False False False  True False False  True False False</span></span><br><span class="line"><span class="string">  True False False  True False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False  True False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False  True  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False  True False False False  True False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False  True False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False  True False False False False False False False False False</span></span><br><span class="line"><span class="string">  True  True False  True False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True  True False  True False False</span></span><br><span class="line"><span class="string">  True  True False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False  True False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False  True False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False]</span></span><br><span class="line"><span class="string">1137.78</span></span><br><span class="line"><span class="string">1.14006012024</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>bool 用一位存储的布尔类型（值为TRUE或FALSE）</li><li>inti 由所在平台决定其精度的整数（一般为int32或int64）</li><li>int8 整数，范围为128至127</li><li>int16 整数，范围为32 768至32 767</li><li>int32 整数，范围为231至231 1</li><li>int64 整数，范围为263至263 1</li><li>uint8 无符号整数，范围为0至255</li><li>uint16 无符号整数，范围为0至65 535</li><li>uint32 无符号整数，范围为0至2321</li><li>uint64 无符号整数，范围为0至2641</li><li>float16 半精度浮点数（16位）：其中用1位表示正负号，5位表示指数，10位表示尾数</li><li>float32 单精度浮点数（32位）：其中用1位表示正负号，8位表示指数，23位表示尾数</li><li>float64或float 双精度浮点数（64位）：其中用1位表示正负号，11位表示指数，52位表示尾数</li><li>complex64 复数，分别用两个32位浮点数表示实部和虚部</li><li>complex128或complex 复数，分别用两个64位浮点数表示实部和虚部</li></ol></the>]]></content>
      
      <categories>
          
          <category> mlearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>生成zabbix图表，通过微信发送群聊</title>
      <link href="/2018/03/13/%E7%94%9F%E6%88%90zabbix%E5%9B%BE%E7%89%87%E5%B9%B6%E9%80%9A%E8%BF%87%E5%BE%AE%E4%BF%A1%E5%8F%91%E9%80%81/"/>
      <content type="html"><![CDATA[<p><strong> 生成zabbix图表，通过微信发送群聊：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>生成zabbix图表，通过微信发送群聊，嘿嘿，实现了微信实时接收服务器的监控性能item<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>环境：python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.request, urllib.error, urllib.parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> itchat, time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZabbixAPI</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        cf = configparser.ConfigParser()</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">'config.ini'</span>):</span><br><span class="line">            cf.read(<span class="string">r'config.ini'</span>)</span><br><span class="line">            self.__url = cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"url"</span>)</span><br><span class="line">            self.__user= cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"user"</span>)</span><br><span class="line">            self.__password = cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"password"</span>)</span><br><span class="line">            self.__header = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json-rpc"</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'未读到文件config.ini'</span>)</span><br><span class="line">            exit()</span><br><span class="line">        self.__token_id = self.UserLogin()</span><br><span class="line">    <span class="comment">#登陆获取token</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">UserLogin</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"user.login"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"user"</span>: self.__user,</span><br><span class="line">                <span class="string">"password"</span>: self.__password</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> self.PostRequest(data)</span><br><span class="line">    <span class="comment">#推送请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostRequest</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        request = urllib.request.Request(self.__url,json.dumps(data).encode(<span class="string">'utf-8'</span>),self.__header)</span><br><span class="line">        result = urllib.request.urlopen(request)</span><br><span class="line">        response = json.loads(result.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># print response['result']</span></span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">'result'</span>]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> KeyError</span><br><span class="line">    <span class="comment">#主机列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostGet</span><span class="params">(self,hostid=None,hostip=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"host.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>:&#123;</span><br><span class="line">                <span class="string">"output"</span>:<span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"selectGroups"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"selectParentTemplates"</span>: [<span class="string">"templateid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectInterfaces"</span>: [<span class="string">"interfaceid"</span>,<span class="string">"ip"</span>],</span><br><span class="line">                <span class="string">"selectInventory"</span>: [<span class="string">"os"</span>],</span><br><span class="line">                <span class="string">"selectItems"</span>:[<span class="string">"itemid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectGraphs"</span>:[<span class="string">"graphid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectApplications"</span>:[<span class="string">"applicationid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectTriggers"</span>:[<span class="string">"triggerid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectScreens"</span>:[<span class="string">"screenid"</span>,<span class="string">"name"</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> hostid:</span><br><span class="line">            data[<span class="string">"params"</span>]=&#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#主机列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostCreate</span><span class="params">(self,hostname,hostip,groupid=None,templateid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"host.create"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"host"</span>: hostname,</span><br><span class="line">                <span class="string">"interfaces"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"main"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"useip"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"ip"</span>: hostip,</span><br><span class="line">                        <span class="string">"dns"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="string">"port"</span>: <span class="string">"10050"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"groups"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"groupid"</span>: groupid</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"templates"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"templateid"</span>: templateid</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#主机组列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostGroupGet</span><span class="params">(self,hostid=None,itemid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"hostgroup.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>:&#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#监控项列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ItemGet</span><span class="params">(self,hostid=None,itemid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"item.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#模板列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">TemplateGet</span><span class="params">(self, hostid=None,templateid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"template.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"templateids"</span>: templateid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#图像列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GraphGet</span><span class="params">(self,hostid=None,graphid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"graph.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"graphids"</span>: graphid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#历史数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">History</span><span class="params">(self,itemid,data_type)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"history.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"history"</span>: data_type,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"clock"</span>,</span><br><span class="line">                <span class="string">"sortorder"</span>: <span class="string">"DESC"</span>,</span><br><span class="line">                <span class="string">"limit"</span>: <span class="number">60</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> self.PostRequest(data)</span><br><span class="line"><span class="comment">#测试：python manager.py shell ; from ZABBIX.ZabbixAPI import * ; main()，代码修改了要ctrl+Z退出重进</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_graph</span><span class="params">(itemid,kind)</span>:</span></span><br><span class="line">    <span class="comment">#实例zabbixapi</span></span><br><span class="line">    zapi=ZabbixAPI()</span><br><span class="line">    token=zapi.UserLogin()</span><br><span class="line">    hosts=zapi.HostGet()</span><br><span class="line">    <span class="comment">#通过api获取历史数据，根据itemid号和类型,类型参考zabbix官网，测试中使用的zabbix3.0版本，https://www.zabbix.com/documentation/3.0/manual/api/reference/history/get</span></span><br><span class="line">    <span class="comment">#ParameterTypeDescription</span></span><br><span class="line">    <span class="comment">#historyintegerHistory object types to return. </span></span><br><span class="line">    <span class="comment">#Possible values: </span></span><br><span class="line">    <span class="comment">#0 - numeric float; </span></span><br><span class="line">    <span class="comment">#1 - character; </span></span><br><span class="line">    <span class="comment">#2 - log; </span></span><br><span class="line">    <span class="comment">#3 - numeric unsigned; </span></span><br><span class="line">    <span class="comment">#4 - text. </span></span><br><span class="line">    <span class="comment">#Default: 3.</span></span><br><span class="line">    host_hisdata=zapi.History(itemid,kind)</span><br><span class="line">    clock_list=[]</span><br><span class="line">    value_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> host_hisdata:</span><br><span class="line">        <span class="comment">#源数据存放</span></span><br><span class="line">        source_clock=i[<span class="string">'clock'</span>]</span><br><span class="line">        source_value=i[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">import</span> time </span><br><span class="line">        <span class="comment">#将时间戳转换为需要使用的正常日期格式</span></span><br><span class="line">        clock_array=time.localtime(int(source_clock))</span><br><span class="line">        clock_used=time.strftime(<span class="string">'%H:%M:%S'</span>,clock_array)</span><br><span class="line">        <span class="comment">#监控指标值转换为需要使用的正常格式；</span></span><br><span class="line">        value_used=int(source_value)/(<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">        <span class="comment">#分别添加到相应的列表中</span></span><br><span class="line">        clock_list.append(clock_used)</span><br><span class="line">        value_list.append(value_used)</span><br><span class="line">    <span class="comment">#定义字典存储获取到的时间和值域</span></span><br><span class="line">    data_dict=&#123;<span class="string">'clock'</span>:clock_list,<span class="string">'value'</span>:value_list&#125;</span><br><span class="line">    <span class="comment">#使用pandas的df数据框，通过字典转换并求转置  data=[n,2]，不能直接通过pd.DataFrame(data_dict['clock'],data_dict['value'])的方法初始化df数据框，会报错</span></span><br><span class="line">    data=pd.DataFrame.from_dict(data_dict,orient=<span class="string">'index'</span>).T    </span><br><span class="line">    <span class="comment">#将x，y值取出</span></span><br><span class="line">    x=range(len(data[<span class="string">'clock'</span>]))</span><br><span class="line">    y=data[<span class="string">'value'</span>]</span><br><span class="line">    <span class="comment">#画图</span></span><br><span class="line">    <span class="comment">#from matplotlib.font_manager import FontProperties</span></span><br><span class="line">    <span class="comment">#font = FontProperties(fname = "/usr/share/fonts/truetype/arphic/ukai.ttc", size=14) </span></span><br><span class="line">    <span class="comment">#plt.title(u"用户数量(Y)关于游戏消费金额(X)的分布图",fontproperties=font)</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">30</span>,<span class="number">15</span>))    </span><br><span class="line">    <span class="comment">#plt.subplot(221)</span></span><br><span class="line">    plt.plot(x,y,<span class="string">'ro-'</span>)</span><br><span class="line">    plt.title(<span class="string">'Memory'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'time'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Memory Avaliable/(M)'</span>)</span><br><span class="line">    plt.xticks(x, data[<span class="string">'clock'</span>],rotation=<span class="number">45</span>)</span><br><span class="line">    <span class="comment">#必须要先保存再show</span></span><br><span class="line">    plt.savefig(<span class="string">'result.jpg'</span>)</span><br><span class="line">    <span class="comment">#plt.show()</span></span><br><span class="line"><span class="comment">#发送微信</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_weixin</span><span class="params">(alart_img,chatroomName)</span>:</span></span><br><span class="line">    <span class="comment">#登录微信接口</span></span><br><span class="line">    itchat.auto_login(hotReload=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment">#查找微信中的指定群聊，入参为群聊名称</span></span><br><span class="line">    chatrooms=itchat.search_chatrooms(name=chatroomName)    </span><br><span class="line">    <span class="comment">#找到群聊的ID号码</span></span><br><span class="line">    chatroom_id=chatrooms[<span class="number">0</span>][<span class="string">'UserName'</span>]</span><br><span class="line">    <span class="comment">#向群聊中发送zabbix生成的图片</span></span><br><span class="line">    itchat.send_image(alart_img,chatroom_id)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    alart_img=<span class="string">'result.jpg'</span></span><br><span class="line">    chatroomName=<span class="string">u'♞魔都村民♛'</span></span><br><span class="line">    itemid=<span class="number">23316</span></span><br><span class="line">    kind=<span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment">#每隔5分钟取一次zabbix数据，画图</span></span><br><span class="line">        make_graph(itemid)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#发送微信群聊信息</span></span><br><span class="line">        send_weixin(alart_img,chatroomName)</span><br><span class="line">        <span class="comment">#循环等待</span></span><br><span class="line">        time.sleep(<span class="number">300</span>)</span><br></pre></td></tr></table></figure><p>忘记配置图了</p><p>config.ini文件和上边脚本放在同一级目录下，内容如下，IP换掉，zabbix的登录用户名如果没有改动的话就是图中所示，照抄即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[db]</span><br><span class="line">name = MY-DB</span><br><span class="line">host = 192.168.126.100</span><br><span class="line">port = 3306</span><br><span class="line">user = root</span><br><span class="line">pass = 123456</span><br><span class="line">[zabbix_server]</span><br><span class="line">url = http://192.168.1.110/zabbix/api_jsonrpc.php</span><br><span class="line">graphurl = http://192.168.1.110/zabbix/chart2.php</span><br><span class="line">itemurl = http://192.168.1.110/zabbix/chart.php</span><br><span class="line">header = &#123;&quot;Content-Type&quot;: &quot;application/json&quot;&#125;</span><br><span class="line">user = Admin</span><br><span class="line">password = zabbix</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Matplotlib模块的学习</title>
      <link href="/2018/03/12/Matplotlib%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p><strong> Matplotlib模块的学习：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>Python中最著名的绘图系统，很多其他的绘图例如seaborn（针对pandas绘图而来）也是由其封装而成。创世人John Hunter于2012年离世。这个绘图系统操作起来很复杂，和R的ggplot,lattice绘图相比显得望而却步</p><p>需要掌握的是：</p><ol><li>散点图，折线图，条形图，直方图，饼状图，箱形图的绘制。</li><li>绘图的三大系统：pyplot，pylab(不推荐)，面向对象</li><li>坐标轴的调整，添加文字注释，区域填充，及特殊图形patches的使用</li><li>金融的同学注意的是：可以直接调用Yahoo财经数据绘图（真。。。）</li></ol><p><a href="http://python.jobbole.com/87471/" target="_blank" rel="noopener">参考链接</a></p><p><a href="https://matplotlib.org/" target="_blank" rel="noopener">官方网站</a>  </p><p>先贴上原版英文介绍震楼，英文好的同学自己翻译，不好的先去学好英语(开个玩笑)，我直接翻译一下，拿来主义直接看就是了。</p><h3 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h3><p>Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and <a href="http://ipython.org/" target="_blank" rel="noopener">IPython</a> shells, the <a href="http://jupyter.org/" target="_blank" rel="noopener">Jupyter</a> notebook, web application servers, and four graphical user interface toolkits.</p><p>Matplotlib tries to make easy things easy and hard things possible. You can generate plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc., with just a few lines of code. For examples, see the <a href="https://matplotlib.org/tutorials/introductory/sample_plots.html" target="_blank" rel="noopener">sample plots</a> and <a href="https://matplotlib.org/gallery/index.html" target="_blank" rel="noopener">thumbnail gallery</a>.</p><p>For simple plotting the <code>pyplot</code> module provides a MATLAB-like interface, particularly when combined with IPython. For the power user, you have full control of line styles, font properties, axes properties, etc, via an object oriented interface or via a set of functions familiar to MATLAB users.</p><p>我的翻译：</p><p>懒了，抽空补上</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>python版本：python3.5 </p><p>操作系统：window10 </p><p>建议安装：anaconda自带 Jupyter Notebook</p><hr><h3 id="Matplotlib代码学习（1）"><a href="#Matplotlib代码学习（1）" class="headerlink" title="Matplotlib代码学习（1）"></a>Matplotlib代码学习（1）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">unrate = pd.read_csv(<span class="string">'unrate.csv'</span>)</span><br><span class="line">unrate[<span class="string">'DATE'</span>] = pd.to_datetime(unrate[<span class="string">'DATE'</span>])</span><br><span class="line">print(unrate.head(<span class="number">12</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">         DATE  VALUE</span></span><br><span class="line"><span class="string">0  1948-01-01    3.4</span></span><br><span class="line"><span class="string">1  1948-02-01    3.8</span></span><br><span class="line"><span class="string">2  1948-03-01    4.0</span></span><br><span class="line"><span class="string">3  1948-04-01    3.9</span></span><br><span class="line"><span class="string">4  1948-05-01    3.5</span></span><br><span class="line"><span class="string">5  1948-06-01    3.6</span></span><br><span class="line"><span class="string">6  1948-07-01    3.6</span></span><br><span class="line"><span class="string">7  1948-08-01    3.9</span></span><br><span class="line"><span class="string">8  1948-09-01    3.8</span></span><br><span class="line"><span class="string">9  1948-10-01    3.7</span></span><br><span class="line"><span class="string">10 1948-11-01    3.8</span></span><br><span class="line"><span class="string">11 1948-12-01    4.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#%matplotlib inline</span></span><br><span class="line"><span class="comment">#Using the different pyplot functions, we can create, customize, and display a plot. For example, we can use 2 functions to :</span></span><br><span class="line">plt.plot()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">first_twelve = unrate[<span class="number">0</span>:<span class="number">12</span>]</span><br><span class="line">plt.plot(first_twelve[<span class="string">'DATE'</span>], first_twelve[<span class="string">'VALUE'</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#While the y-axis looks fine, the x-axis tick labels are too close together and are unreadable</span></span><br><span class="line"><span class="comment">#We can rotate the x-axis tick labels by 90 degrees so they don't overlap</span></span><br><span class="line"><span class="comment">#We can specify degrees of rotation using a float or integer value.</span></span><br><span class="line">plt.plot(first_twelve[<span class="string">'DATE'</span>], first_twelve[<span class="string">'VALUE'</span>])</span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line"><span class="comment">#print help(plt.xticks)</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#xlabel(): accepts a string value, which gets set as the x-axis label.</span></span><br><span class="line"><span class="comment">#ylabel(): accepts a string value, which is set as the y-axis label.</span></span><br><span class="line"><span class="comment">#title(): accepts a string value, which is set as the plot title.</span></span><br><span class="line"></span><br><span class="line">plt.plot(first_twelve[<span class="string">'DATE'</span>], first_twelve[<span class="string">'VALUE'</span>])</span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Month'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Unemployment Rate'</span>)</span><br><span class="line">plt.title(<span class="string">'Monthly Unemployment Trends, 1948'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><hr><h3 id="Matplotlib代码学习（2）"><a href="#Matplotlib代码学习（2）" class="headerlink" title="Matplotlib代码学习（2）"></a>Matplotlib代码学习（2）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mport pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">unrate = pd.read_csv(<span class="string">'unrate.csv'</span>)</span><br><span class="line">unrate[<span class="string">'DATE'</span>] = pd.to_datetime(unrate[<span class="string">'DATE'</span>])</span><br><span class="line">first_twelve = unrate[<span class="number">0</span>:<span class="number">12</span>]</span><br><span class="line">plt.plot(first_twelve[<span class="string">'DATE'</span>], first_twelve[<span class="string">'VALUE'</span>])</span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Month'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Unemployment Rate'</span>)</span><br><span class="line">plt.title(<span class="string">'Monthly Unemployment Trends, 1948'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#add_subplot(first,second,index) first means number of Row,second means number of Column.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">ax3 = fig.add_subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-2.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#fig = plt.figure()</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">ax1.plot(np.random.randint(<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>), np.arange(<span class="number">5</span>))</span><br><span class="line">ax2.plot(np.arange(<span class="number">10</span>)*<span class="number">3</span>, np.arange(<span class="number">10</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-3.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unrate[<span class="string">'MONTH'</span>] = unrate[<span class="string">'DATE'</span>].dt.month</span><br><span class="line">unrate[<span class="string">'MONTH'</span>] = unrate[<span class="string">'DATE'</span>].dt.month</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(unrate[<span class="number">0</span>:<span class="number">12</span>][<span class="string">'MONTH'</span>], unrate[<span class="number">0</span>:<span class="number">12</span>][<span class="string">'VALUE'</span>], c=<span class="string">'red'</span>)</span><br><span class="line">plt.plot(unrate[<span class="number">12</span>:<span class="number">24</span>][<span class="string">'MONTH'</span>], unrate[<span class="number">12</span>:<span class="number">24</span>][<span class="string">'VALUE'</span>], c=<span class="string">'blue'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-4.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'orange'</span>, <span class="string">'black'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    start_index = i*<span class="number">12</span></span><br><span class="line">    end_index = (i+<span class="number">1</span>)*<span class="number">12</span></span><br><span class="line">    subset = unrate[start_index:end_index]</span><br><span class="line">    plt.plot(subset[<span class="string">'MONTH'</span>], subset[<span class="string">'VALUE'</span>], c=colors[i])</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-5.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'orange'</span>, <span class="string">'black'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    start_index = i*<span class="number">12</span></span><br><span class="line">    end_index = (i+<span class="number">1</span>)*<span class="number">12</span></span><br><span class="line">    subset = unrate[start_index:end_index]</span><br><span class="line">    label = str(<span class="number">1948</span> + i)</span><br><span class="line">    plt.plot(subset[<span class="string">'MONTH'</span>], subset[<span class="string">'VALUE'</span>], c=colors[i], label=label)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"><span class="comment">#print (help(plt.legend))</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-6.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'orange'</span>, <span class="string">'black'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    start_index = i*<span class="number">12</span></span><br><span class="line">    end_index = (i+<span class="number">1</span>)*<span class="number">12</span></span><br><span class="line">    subset = unrate[start_index:end_index]</span><br><span class="line">    label = str(<span class="number">1948</span> + i)</span><br><span class="line">    plt.plot(subset[<span class="string">'MONTH'</span>], subset[<span class="string">'VALUE'</span>], c=colors[i], label=label)</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Month, Integer'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Unemployment Rate, Percent'</span>)</span><br><span class="line">plt.title(<span class="string">'Monthly Unemployment Trends, 1948-1952'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-7.png" alt=""></p><hr><h3 id="Matplotlib代码学习（3）"><a href="#Matplotlib代码学习（3）" class="headerlink" title="Matplotlib代码学习（3）"></a>Matplotlib代码学习（3）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">reviews = pd.read_csv(<span class="string">'fandango_scores.csv'</span>)</span><br><span class="line">cols = [<span class="string">'FILM'</span>, <span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>, <span class="string">'Fandango_Stars'</span>]</span><br><span class="line">norm_reviews = reviews[cols]</span><br><span class="line">print(norm_reviews[:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                             FILM  RT_user_norm  Metacritic_user_nom  \</span><br><span class="line">0  Avengers: Age of Ultron (2015)           4.3                 3.55   </span><br><span class="line">1               Cinderella (2015)           4.0                 3.75   </span><br><span class="line">2                  Ant-Man (2015)           4.5                 4.05   </span><br><span class="line"></span><br><span class="line">   IMDB_norm  Fandango_Ratingvalue  Fandango_Stars  </span><br><span class="line">0       3.90                   4.5             5.0  </span><br><span class="line">1       3.55                   4.5             5.0  </span><br><span class="line">2       3.90                   4.5             5.0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> arange</span><br><span class="line"><span class="comment">#The Axes.bar() method has 2 required parameters, left and height. </span></span><br><span class="line"><span class="comment">#We use the left parameter to specify the x coordinates of the left sides of the bar. </span></span><br><span class="line"><span class="comment">#We use the height parameter to specify the height of each bar</span></span><br><span class="line">num_cols = [<span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>, <span class="string">'Fandango_Stars'</span>]</span><br><span class="line"></span><br><span class="line">bar_heights = norm_reviews.ix[<span class="number">0</span>, num_cols].values</span><br><span class="line"><span class="keyword">print</span> (bar_heights)</span><br><span class="line">bar_positions = arange(<span class="number">5</span>) + <span class="number">0.75</span></span><br><span class="line"><span class="keyword">print</span> (bar_positions)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.bar(bar_positions, bar_heights, <span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-8.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#By default, matplotlib sets the x-axis tick labels to the integer values the bars </span></span><br><span class="line"><span class="comment">#spanned on the x-axis (from 0 to 6). We only need tick labels on the x-axis where the bars are positioned. </span></span><br><span class="line"><span class="comment">#We can use Axes.set_xticks() to change the positions of the ticks to [1, 2, 3, 4, 5]:</span></span><br><span class="line"></span><br><span class="line">num_cols = [<span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>, <span class="string">'Fandango_Stars'</span>]</span><br><span class="line">bar_heights = norm_reviews.ix[<span class="number">0</span>, num_cols].values</span><br><span class="line">bar_positions = arange(<span class="number">5</span>) + <span class="number">0.75</span></span><br><span class="line">tick_positions = range(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line">ax.bar(bar_positions, bar_heights, <span class="number">0.5</span>)</span><br><span class="line">ax.set_xticks(tick_positions)</span><br><span class="line">ax.set_xticklabels(num_cols, rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xlabel(<span class="string">'Rating Source'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Average Rating'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Average User Rating For Avengers: Age of Ultron (2015)'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-9.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> arange</span><br><span class="line">num_cols = [<span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>, <span class="string">'Fandango_Stars'</span>]</span><br><span class="line"></span><br><span class="line">bar_widths = norm_reviews.ix[<span class="number">0</span>, num_cols].values</span><br><span class="line">bar_positions = arange(<span class="number">5</span>) + <span class="number">0.75</span></span><br><span class="line">tick_positions = range(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.barh(bar_positions, bar_widths, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">ax.set_yticks(tick_positions)</span><br><span class="line">ax.set_yticklabels(num_cols)</span><br><span class="line">ax.set_ylabel(<span class="string">'Rating Source'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'Average Rating'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Average User Rating For Avengers: Age of Ultron (2015)'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-10.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Let's look at a plot that can help us visualize many points.</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.scatter(norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>], norm_reviews[<span class="string">'RT_user_norm'</span>])</span><br><span class="line">ax.set_xlabel(<span class="string">'Fandango'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Rotten Tomatoes'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-11.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Switching Axes</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">ax1.scatter(norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>], norm_reviews[<span class="string">'RT_user_norm'</span>])</span><br><span class="line">ax1.set_xlabel(<span class="string">'Fandango'</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'Rotten Tomatoes'</span>)</span><br><span class="line">ax2.scatter(norm_reviews[<span class="string">'RT_user_norm'</span>], norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>])</span><br><span class="line">ax2.set_xlabel(<span class="string">'Rotten Tomatoes'</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">'Fandango'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-12.png" alt=""></p><hr><h3 id="Matplotlib代码学习（4）"><a href="#Matplotlib代码学习（4）" class="headerlink" title="Matplotlib代码学习（4）"></a>Matplotlib代码学习（4）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">reviews = pd.read_csv(<span class="string">'fandango_scores.csv'</span>)</span><br><span class="line">cols = [<span class="string">'FILM'</span>, <span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>]</span><br><span class="line">norm_reviews = reviews[cols]</span><br><span class="line">print(norm_reviews[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">                             FILM  RT_user_norm  Metacritic_user_nom  \</span><br><span class="line">0  Avengers: Age of Ultron (2015)           4.3                 3.55   </span><br><span class="line">1               Cinderella (2015)           4.0                 3.75   </span><br><span class="line">2                  Ant-Man (2015)           4.5                 4.05   </span><br><span class="line">3          Do You Believe? (2015)           4.2                 2.35   </span><br><span class="line">4   Hot Tub Time Machine 2 (2015)           1.4                 1.70   </span><br><span class="line"></span><br><span class="line">   IMDB_norm  Fandango_Ratingvalue  </span><br><span class="line">0       3.90                   4.5  </span><br><span class="line">1       3.55                   4.5  </span><br><span class="line">2       3.90                   4.5  </span><br><span class="line">3       2.70                   4.5  </span><br><span class="line">4       2.55                   3.0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fandango_distribution = norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>].value_counts()</span><br><span class="line">fandango_distribution = fandango_distribution.sort_index()</span><br><span class="line"></span><br><span class="line">imdb_distribution = norm_reviews[<span class="string">'IMDB_norm'</span>].value_counts()</span><br><span class="line">imdb_distribution = imdb_distribution.sort_index()</span><br><span class="line"></span><br><span class="line">print(fandango_distribution)</span><br><span class="line">print(imdb_distribution)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">2.7     2</span><br><span class="line">2.8     2</span><br><span class="line">2.9     5</span><br><span class="line">3.0     4</span><br><span class="line">3.1     3</span><br><span class="line">3.2     5</span><br><span class="line">3.3     4</span><br><span class="line">3.4     9</span><br><span class="line">3.5     9</span><br><span class="line">3.6     8</span><br><span class="line">3.7     9</span><br><span class="line">3.8     5</span><br><span class="line">3.9    12</span><br><span class="line">4.0     7</span><br><span class="line">4.1    16</span><br><span class="line">4.2    12</span><br><span class="line">4.3    11</span><br><span class="line">4.4     7</span><br><span class="line">4.5     9</span><br><span class="line">4.6     4</span><br><span class="line">4.8     3</span><br><span class="line">Name: Fandango_Ratingvalue, dtype: int64</span><br><span class="line">2.00     1</span><br><span class="line">2.10     1</span><br><span class="line">2.15     1</span><br><span class="line">2.20     1</span><br><span class="line">2.30     2</span><br><span class="line">2.45     2</span><br><span class="line">2.50     1</span><br><span class="line">2.55     1</span><br><span class="line">2.60     2</span><br><span class="line">2.70     4</span><br><span class="line">2.75     5</span><br><span class="line">2.80     2</span><br><span class="line">2.85     1</span><br><span class="line">2.90     1</span><br><span class="line">2.95     3</span><br><span class="line">3.00     2</span><br><span class="line">3.05     4</span><br><span class="line">3.10     1</span><br><span class="line">3.15     9</span><br><span class="line">3.20     6</span><br><span class="line">3.25     4</span><br><span class="line">3.30     9</span><br><span class="line">3.35     7</span><br><span class="line">3.40     1</span><br><span class="line">3.45     7</span><br><span class="line">3.50     4</span><br><span class="line">3.55     7</span><br><span class="line">3.60    10</span><br><span class="line">3.65     5</span><br><span class="line">3.70     8</span><br><span class="line">3.75     6</span><br><span class="line">3.80     3</span><br><span class="line">3.85     4</span><br><span class="line">3.90     9</span><br><span class="line">3.95     2</span><br><span class="line">4.00     1</span><br><span class="line">4.05     1</span><br><span class="line">4.10     4</span><br><span class="line">4.15     1</span><br><span class="line">4.20     2</span><br><span class="line">4.30     1</span><br><span class="line">Name: IMDB_norm, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="comment">#ax.hist(norm_reviews['Fandango_Ratingvalue'])</span></span><br><span class="line"><span class="comment">#ax.hist(norm_reviews['Fandango_Ratingvalue'],bins=20)</span></span><br><span class="line">ax.hist(norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>], range=(<span class="number">4</span>, <span class="number">5</span>),bins=<span class="number">20</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-13.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>,<span class="number">20</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">ax3 = fig.add_subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">ax4 = fig.add_subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">ax1.hist(norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>], bins=<span class="number">20</span>, range=(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">ax1.set_title(<span class="string">'Distribution of Fandango Ratings'</span>)</span><br><span class="line">ax1.set_ylim(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">ax2.hist(norm_reviews[<span class="string">'RT_user_norm'</span>], <span class="number">20</span>, range=(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">ax2.set_title(<span class="string">'Distribution of Rotten Tomatoes Ratings'</span>)</span><br><span class="line">ax2.set_ylim(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">ax3.hist(norm_reviews[<span class="string">'Metacritic_user_nom'</span>], <span class="number">20</span>, range=(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">ax3.set_title(<span class="string">'Distribution of Metacritic Ratings'</span>)</span><br><span class="line">ax3.set_ylim(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">ax4.hist(norm_reviews[<span class="string">'IMDB_norm'</span>], <span class="number">20</span>, range=(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">ax4.set_title(<span class="string">'Distribution of IMDB Ratings'</span>)</span><br><span class="line">ax4.set_ylim(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-14.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.boxplot(norm_reviews[<span class="string">'RT_user_norm'</span>])</span><br><span class="line">ax.set_xticklabels([<span class="string">'Rotten Tomatoes'</span>])</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-15.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_cols = [<span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>]</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.boxplot(norm_reviews[num_cols].values)</span><br><span class="line">ax.set_xticklabels(num_cols, rotation=<span class="number">90</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-16.png" alt=""></p><hr><h3 id="Matplotlib代码学习（5）"><a href="#Matplotlib代码学习（5）" class="headerlink" title="Matplotlib代码学习（5）"></a>Matplotlib代码学习（5）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">women_degrees = pd.read_csv(<span class="string">'percent-bachelors-degrees-women-usa.csv'</span>)</span><br><span class="line">plt.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[<span class="string">'Biology'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-20.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#100-women_degrees means men</span></span><br><span class="line">plt.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[<span class="string">'Biology'</span>], c=<span class="string">'blue'</span>, label=<span class="string">'Women'</span>)</span><br><span class="line">plt.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[<span class="string">'Biology'</span>], c=<span class="string">'green'</span>, label=<span class="string">'Men'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.title(<span class="string">'Percentage of Biology Degrees Awarded By Gender'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-21.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fig, ax = plt.subplots()</span></span><br><span class="line"><span class="comment"># Add your code here.</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[<span class="string">'Biology'</span>], label=<span class="string">'Women'</span>)</span><br><span class="line">ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[<span class="string">'Biology'</span>], label=<span class="string">'Men'</span>)</span><br><span class="line"></span><br><span class="line">ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line">ax.set_title(<span class="string">'Percentage of Biology Degrees Awarded By Gender'</span>)</span><br><span class="line">ax.legend(loc=<span class="string">"upper right"</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-17.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[<span class="string">'Biology'</span>], c=<span class="string">'blue'</span>, label=<span class="string">'Women'</span>)</span><br><span class="line">ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[<span class="string">'Biology'</span>], c=<span class="string">'green'</span>, label=<span class="string">'Men'</span>)</span><br><span class="line">ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">    spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line"><span class="comment"># End solution code.</span></span><br><span class="line">ax.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-18.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">major_cats = [<span class="string">'Biology'</span>, <span class="string">'Computer Science'</span>, <span class="string">'Engineering'</span>, <span class="string">'Math and Statistics'</span>]</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,sp+<span class="number">1</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[major_cats[sp]], c=<span class="string">'blue'</span>, label=<span class="string">'Women'</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[major_cats[sp]], c=<span class="string">'green'</span>, label=<span class="string">'Men'</span>)</span><br><span class="line">    <span class="comment"># Add your code here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calling pyplot.legend() here will add the legend to the last subplot that was created.</span></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">major_cats = [<span class="string">'Biology'</span>, <span class="string">'Computer Science'</span>, <span class="string">'Engineering'</span>, <span class="string">'Math and Statistics'</span>]</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,sp+<span class="number">1</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[major_cats[sp]], c=<span class="string">'blue'</span>, label=<span class="string">'Women'</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[major_cats[sp]], c=<span class="string">'green'</span>, label=<span class="string">'Men'</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(major_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calling pyplot.legend() here will add the legend to the last subplot that was created.</span></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-19.png" alt=""></p><p><img src="/2018/03/12/Matplotlib模块的学习/plt-22.png" alt=""></p><hr><h3 id="Matplotlib代码学习（6）"><a href="#Matplotlib代码学习（6）" class="headerlink" title="Matplotlib代码学习（6）"></a>Matplotlib代码学习（6）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Color</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">women_degrees = pd.read_csv(<span class="string">'percent-bachelors-degrees-women-usa.csv'</span>)</span><br><span class="line">major_cats = [<span class="string">'Biology'</span>, <span class="string">'Computer Science'</span>, <span class="string">'Engineering'</span>, <span class="string">'Math and Statistics'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cb_dark_blue = (<span class="number">0</span>/<span class="number">255</span>, <span class="number">107</span>/<span class="number">255</span>, <span class="number">164</span>/<span class="number">255</span>)</span><br><span class="line">cb_orange = (<span class="number">255</span>/<span class="number">255</span>, <span class="number">128</span>/<span class="number">255</span>, <span class="number">14</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,sp+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># The color for each line is assigned here.</span></span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[major_cats[sp]], c=cb_dark_blue, label=<span class="string">'Women'</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[major_cats[sp]], c=cb_orange, label=<span class="string">'Men'</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(major_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-23.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Setting Line Width</span></span><br><span class="line">cb_dark_blue = (<span class="number">0</span>/<span class="number">255</span>, <span class="number">107</span>/<span class="number">255</span>, <span class="number">164</span>/<span class="number">255</span>)</span><br><span class="line">cb_orange = (<span class="number">255</span>/<span class="number">255</span>, <span class="number">128</span>/<span class="number">255</span>, <span class="number">14</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,sp+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Set the line width when specifying how each line should look.</span></span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[major_cats[sp]], c=cb_dark_blue, label=<span class="string">'Women'</span>, linewidth=<span class="number">10</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[major_cats[sp]], c=cb_orange, label=<span class="string">'Men'</span>, linewidth=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(major_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-24.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">stem_cats = [<span class="string">'Engineering'</span>, <span class="string">'Computer Science'</span>, <span class="string">'Psychology'</span>, <span class="string">'Biology'</span>, <span class="string">'Physical Sciences'</span>, <span class="string">'Math and Statistics'</span>]</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">18</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">1</span>,<span class="number">6</span>,sp+<span class="number">1</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[stem_cats[sp]], c=cb_dark_blue, label=<span class="string">'Women'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[stem_cats[sp]], c=cb_orange, label=<span class="string">'Men'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(stem_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-25.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">18</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">1</span>,<span class="number">6</span>,sp+<span class="number">1</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[stem_cats[sp]], c=cb_dark_blue, label=<span class="string">'Women'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[stem_cats[sp]], c=cb_orange, label=<span class="string">'Men'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(stem_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">18</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">1</span>,<span class="number">6</span>,sp+<span class="number">1</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[stem_cats[sp]], c=cb_dark_blue, label=<span class="string">'Women'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[stem_cats[sp]], c=cb_orange, label=<span class="string">'Men'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(stem_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> sp == <span class="number">0</span>:</span><br><span class="line">        ax.text(<span class="number">2005</span>, <span class="number">87</span>, <span class="string">'Men'</span>)</span><br><span class="line">        ax.text(<span class="number">2002</span>, <span class="number">8</span>, <span class="string">'Women'</span>)</span><br><span class="line">    <span class="keyword">elif</span> sp == <span class="number">5</span>:</span><br><span class="line">        ax.text(<span class="number">2005</span>, <span class="number">62</span>, <span class="string">'Men'</span>)</span><br><span class="line">        ax.text(<span class="number">2001</span>, <span class="number">35</span>, <span class="string">'Women'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-26.png" alt=""></p><hr><h3 id="Matplotlib代码学习（7）"><a href="#Matplotlib代码学习（7）" class="headerlink" title="Matplotlib代码学习（7）"></a>Matplotlib代码学习（7）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">titanic = pd.read_csv(<span class="string">'train.csv'</span>)</span><br><span class="line"><span class="keyword">print</span> (titanic.head())</span><br><span class="line">cols = [<span class="string">'Survived'</span>, <span class="string">'Pclass'</span>, <span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'SibSp'</span>, <span class="string">'Parch'</span>, <span class="string">'Fare'</span>, <span class="string">'Embarked'</span>]</span><br><span class="line">titanic = titanic[cols].dropna()</span><br><span class="line"><span class="keyword">print</span> (titanic.head())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">‘’PassengerId  Survived  Pclass  \</span></span><br><span class="line"><span class="string">0            1         0       3   </span></span><br><span class="line"><span class="string">1            2         1       1   </span></span><br><span class="line"><span class="string">2            3         1       3   </span></span><br><span class="line"><span class="string">3            4         1       1   </span></span><br><span class="line"><span class="string">4            5         0       3   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                                                Name     Sex   Age  SibSp  \</span></span><br><span class="line"><span class="string">0                            Braund, Mr. Owen Harris    male  22.0      1   </span></span><br><span class="line"><span class="string">1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   </span></span><br><span class="line"><span class="string">2                             Heikkinen, Miss. Laina  female  26.0      0   </span></span><br><span class="line"><span class="string">3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   </span></span><br><span class="line"><span class="string">4                           Allen, Mr. William Henry    male  35.0      0   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Parch            Ticket     Fare Cabin Embarked  </span></span><br><span class="line"><span class="string">0      0         A/5 21171   7.2500   NaN        S  </span></span><br><span class="line"><span class="string">1      0          PC 17599  71.2833   C85        C  </span></span><br><span class="line"><span class="string">2      0  STON/O2. 3101282   7.9250   NaN        S  </span></span><br><span class="line"><span class="string">3      0            113803  53.1000  C123        S  </span></span><br><span class="line"><span class="string">4      0            373450   8.0500   NaN        S  </span></span><br><span class="line"><span class="string">   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked</span></span><br><span class="line"><span class="string">0         0       3    male  22.0      1      0   7.2500        S</span></span><br><span class="line"><span class="string">1         1       1  female  38.0      1      0  71.2833        C</span></span><br><span class="line"><span class="string">2         1       3  female  26.0      0      0   7.9250        S</span></span><br><span class="line"><span class="string">3         1       1  female  35.0      1      0  53.1000        S</span></span><br><span class="line"><span class="string">4         0       3    male  35.0      0      0   8.0500        S</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">sns.distplot(titanic[<span class="string">'Age'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-27.png" alt=""></p></the>]]></content>
      
      <categories>
          
          <category> mlearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 模块使用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dbfpy模块的使用案例-python2.7</title>
      <link href="/2017/09/10/dbfpy/"/>
      <content type="html"><![CDATA[<p><strong> dbfpy模块的使用案例-python2.7：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>前两天写的一段处理dbf文件的案例，用于删除类dbf文件内容，提供了一种新思路。<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>对于每日接收的dbf格式的文件(以.dbf后缀的文件)或者是每日接收的日期结尾的文件，例如XXXX.dbf或者XXXX.0310，</p><p>对于这种实质上dbf内容的文件，需要进行删除操作；</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>百度python能够直接使用的模块无果，比较之下dbfpy文件能够较好的处理dbf文件，dbfpy文件能够实现读取现有的dbf文件内容、字段名称、格式以及长度，以及新写一个新的文件，为了实现删除操作，换一种思路如下:</p><ol><li>读取所有的源文件数据</li><li>去除不要的数据，留下想要的数据，即删除操作</li><li>新建一个新文件，数据结构和字段、长度均为源文件结构</li><li>将第二步留下的数据写入到第三步中产生的新文件中</li></ol><p>好了，需求和分析完成，贴上代码</p><p>因为dbfpy模块是python27下的，因此以下代码实在python2.7下运行的</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> dbfpy <span class="keyword">import</span> dbf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h4 id="重建函数"><a href="#重建函数" class="headerlink" title="重建函数"></a>重建函数</h4><p>定义一个重建函数，将一个文件名称传入函数，例如将XXXXX.dbf作为入参传入函数；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rebulid_dbf</span><span class="params">(x)</span>:</span></span><br><span class="line">    sourcefile = dbf.Dbf(x, <span class="keyword">True</span>)</span><br><span class="line">    sourcefield_name=sourcefile.fieldNames</span><br><span class="line">    sourcefield=sourcefile.header.fields</span><br><span class="line">    ziduan=[]</span><br><span class="line">    leixing=[]</span><br><span class="line">    changdu=[]</span><br><span class="line">    jingdu=[]</span><br><span class="line">    <span class="comment">#n=0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sourcefield:</span><br><span class="line">        k = re.split(<span class="string">' +'</span>, str(i))</span><br><span class="line">        <span class="comment">#print k[1] ,len(k)</span></span><br><span class="line">        ziduan.append(k[<span class="number">0</span>])</span><br><span class="line">        leixing.append(k[<span class="number">1</span>])</span><br><span class="line">        changdu.append(k[<span class="number">2</span>])</span><br><span class="line">        jingdu.append(k[<span class="number">3</span>])</span><br><span class="line">    a = []</span><br><span class="line">    b = []</span><br><span class="line">    time=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="string">'op_ccbdjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf file</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_hyccjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf file</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_jsmxjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_zqjsjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_JSMX'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_JSMX'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_HYCC'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_HYCC'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_HYCB'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_HYCB'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br></pre></td></tr></table></figure><h4 id="预处理、中转函数"><a href="#预处理、中转函数" class="headerlink" title="预处理、中转函数"></a>预处理、中转函数</h4><p>此函数主要用于将原文件拷贝到指定的一个中转mid目录下进行操作，并将处理完的结果拷贝回原目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sett_file</span><span class="params">(x,insett_file,insett_path,location)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> location==<span class="string">'SH'</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> insett_file:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> x:</span><br><span class="line">                os.chdir(insett_path)</span><br><span class="line">                j_f=j+<span class="string">'.dbf'</span></span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">in</span> i <span class="keyword">and</span> i != j_f:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'-------------上海-------------------'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'1、今日存在%s文件，现在拷贝文件到mid.....'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\mid\%s\%s &gt;&gt; ..\mid\%s\copy_%s.log"</span> % (i,YYYYMMDD,i,YYYYMMDD,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'2、%s文件已拷贝至mid'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % j</span><br><span class="line">                    os.chdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">                    <span class="keyword">if</span> os.path.exists(j_f):</span><br><span class="line">                        os.system(<span class="string">"del %s"</span> % j_f)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy ..\..\%s\%s .\%s &gt;&gt; copy_%s.log"</span> % (YYYYMMDD,i,j_f,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'3、mid中文件已拷贝为%s格式供使用'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) %j_f</span><br><span class="line">                    rebulid_dbf(j_f)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'4、mid中文件已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\..\%s\%s  /y &gt;&gt; copy_%s.log"</span> % (<span class="string">'MID_FILE_'</span>+j_f,YYYYMMDD,i,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'5、清算目录下的文件%s已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">    <span class="keyword">elif</span> location==<span class="string">'SZ'</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> insett_file:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> x:</span><br><span class="line">                os.chdir(insett_path)</span><br><span class="line">                j_f_big = j+MMDD+<span class="string">'.DBF'</span></span><br><span class="line">                j_f_small= j+MMDD+<span class="string">'.dbf'</span></span><br><span class="line">                <span class="comment">#print j_f,i</span></span><br><span class="line">                <span class="keyword">if</span> i == j_f_big <span class="keyword">or</span> i == j_f_small:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'-------------深圳-------------------'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'1、今日存在%s文件，现在拷贝文件到mid.....'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\mid\%s\%s &gt;&gt; ..\mid\%s\copy_%s.log"</span> % (i,YYYYMMDD,i,YYYYMMDD,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'2、%s文件已拷贝至mid'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % j</span><br><span class="line">                    os.chdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">                    rebulid_dbf(j_f_big)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'3、mid中文件已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\..\%s\%s  /y &gt;&gt; copy_%s.log"</span> % (<span class="string">'MID_FILE_'</span>+j_f_big,YYYYMMDD,i,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'4、清算目录下的文件%s已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br></pre></td></tr></table></figure><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><p>作为主函数入口，定义时间、路径、要修改的文件名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    YYYYMMDD = time.strftime(<span class="string">'%Y%m%d'</span>, time.localtime())</span><br><span class="line">    MMDD = time.strftime(<span class="string">'%m%d'</span>, time.localtime())</span><br><span class="line">    insett_path = <span class="string">r'D:\abc\abc\%s'</span> % YYYYMMDD</span><br><span class="line">    os.chdir(insett_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'..\mid\%s'</span> % YYYYMMDD):</span><br><span class="line">        os.mkdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">    insett_file = os.listdir(insett_path)</span><br><span class="line">    shzd_targit_file=[<span class="string">'op_ccbdjsq1l'</span>,<span class="string">'op_hyccjsq1l'</span>,<span class="string">'op_jsmxjsq1l'</span>,<span class="string">'op_zqjsjsq1l'</span>]</span><br><span class="line">    sett_file(shzd_targit_file,insett_file,insett_path,<span class="string">'SH'</span>)</span><br><span class="line">    szzd_targit_file=[<span class="string">'SQ_HYCB'</span>,<span class="string">'SQ_HYCC'</span>,<span class="string">'SQ_JSMX'</span>]</span><br><span class="line">    sett_file(szzd_targit_file, insett_file, insett_path, <span class="string">'SZ'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'任务执行成功，如果有问题，请查看中转目录下的日志文件。'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'中转目录为：%s'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % insett_path+<span class="string">'\mid'</span></span><br><span class="line">    input()</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>

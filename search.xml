<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>zabbix手动配置邮件告警</title>
      <link href="/2018/06/26/zabbix%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%91%8A%E8%AD%A6/"/>
      <content type="html"><![CDATA[<p><strong> zabbix手动配置邮件告警：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>sendEmail是一个轻量级，命令行的SMTP邮件客户端。如果你需要使用命令行发送邮件，那么sendEmail是非常完美的选择:使用简单并且功能强大.这个被设计用在php、bash </p><p>perl和web站点使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wget http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz</span><br><span class="line"></span><br><span class="line">mkdir /usr/local/bin</span><br><span class="line"></span><br><span class="line">tar zxfsendEmail-v1.56.tar.gz -C /usr/src</span><br><span class="line"></span><br><span class="line">cd/usr/src/sendEmail-v1.56</span><br><span class="line"></span><br><span class="line">cp -asendEmail /usr/local/bin</span><br><span class="line"></span><br><span class="line">chmod +x/usr/local/bin/sendEmail</span><br><span class="line"></span><br><span class="line">yum install perl-Net-SSLeay perl-IO-Socket-SSL -y</span><br><span class="line"></span><br><span class="line">/usr/local/bin/sendEmail-f from@163.com -t to@qq.com -s smtp.163.com -u "我是邮件主题" -omessage-content-type=html -o message-charset=utf8 -xu from@163.com -xp 123456-m "我是邮件内容" -l /var/log/sendMyEmail.log</span><br></pre></td></tr></table></figure><p>命令说明</p><p>/usr/local/bin/sendEmail        命令主程序<br>-f <a href="mailto:from@163.com" target="_blank" rel="noopener">from@163.com</a><br>发件人邮箱<br>-t <a href="mailto:to@163.com" target="_blank" rel="noopener">to@163.com</a><br>收件人邮箱<br>-s smtp.163.com<br>发件人邮箱的smtp服务器<br>-u “我是邮件主题”<br>邮件的标题<br>-o message-content-type=html<br>邮件内容的格式,html表示它是html格式<br>-o message-charset=utf8<br>邮件内容编码<br>-xu <a href="mailto:from@163.com" target="_blank" rel="noopener">from@163.com</a><br>发件人邮箱的用户名<br>-xp 123456                      发件人邮箱密码<br>-m “我是邮件内容”<br>邮件的具体内容</p><p>-l  /var/log/sendMyEmail.log     非必输项，邮件发送日志记录到日志文件</p><p>进入zabbix自定义的指定目录，我这里是/usr/local/zabbix </p><p>可以查看zabbix_server.conf配置文件AlertScriptsPath变量是如何定义的。</p><p>vim/usr/local/zabbix/etc/zabbix_server.conf</p><p>找到AlertScriptsPath选项，可以自定义位置</p><p>AlertScriptsPath=/usr/local/zabbix/alertscripts</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cd/usr/local/zabbix/alertscripts/ </span><br><span class="line"></span><br><span class="line">vim sendEmail.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">to=$1</span><br><span class="line"></span><br><span class="line">subject=$2</span><br><span class="line"></span><br><span class="line">body=$3</span><br><span class="line"></span><br><span class="line">/usr/local/bin/sendEmail  -f from@163.com</span><br><span class="line"></span><br><span class="line">-t "to" -s smtp.163.com -u "subject" -o</span><br><span class="line"></span><br><span class="line">message-content-type=html -o message-charset=utf8 -xu from@163.com -xp password</span><br><span class="line"></span><br><span class="line">-m "$body"</span><br></pre></td></tr></table></figure><p>说明: </p><p><a href="mailto:from@163.com" target="_blank" rel="noopener">from@163.com</a>替换成自己的发件邮箱 </p><p>smtp.163.com表示邮箱的smtp服务器，这里展示使用的是163邮箱，替换自己的邮箱SMTP地址 </p><p>password替换成发件邮箱密码</p><p>chmod +x<br>sendEmail.sh<br>chown zabbix.zabbix sendEmail.sh</p><p>进入zabbix管理页面 </p><p>点击管理-&gt;报警媒介类型点击最右边的创建媒体类型</p><p>输入脚本名称，类型选择脚本并添加以下3个参数，分别对应sendEmail.sh脚本需要的3个参数：收件人地址、主题、详细内容</p><p>{ALERT.SENDTO}<br>{ALERT.SUBJECT}<br>{ALERT.MESSAGE}</p><p>消息模版设置：</p><p>故障{TRIGGER.STATUS},服务器:{HOSTNAME1}发生:{TRIGGER.NAME}故障!</p><p>告警主机:{HOSTNAME1}<br></p><p>告警时间:{EVENT.DATE}{EVENT.TIME}<br></p><p>告警等级:{TRIGGER.SEVERITY}<br></p><p>告警信息:{TRIGGER.NAME}<br></p><p>告警项目:{TRIGGER.KEY1}<br></p><p>问题详情:{ITEM.NAME}<br></p><p>当前值:{ITEM.VALUE}<br></p><p>当前状态:{TRIGGER.STATUS}<br></p><p>事件ID:{EVENT.ID}<br></p><p>恢复{TRIGGER.STATUS},服务器:{HOSTNAME1}: {TRIGGER.NAME}已恢复!</p><p>告警主机:{HOSTNAME1}<br></p><p>告警时间:{EVENT.DATE}{EVENT.TIME}<br></p><p>告警等级:{TRIGGER.SEVERITY}<br></p><p>告警信息:{TRIGGER.NAME}<br></p><p>告警项目:{TRIGGER.KEY1}<br></p><p>问题详情:{ITEM.NAME}<br></p><p>当前值:{ITEM.VALUE}<br></p><p>当前状态:{TRIGGER.STATUS}<br></p><p>事件ID:{EVENT.ID}<br></p><p>问题记录：</p><p>sendEmail报错：at/usr/share/perl5/vendor_perl/IO/Socket/SSL.pm</p><p>解决办法：</p><p>centos7.2默认是perl的版本是5.16，centos6.5的是5.10，后来把7的版本换成5.10，就可以正常发邮件了。</p><p>#### perl安装</p><p>​     wget <a href="http://www.cpan.org/src/5.0/perl-5.10.0.tar.gz" target="_blank" rel="noopener">http://www.cpan.org/src/5.0/perl-5.10.0.tar.gz</a></p><p>​     tar -zxf perl-5.10.0.tar.gz</p><p>​     cd perl-5.22.0</p><p>​     ./configure.gnu -des -Dprefix=/usr/local/perl</p><p>​     echo $?</p><p>​     make</p><p>​     make test</p><p>​     make install</p><p>​     mv /usr/bin/perl /usr/bin/perl.bak</p><p>​     ln -s /usr/local/perl/bin/perl /usr/bin/perl</p><p>​     perl -v</p></the>]]></content>
      
      <categories>
          
          <category> operation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql编码</title>
      <link href="/2018/06/25/mysql%E7%BC%96%E7%A0%81/"/>
      <content type="html"><![CDATA[<p><strong> mysql编码：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="编码查询"><a href="#编码查询" class="headerlink" title="编码查询"></a>编码查询</h3><h4 id="1、数据库的编码查询"><a href="#1、数据库的编码查询" class="headerlink" title="1、数据库的编码查询"></a>1、数据库的编码查询</h4><p>Show variables like “%character%”;</p><h4 id="2、表、字段的编码查询"><a href="#2、表、字段的编码查询" class="headerlink" title="2、表、字段的编码查询"></a>2、表、字段的编码查询</h4><p>Show create table “table_name”;</p><h3 id="编码修改"><a href="#编码修改" class="headerlink" title="编码修改"></a>编码修改</h3><h4 id="1、数据库层的编码修改"><a href="#1、数据库层的编码修改" class="headerlink" title="1、数据库层的编码修改"></a>1、数据库层的编码修改</h4><p>临时修改办法：</p><p>set  character_set_server = utf8;</p><h4 id="2、具体某一个数据库的编码："><a href="#2、具体某一个数据库的编码：" class="headerlink" title="2、具体某一个数据库的编码："></a>2、具体某一个数据库的编码：</h4><p>新建：create database“table_name”character set utf8</p><p>修改：alterdatabase  “table_name” character set utf8</p><h4 id="3、具体某一个数据库表的编码："><a href="#3、具体某一个数据库表的编码：" class="headerlink" title="3、具体某一个数据库表的编码："></a>3、具体某一个数据库表的编码：</h4><p>alter table “table_name” character set utf8</p><h4 id="4、修改某一个数据库表里字段的编码："><a href="#4、修改某一个数据库表里字段的编码：" class="headerlink" title="4、修改某一个数据库表里字段的编码："></a>4、修改某一个数据库表里字段的编码：</h4><p>alter table table_name change column_name column_name &lt;类型&gt; character set utf8</p><h3 id="直接修改mysql的配置文件"><a href="#直接修改mysql的配置文件" class="headerlink" title="直接修改mysql的配置文件"></a>直接修改mysql的配置文件</h3><p>MySql的配置文件Windows下一般在系统目录下或者在MySql的安装目录下名字叫my.ini，可以搜索，Linux下一般是/etc/my.cnf</p><p>–在 [mysqld] 标签下加上以下内容：</p><p>default-character-set = utf8</p><p>character_set_server = utf8</p><p>注意：如果此标签下已经存在“default-character-set=GBK”类似的内容，只需修改即可。</p><p>–在 [mysql]  标签下加上一行</p><p>default-character-set = utf8</p><p>–在 [mysql.server]标签下加上一行</p><p>default-character-set = utf8</p><p>–在 [mysqld_safe]标签下加上一行</p><p>default-character-set = utf8</p><p>–在 [client]标签下加上一行</p><p>default-character-set = utf8</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用xlwt导出excel文件的例子</title>
      <link href="/2018/06/24/%E5%88%A9%E7%94%A8xlwt%E5%AF%BC%E5%87%BAexcel%E6%96%87%E4%BB%B6%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
      <content type="html"><![CDATA[<p><strong> 利用xlwt导出excel文件的例子：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>ExamplesGenerating Excel Documents Using Python’s xlwt</p><p>Here are some simple examples using Python’sxlwt library to dynamically generate Excel documents.</p><p>Please note a useful alternativemay be ezodf, which allows you to generate ODS (Open Document Spreadsheet)files for LibreOffice / OpenOffice. You can check them out at:<a href="http://packages.python.org/ezodf/index.html" target="_blank" rel="noopener">http://packages.python.org/ezodf/index.html</a></p><p>The SimplestExample</p><p>import xlwt</p><p>workbook = xlwt.Workbook(encoding = ‘ascii’)</p><p>worksheet = workbook.add_sheet(‘My Worksheet’)</p><p>worksheet.write(0, 0, label = ‘Row 0, Column 0Value’)</p><p>workbook.save(‘Excel_Workbook.xls’)</p><p>Formatting theContents of a Cell</p><p>import xlwt</p><p>workbook = xlwt.Workbook(encoding = ‘ascii’)</p><p>worksheet = workbook.add_sheet(‘My Worksheet’)</p><p>font = xlwt.Font() # Create the Font</p><p>font.name = ‘Times New Roman’</p><p>font.bold = True</p><p>font.underline = True</p><p>font.italic = True</p><p>style = xlwt.XFStyle() # Create the Style</p><p>style.font = font # Apply the Font to the Style</p><p>worksheet.write(0, 0, label = ‘Unformattedvalue’)</p><p>worksheet.write(1, 0, label = ‘Formattedvalue’, style) # Apply the Style to the Cell</p><p>workbook.save(‘Excel_Workbook.xls’)</p><p>Attributes ofthe Font Object</p><p>font.bold = True # May be: True, False</p><p>font.italic = True # May be: True, False</p><p>font.struck_out = True # May be: True, False</p><p>font.underline = xlwt.Font.UNDERLINE_SINGLE #May be: UNDERLINE_NONE, UNDERLINE_SINGLE, UNDERLINE_SINGLE_ACC,UNDERLINE_DOUBLE, UNDERLINE_DOUBLE_ACC</p><p>font.escapement =xlwt.Font.ESCAPEMENT_SUPERSCRIPT # May be: ESCAPEMENT_NONE,ESCAPEMENT_SUPERSCRIPT, ESCAPEMENT_SUBSCRIPT</p><p>font.family = xlwt.Font.FAMILY_ROMAN # May be:FAMILY_NONE, FAMILY_ROMAN, FAMILY_SWISS, FAMILY_MODERN, FAMILY_SCRIPT,FAMILY_DECORATIVE</p><p>font.charset = xlwt.Font.CHARSET_ANSI_LATIN #May be: CHARSET_ANSI_LATIN, CHARSET_SYS_DEFAULT, CHARSET_SYMBOL,CHARSET_APPLE_ROMAN, CHARSET_ANSI_JAP_SHIFT_JIS, CHARSET_ANSI_KOR_HANGUL,CHARSET_ANSI_KOR_JOHAB, CHARSET_ANSI_CHINESE_GBK, CHARSET_ANSI_CHINESE_BIG5,CHARSET_ANSI_GREEK, CHARSET_ANSI_TURKISH, CHARSET_ANSI_VIETNAMESE,CHARSET_ANSI_HEBREW, CHARSET_ANSI_ARABIC, CHARSET_ANSI_BALTIC,CHARSET_ANSI_CYRILLIC, CHARSET_ANSI_THAI, CHARSET_ANSI_LATIN_II,CHARSET_OEM_LATIN_I</p><p>font.colour_index = ?</p><p>font.get_biff_record = ?</p><p>font.height = 0x00C8 # C8 in Hex (in decimal) =10 points in height.</p><p>font.name = ?</p><p>font.outline = ?</p><p>font.shadow = ?</p><p>Setting theWidth of a Cell</p><p>import xltw</p><p>workbook = xlwt.Workbook()</p><p>worksheet = workbook.add_sheet(‘My Sheet’)</p><p>worksheet.write(0, 0, ‘My Cell Contents’)</p><p>worksheet.col(0).width = 3333 # 3333 = 1”(one inch).</p><p>workbook.save(‘Excel_Workbook.xls’)</p><p>Entering a Dateinto a Cell</p><p>import xlwt</p><p>import datetime</p><p>workbook = xlwt.Workbook()</p><p>worksheet = workbook.add_sheet(‘My Sheet’)</p><p>style = xlwt.XFStyle()</p><p>style.num_format_str = ‘M/D/YY’ # Otheroptions: D-MMM-YY, D-MMM, MMM-YY, h:mm, h:mm:ss, h:mm, h:mm:ss, M/D/YY h:mm,mm:ss, [h]:mm:ss, mm:ss.0</p><p>worksheet.write(0, 0, datetime.datetime.now(),style)</p><p>workbook.save(‘Excel_Workbook.xls’)</p><p>Adding a Formulato a Cell</p><p>import xlwt</p><p>workbook = xlwt.Workbook()</p><p>worksheet = workbook.add_sheet(‘My Sheet’)</p><p>worksheet.write(0, 0, 5) # Outputs 5</p><p>worksheet.write(0, 1, 2) # Outputs 2</p><p>worksheet.write(1, 0, xlwt.Formula(‘A1<em>B1’)) #Should output “10” (A1[5] </em> A2[2])</p><p>worksheet.write(1, 1,xlwt.Formula(‘SUM(A1,B1)’)) # Should output “7” (A1[5] + A2[2])</p><p>workbook.save(‘Excel_Workbook.xls’)</p><p>Adding aHyperlink to a Cell</p><p>import xlwt</p><p>workbook = xlwt.Workbook()</p><p>worksheet = workbook.add_sheet(‘My Sheet’)</p><p>worksheet.write(0, 0,xlwt.Formula(‘HYPERLINK(“<a href="http://www.google.com&quot;;&quot;Google&quot;)&#39;))#" target="_blank" rel="noopener">http://www.google.com&quot;;&quot;Google&quot;)&#39;))#</a> Outputs the text “Google” linking to <a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a></p><p>workbook.save(‘Excel_Workbook.xls’)</p><p>Merging Columnsand Rows</p><p>import xlwt</p><p>workbook = xlwt.Workbook()</p><p>worksheet = workbook.add_sheet(‘My Sheet’)</p><p>worksheet.write_merge(0, 0, 0, 3, ‘FirstMerge’) # Merges row 0’s columns 0 through 3.</p><p>font = xlwt.Font() # Create Font</p><p>font.bold = True # Set font to Bold</p><p>style = xlwt.XFStyle() # Create Style</p><p>style.font = font # Add Bold Font to Style</p><p>worksheet.write_merge(1, 2, 0, 3, ‘SecondMerge’, style) # Merges row 1 through 2’s columns 0 through 3.</p><p>workbook.save(‘Excel_Workbook.xls’)</p><p>Setting theAlignment for the Contents of a Cell</p><p>import xlwt</p><p>workbook = xlwt.Workbook()</p><p>worksheet = workbook.add_sheet(‘My Sheet’)</p><p>alignment = xlwt.Alignment() # Create Alignment</p><p>alignment.horz = xlwt.Alignment.HORZ_CENTER #May be: HORZ_GENERAL, HORZ_LEFT, HORZ_CENTER, HORZ_RIGHT, HORZ_FILLED,HORZ_JUSTIFIED, HORZ_CENTER_ACROSS_SEL, HORZ_DISTRIBUTED</p><p>alignment.vert = xlwt.Alignment.VERT_CENTER #May be: VERT_TOP, VERT_CENTER, VERT_BOTTOM, VERT_JUSTIFIED, VERT_DISTRIBUTED</p><p>style = xlwt.XFStyle() # Create Style</p><p>style.alignment = alignment # Add Alignment toStyle</p><p>worksheet.write(0, 0, ‘Cell Contents’, style)</p><p>workbook.save(‘Excel_Workbook.xls’)</p><p>Adding Bordersto a Cell</p><p># Please note: While I was able to find theseconstants within the source code, on my system (using LibreOffice,) I was onlypresented with a solid line, varying from thin to thick; no dotted or dashedlines.</p><p>import xlwt</p><p>workbook = xlwt.Workbook()</p><p>worksheet = workbook.add_sheet(‘My Sheet’)</p><p>borders = xlwt.Borders() # Create Borders</p><p>borders.left = xlwt.Borders.DASHED # May be:NO_LINE, THIN, MEDIUM, DASHED, DOTTED, THICK, DOUBLE, HAIR, MEDIUM_DASHED,THIN_DASH_DOTTED, MEDIUM_DASH_DOTTED, THIN_DASH_DOT_DOTTED,MEDIUM_DASH_DOT_DOTTED, SLANTED_MEDIUM_DASH_DOTTED, or 0x00 through 0x0D.</p><p>borders.right = xlwt.Borders.DASHED</p><p>borders.top = xlwt.Borders.DASHED</p><p>borders.bottom = xlwt.Borders.DASHED</p><p>borders.left_colour = 0x40</p><p>borders.right_colour = 0x40</p><p>borders.top_colour = 0x40</p><p>borders.bottom_colour = 0x40</p><p>style = xlwt.XFStyle() # Create Style</p><p>style.borders = borders # Add Borders to Style</p><p>worksheet.write(0, 0, ‘Cell Contents’, style)</p><p>workbook.save(‘Excel_Workbook.xls’)</p><p>Setting theBackground Color of a Cell</p><p>import xlwt</p><p>workbook = xlwt.Workbook()</p><p>worksheet = workbook.add_sheet(‘My Sheet’)</p><p>pattern = xlwt.Pattern() # Create thePattern</p><p>pattern.pattern =xlwt.Pattern.SOLID_PATTERN # May be: NO_PATTERN, SOLID_PATTERN, or 0x00through 0x12</p><p>pattern.pattern_fore_colour = 5 # Maybe: 8 through 63. 0 = Black, 1 = White, 2 = Red, 3 = Green, 4 = Blue, 5 =Yellow, 6 = Magenta, 7 = Cyan, 16 = Maroon, 17 = Dark Green, 18 = Dark Blue, 19= Dark Yellow , almost brown), 20 = Dark Magenta, 21 = Teal, 22 = Light Gray,23 = Dark Gray, the list goes on…</p><p>style = xlwt.XFStyle() # Create the Pattern</p><p>style.pattern = pattern # Add Pattern toStyle</p><p>worksheet.write(0, 0, ‘Cell Contents’, style)</p><p>workbook.save(‘Excel_Workbook.xls’)</p><p>TODO: ThingsLeft to Document</p><p>- Panes – separate views which are always inview</p><p>- Border Colors (documented above, but nottaking effect as it should)</p><p>- Border Widths (document above, but notworking as expected)</p><p>- Protection</p><p>- Row Styles</p><p>- Zoom / Manification</p><p>- WS Props?</p><p>Source Code for reference available at: <a href="https://secure.simplistix.co.uk/svn/xlwt/trunk/xlwt/" target="_blank" rel="noopener">https://secure.simplistix.co.uk/svn/xlwt/trunk/xlwt/</a></p></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
            <tag> xlwt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python转义字符</title>
      <link href="/2018/06/24/python%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
      <content type="html"><![CDATA[<p><strong> python转义字符：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>在需要在字符中使用特殊字符时，python用反斜杠()转义字符。如下表：</p><p>原始字符串</p><p>有时我们并不想让转义字符生效，我们只想显示字符串原来的意思，这就要用r和R来定义原始字符串。如：</p><p>print r’\t\r’</p><p>实际输出为“\t\r”。</p><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td>(在行尾时)</td><td>续行符</td></tr><tr><td>\</td><td>反斜杠符号</td></tr><tr><td>\’</td><td>单引号</td></tr><tr><td>\”</td><td>双引号</td></tr><tr><td>\a</td><td>响铃</td></tr><tr><td>\b</td><td>退格(Backspace)</td></tr><tr><td>\e</td><td>转义</td></tr><tr><td>\000</td><td>空</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\v</td><td>纵向制表符</td></tr><tr><td>\t</td><td>横向制表符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\oyy</td><td>八进制数yy代表的字符，例如：\o12代表换行</td></tr><tr><td>\xyy</td><td>十进制数yy代表的字符，例如：\x0a代表换行</td></tr><tr><td>\other</td><td>其它的字符以普通格式输出</td></tr></tbody></table></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转义字符 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux的五个查找命令</title>
      <link href="/2018/06/24/linux%E7%9A%84%E4%BA%94%E4%B8%AA%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4/"/>
      <content type="html"><![CDATA[<p><strong> linux的五个查找命令：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>在Linux中，有很多方法可以做到这一点。国外网站<a href="http://www.linuxhaxor.net/?p=904" target="_blank" rel="noopener">LinuxHaxor</a>总结了五条命令，你可以看看自己知道几条。大多数程序员，可能经常使用其中的2到3条，对这5条命令都很熟悉的人应该是不多的。</p><p>\1. find</p><p>find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。</p><p>find的使用格式如下：</p><p>$ find &lt;指定目录&gt; &lt;指定条件&gt;&lt;指定动作&gt;</p><p>- &lt;指定目录&gt;： 所要搜索的目录及其所有子目录。默认为当前目录。</p><p>- &lt;指定条件&gt;： 所要搜索的文件的特征。</p><p>- &lt;指定动作&gt;： 对搜索结果进行特定的处理。</p><p>如果什么参数也不加，find默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。</p><p>find的使用实例：</p><p>$ find . -name ‘my*’</p><p>搜索当前目录（含子目录，以下同）中，所有文件名以my开头的文件。</p><p>$ find . -name ‘my*’ -ls</p><p>搜索当前目录中，所有文件名以my开头的文件，并显示它们的详细信息。</p><p>$ find . -type f -mmin -10</p><p>搜索当前目录中，所有过去10分钟中更新过的普通文件。如果不加-type f参数，则搜索普通文件+特殊文件+目录。</p><p>\2. locate</p><p>locate命令其实是”find -name”的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。</p><p>locate命令的使用实例：</p><p>$ locate /etc/sh</p><p>搜索etc目录下所有以sh开头的文件。</p><p>$ locate ~/m</p><p>搜索用户主目录下，所有以m开头的文件。</p><p>$ locate -i ~/m</p><p>搜索用户主目录下，所有以m开头的文件，并且忽略大小写。</p><p>\3. whereis</p><p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p><p>whereis命令的使用实例：</p><p>$ whereis grep</p><p>\4. which</p><p>which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><p>which命令的使用实例：</p><p>$ which grep</p><p>\5. type</p><p>type命令其实不能算查找命令，它是用来区分某个命令到底是由shell自带的，还是由shell外部的独立二进制文件提供的。如果一个命令是外部命令，那么使用-p参数，会显示该命令的路径，相当于which命令。</p><p>type命令的使用实例：</p><p>$ type cd</p><p>系统会提示，cd是shell的自带命令（build-in）。</p><p>$ type grep</p><p>系统会提示，grep是一个外部命令，并显示该命令的路径。</p><p>$ type -p grep</p><p>加上-p参数后，就相当于which命令。</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>时间同步</title>
      <link href="/2018/06/24/%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"/>
      <content type="html"><![CDATA[<p><strong> 时间同步：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>Linux服务器运行久时，系统时间就会存在一定的误差，一般情况下可以使用date命令进行时间设置，但在做数据库集群分片等操作时对多台机器的时间差是有要求的，此时就需要使用ntpdate进行时间同步。</p><p>一、修改时区：</p><p># cp/usr/share/zoneinfo/Asia/Shanghai /etc/localtime</p><p>修改为中国的东八区</p><p># vi/etc/sysconfig/clock</p><p>ZONE=”Asia/Shanghai”</p><p>UTC=false</p><p>ARC=false</p><p>二、配置新的时间</p><p>日期设定：</p><p># date-s 2017/03/06</p><p>时间设定：</p><p># date-s 18:40:00</p><p>查看硬件时间（BIOS的）：</p><p>   hwclock [-rw]</p><p>​    -r:查看现有BIOS时间，默认为－r参数</p><p>​    -w:将现在的linux系统时间写入BIOS中</p><p>​    注：当我们进行完 Linux 时间的校时后，还需要以 hwclock -w 来更新 BIOS 的时间，因为每次开机的时候，系统会重新由 BIOS 将时间读出来，所以， BIOS 才是重要的时间依据。</p><p>[root@linuxidc~]# hwclock -r</p><p>Wed 02Nov 2016 02:53:35 AM CST  -0.632895 seconds</p><p>同步BIOS时钟，强制把系统时间写入CMOS：</p><p># clock-w</p><p>三、实现Internet时间同步（这里可以忽略上面两步）</p><p>方法1. 开机的时候自动网络校时：</p><p>   vi /etc/rc.d/rc.local</p><p>   /usr/sbin/ntpdate -u 192.168.0.2 192.168.0.3 192.168.0.4; /sbin/hwclock -w</p><p>#这里几个IP是公司内部的NTP服务器</p><p>方法2. 设定计划任务</p><p>crontab格式如下：</p><p># Fordetails see man 4 crontabs</p><p>#Example of job definition:</p><p>#.—————- minute (0 - 59)</p><p>#|  .————- hour (0 - 23)</p><p>#|  |  .———- day of month (1 - 31)</p><p>#|  |  |  .——- month (1 - 12) OR jan,feb,mar,apr …</p><p>#|  |  |  |  .—- day of week (0 - 6) (Sunday=0 or 7) ORsun,mon,tue,wed,thu,fri,sat</p><p>#|  |  |  |  |</p><p>#<em>  </em>  <em>  </em>  *  command to be executed</p><p>设定crontab计划任务自动校时：</p><p>使用命令crontab -e</p><p>crontab-e</p><p>   10 5 <em> </em> * root /usr/sbin/ntpdate -u 210.72.145.44;hwclock -w</p><p>这样每天5:10自动进行网络校时，并同时更新BIOS的时间</p><p>-——————————————————————————</p><p>同步网络时间：输入ntpdatetime.nist.gov同步网络时间</p><p>[root@linuxidc~]# ntpdate -u time.nist.gov  #网络时间同步命令</p><p>13 Mar13:39:57 ntpdate[3318]: adjust time server 216.229.0.179 offset 0.018134 sec</p><p>#出现以上信息说明同步成功#</p><p>注：如提示命令不存在，直接输入：yuminstall ntp -y  安装ntp软件包。 </p><p>注：若不加上-u参数，会出现以下提示：no server suitable for synchronization found</p><p>-u：从man ntpdate中可以看出-u参数可以越过防火墙与主机同步；</p><p>210.72.145.44：中国国家授时中心的官方服务器。</p><p>ntp常用服务器：</p><p>中国国家授时中心：210.72.145.44</p><p>NTP服务器(上海) ：ntp.api.bz</p><p>美国：time.nist.gov </p><p>复旦：ntp.fudan.edu.cn </p><p>微软公司授时主机(美国)：time.windows.com </p><p>台警大授时中心(台湾)：asia.pool.ntp.org</p><p>注：经测试中国国家授时中心与NTP上海服务器可以正常同步时间，注意需要加上-u参数越过防火墙与主机同步！</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间同步 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim操作</title>
      <link href="/2018/06/24/vim%E6%93%8D%E4%BD%9C/"/>
      <content type="html"><![CDATA[<p><strong> vim操作：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="一、vim光标移动操作"><a href="#一、vim光标移动操作" class="headerlink" title="一、vim光标移动操作"></a>一、vim光标移动操作</h3><p>向下翻滚一个屏幕  ctrl+f</p><p>向上翻滚一个屏幕  ctrl+b</p><p>向下滚动一行     ctrl+e</p><p>向上滚动一行     ctrl+y</p><p>查找百分之n      n%</p><p>移动到光标所在行的行首  0或者^</p><p>移动到光标所在行的行末  $</p><p>移动光标到整个文档的第一个字符   (</p><p>移动光标到整个文档的最后一个字符  )</p><p>移动光标到当前屏幕的最上边  H</p><p>移动光标到当前屏幕的最中间  M</p><p>移动光标到当前屏幕的最下边  L</p><p>移动光标到整个文档的最上边    gg</p><p>移动光标到整个文档的最下边    G</p><p>移动到文档的n行处           nG</p><p>移动到当前行的下一个字符c处 tc</p><p>移动到当前行的上一个字符c处 Tc</p><h3 id="二、查找替换"><a href="#二、查找替换" class="headerlink" title="二、查找替换"></a>二、查找替换</h3><h4 id="1，查找"><a href="#1，查找" class="headerlink" title="1，查找"></a>1，查找</h4><p>在normal模式下按下/即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下n查找下一个，按下N查找上一个。</p><p>Vim查找支持正则表达式，例如/vim$匹配行尾的”vim”。 需要查找特殊字符需要转义，例如/vim\$匹配”vim$”。</p><h4 id="2，大小写敏感查找"><a href="#2，大小写敏感查找" class="headerlink" title="2，大小写敏感查找"></a>2，大小写敏感查找</h4><p>在查找模式中加入\c表示大小写不敏感查找，\C表示大小写敏感查找。例如：</p><p>/foo\c</p><p>将会查找所有的”foo”,”FOO”,”Foo”等字符串。</p><h4 id="3，大小写敏感配置"><a href="#3，大小写敏感配置" class="headerlink" title="3，大小写敏感配置"></a>3，大小写敏感配置</h4><p>Vim 默认采用大小写敏感的查找，为了方便我们常常将其配置为大小写不敏感：</p><p>“ 设置默认进行大小写不敏感查找<br>set ignorecase<br>“ 如果有一个大写字母，则切换到大小写敏感查找<br>set smartcase </p><p>将上述设置粘贴到你的~/.vimrc，重新打开Vim即可生效</p><h4 id="4，查找当前单词"><a href="#4，查找当前单词" class="headerlink" title="4，查找当前单词"></a>4，查找当前单词</h4><p>在normal模式下按下*即可查找光标所在单词（word）， 要求每次出现的前后为空白字符或标点符号。例如当前为foo， 可以匹配foobar中的foo，但不可匹配foobar中的foo。 这在查找函数名、变量名时非常有用。</p><p>按下g*即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即foobar和foobar中的foo均可被匹配到。</p><h4 id="5，查找与替换"><a href="#5，查找与替换" class="headerlink" title="5，查找与替换"></a>5，查找与替换</h4><p>:s（substitute）命令用来查找和替换字符串。语法如下：</p><p>:{作用范围}s/{目标}/{替换}/{替换标志}</p><p>例如:%s/foo/bar/g会在全局范围(%)查找foo并替换为bar，所有出现都会被替换（g）</p><h4 id="6，作用范围"><a href="#6，作用范围" class="headerlink" title="6，作用范围"></a>6，作用范围</h4><p>作用范围分为当前行、全文、选区等等。</p><p>当前行：</p><p>:s/foo/bar/g</p><p>全文：</p><p>:%s/foo/bar/g</p><p>选区，在Visual模式下选择区域后输入:，Vim即可自动补全为 :’&lt;,’&gt;。</p><p>:’&lt;,’&gt;s/foo/bar/g</p><p>2-11行：</p><p>:5,12s/foo/bar/g</p><p>当前行.与接下来两行+2：</p><p>:.,+2s/foo/bar/g</p><h4 id="7、替换标志"><a href="#7、替换标志" class="headerlink" title="7、替换标志"></a>7、替换标志</h4><p>上文中命令结尾的g即是替换标志之一，表示全局global替换（即替换目标的所有出现）。 还有很多其他有用的替换标志：</p><p>空替换标志表示只替换从光标位置开始，目标的第一次出现：</p><p>:%s/foo/bar</p><p>i表示大小写不敏感查找，I表示大小写敏感：</p><p>:%s/foo/bar/i<br># 等效于模式中的\c（不敏感）或\C（敏感）<br>:%s/foo\c/bar</p><p>c表示需要确认，例如全局查找”foo”替换为”bar”并且需要确认：</p><p>:%s/foo/bar/gc</p><p>回车后Vim会将光标移动到每一次”foo”出现的位置，并提示</p><p>replacewith bar (y/n/a/q/l/^E/^Y)?</p><p>按下y表示替换，n表示不替换，a表示替换所有，q表示退出查找模式， l表示替换当前位置并退出。^E与^Y是光标移动快捷键，参考： <a href="http://harttle.com/2015/11/07/vim-cursor.html" target="_blank" rel="noopener">Vim中如何快速进行光标移</a></p><h4 id="8、大小写敏感查找"><a href="#8、大小写敏感查找" class="headerlink" title="8、大小写敏感查找"></a>8、大小写敏感查找</h4><p>在查找模式中加入\c表示大小写不敏感查找，\C表示大小写敏感查找。例如：</p><p>/foo\c</p><p>将会查找所有的”foo”,”FOO”,”Foo”等字符串。</p><h3 id="三、复制粘贴剪切"><a href="#三、复制粘贴剪切" class="headerlink" title="三、复制粘贴剪切"></a>三、复制粘贴剪切</h3><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><h5 id="1-常用复制命令："><a href="#1-常用复制命令：" class="headerlink" title="1.常用复制命令："></a>1.常用复制命令：</h5><p>​        yy   复制游标所在行整行 </p><p>​        2yy或y2y    复制 2 行</p><p>​        y^    复制至行首，或y0</p><p>​        y$   复制至行尾</p><p>​        yw   复制一个word</p><p>​        y2w    复制两个word </p><p>​        yG   复制至文件尾</p><p>​        y1G   复制至文件首</p><h5 id="2-选中文本进行复制："><a href="#2-选中文本进行复制：" class="headerlink" title="2. 选中文本进行复制："></a>2. 选中文本进行复制：</h5><p>​       要选中内容进行复制，先在命令模式下按 v 进入 Visual Mode，然后用 方向键 或 hjkl 选择文本，再按 y进行复制。</p><h4 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h4><ol><li><h5 id="常用剪切命令："><a href="#常用剪切命令：" class="headerlink" title="常用剪切命令："></a>常用剪切命令：</h5></li></ol><p>​        dd   剪切游标所在行整行 </p><p>​        d^    剪切至行首，或d0</p><p>​        d$    剪切至行尾 </p><p>​        dw    剪切一个word </p><p>​        dG    剪切至文件尾  </p><h5 id="2-选中文本进行剪切："><a href="#2-选中文本进行剪切：" class="headerlink" title="2. 选中文本进行剪切："></a>2. 选中文本进行剪切：</h5><p>​       要选中内容进行复制，先在命令模式下按 v 进入 Visual Mode，然后用 方向键 或 hjkl 选择文本，再按 d进行剪切。</p><h4 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h4><h5 id="1-常用粘贴命令："><a href="#1-常用粘贴命令：" class="headerlink" title="1.常用粘贴命令："></a>1.常用粘贴命令：</h5><p>​        p    粘贴至游标后（下） </p><p>​        P    粘贴至游标前（上）</p><ol><li><h5 id="要使用-系统粘贴板-的内容，也可以直接在命令模式按Shift-Inset-进行粘贴。"><a href="#要使用-系统粘贴板-的内容，也可以直接在命令模式按Shift-Inset-进行粘贴。" class="headerlink" title="要使用 系统粘贴板 的内容，也可以直接在命令模式按Shift + Inset 进行粘贴。"></a>要使用 系统粘贴板 的内容，也可以直接在命令模式按Shift + Inset 进行粘贴。</h5></li></ol><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><p>在命令行模式下用 :undo 或 :u 命令可以撤销最近一次操作。</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>三种方法解决FailedtostartLSB:Bringup/downnetworking问题</title>
      <link href="/2018/06/24/%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3FailedtostartLSB-Bringup-downnetworking%E9%97%AE%E9%A2%98/"/>
      <content type="html"><![CDATA[<p><strong> 三种方法解决FailedtostartLSB:Bringup/downnetworking问题：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>1、执行 service networkrestart 出现以下错误</p><p>Restarting network (via systemctl):  Job fornetwork.service failed. See ‘systemctl status network.service’ and ‘journalctl-xn’ for details.</p><p>2、根据上面的提示，执行“systemctl statusnetwork.service”输出以下的类似信息：</p><p>[root@localhost ~]# systemctl statusnetwork.service</p><p>network.service - LSB: Bring up/downnetworking</p><p>   Loaded: loaded(/etc/rc.d/init.d/network)</p><p>   Active: failed(Result: exit-code) since三 2014-11-05 15:30:10 CST;1min 5s ago</p><p>11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINKanswers: File exists</p><p>11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINKanswers: File exists</p><p>11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINKanswers: File exists</p><p>11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINKanswers: File exists</p><p>11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINKanswers: File exists</p><p>11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINKanswers: File exists</p><p>11月 05 15:30:10 localhost.localdomain network[2920]: RTNETLINKanswers: File exists</p><p>11月 05 15:30:10 localhost.localdomain systemd[1]: network.service:control process exited, code=exited status=1</p><p>11月 05 15:30:10 localhost.localdomain systemd[1]: Failed to start LSB: Bring up/downnetworking.</p><p>11月 05 15:30:10 localhost.localdomain systemd[1]: Unitnetwork.service entered failed state.</p><p>3、解决的办法（由于centos7中没有70-persistent-net.rules这个文件，复制出来的虚拟机(vmware）需要修改mac地址），就是修改mac地址。</p><p>4、如何查看centos7复制出来的虚拟机的mac地址，需要执行 “ip addr”，输出如下的类似信息：</p><p>[root@localhost ~]# ip addr</p><p>1: lo:</p><p>​    link/loopback00:00:00:00:00:00 brd 00:00:00:00:00:00</p><p>​    inet 127.0.0.1/8scope host lo</p><p>​      valid_lft forever preferred_lft forever</p><p>​    inet6 ::1/128scope host</p><p>​      valid_lft forever preferred_lft forever</p><p>2: eno16777736:</p><p>​    link/ether00:0f:19:10:12:f1 brd ff:ff:ff:ff:ff:ff</p><p>​    inet192.168.38.135/24 brd 192.168.38.255 scope global dynamic eno16777736</p><p>​      valid_lft 1681sec preferred_lft 1681sec</p><p>​    inet6fe80::20c:11aa:ae11:4fe4/64 scope link</p><p>​      valid_lft forever preferred_lft forever</p><p>注意上面加粗加红的字，这就是新的mac地址。</p><p>接下来就剩下修改ifcfg-XXX文件了，只修改HWADDR就可以了。接下来执行service network restart就正常了。</p><p>《二》</p><p>如果还是启动失败    查看是否有如下错误信息</p><p>Nov 23 22:09:07 hdcoe02 network[597]: Bringing up loopback interface:  Could not load file ‘/etc/sysconfig/network-scripts/ifcfg-lo’  </p><p>Nov 23 22:09:07 hdcoe02 network[597]: Could not load file ‘/etc/sysconfig/network-scripts/ifcfg-lo’ </p><p>Nov 23 22:09:08 hdcoe02 network[597]: Could not load file ‘/etc/sysconfig/network-scripts/ifcfg-lo’ </p><p>Nov 23 22:09:08 hdcoe02 network[597]: Could not load file ‘/etc/sysconfig/network-scripts/ifcfg-lo’ Nov 23 22:09:08 hdcoe02 network[597]: [  OK  ] </p><p>Nov 23 22:09:08 hdcoe02 network[597]: Bringing up interface enp0s25:  Error: Connection activation failed: Connection ‘enp0s25’ is not available on the device enp0s25 at this time. </p><p>设定开机启动一个名为NetworkManager-wait-online服务，命令为：</p><p>systemctl enableNetworkManager-wait-online.service</p><p>《三》</p><p>因为在VMware 虚拟机里面的系统 右上角显示的连接都没有连接上，虽然报错都一样，最后我在虚拟机设置里面将原来的网络适配器删掉，重新建了一个新的网络适配器，这次进去，显示连接成功，再用上面的方法，问题解决。</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决CentOS添加新网卡后找不到网卡配置文件</title>
      <link href="/2018/06/24/%E8%A7%A3%E5%86%B3CentOS%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%BD%91%E5%8D%A1%E5%90%8E%E6%89%BE%E4%B8%8D%E5%88%B0%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <content type="html"><![CDATA[<p><strong> 解决CentOS添加新网卡后找不到网卡配置文件：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>centos7，vm虚拟机</p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>使用VMware Workstation虚拟机安装好<a href="https://www.linuxprobe.com/" target="_blank" rel="noopener">CentOS</a>7虚拟机后，添加网卡后CentOS 7无网卡配置文件的问题，添加第二块网卡以后，进入CentOS<br>7系统后，看不到网卡配置文件。</p><p>进入CentOS7系统后，使用ipaddr 查看状态如下：</p><p>发现ens33和ens77均有IP地址，且可正常使用，ens33使用的是手动配置IP，ens37使用的是dhcp自动获取的IP地址，但是/etc/sysconfig/network-scripts/目录下找不到ifcfg-ens37配置文件</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>1.使用nmcli conshow命令，查看网卡的UUID信息，记下UUID值</p><p>2.使用ip addr命令查看网卡信息，记下ens37网卡的MAC地址</p><p>3.将 /etc/sysconfig/network-scripts/目录中ifcfg-ens33文件复制一份，并命名为ifcfg-ens37，重新修改配置文件，注意修改必要的硬件信息。</p><p>4.最后重新启动网卡即可。</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>fabric使用2.1.3版本</title>
      <link href="/2018/06/21/fabric%E4%BD%BF%E7%94%A82-1-3%E7%89%88%E6%9C%AC/"/>
      <content type="html"><![CDATA[<p><strong> fabric使用2.1.3版本：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>因为需求变更为使用高版本的fabric，因为高版本的fabric的使用较低版本的使用方法有差距，参照官方文档之后，将代码重写<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="业务需求："><a href="#业务需求：" class="headerlink" title="业务需求："></a>业务需求：</h3><p>使用fabric库，进入自己的实验Linux机器（10.10.10.234）的系统日志目录/var/log，找到boot.log-<strong>*</strong>,把这些文件打包成一个压缩包，下载到自己的笔记本电脑，使用shutil解压，然后删除掉服务器上的压缩包。用户名密码root/123456</p><h3 id="程序要求："><a href="#程序要求：" class="headerlink" title="程序要求："></a>程序要求：</h3><p>- 既要可以通过python xxx.py的方式来运行脚本程序来完成以上任务。</p><p>- 也要实现使用fab命令行的方式来实现以上任务。</p><p>- 要实现日志增量下载，即要预先知道本地已下载过的最新日志有哪些，不要重复下载。</p><h3 id="环境要求："><a href="#环境要求：" class="headerlink" title="环境要求："></a>环境要求：</h3><p>1、linux本地服务器一台192.168.1.2</p><p>2、linux远端服务器一台192.168.1.1</p><p>3、本地服务器使用python36，github下载fabric，fabric版本为2.1.3</p><p>下载地址：<a href="https://github.com/fabric/fabric" target="_blank" rel="noopener">https://github.com/fabric/fabric</a></p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#环境：python36 fabric2.1.3</span></span><br><span class="line"><span class="keyword">from</span> fabric  <span class="keyword">import</span> Connection</span><br><span class="line"><span class="keyword">from</span> invoke <span class="keyword">import</span> task, Exit</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">fab_con=Connection(host=<span class="string">'192.168.1.1'</span>,user=<span class="string">'root'</span>,port=<span class="string">'22'</span>,connect_kwargs=&#123;<span class="string">'password'</span>:<span class="string">'123456'</span>&#125;)</span><br><span class="line"><span class="comment">#远端服务器上的日志获取路径</span></span><br><span class="line">des_locate=<span class="string">'/var/log/'</span></span><br><span class="line"><span class="comment">#本地服务器上的日志下载路径</span></span><br><span class="line">src_locate=<span class="string">'/Users/zhoujingwei/Downloads/'</span></span><br><span class="line"><span class="comment">#目标即将要打包的文件</span></span><br><span class="line">tar_files=[<span class="string">'boot.log-*'</span>]</span><br><span class="line"><span class="comment">#打包函数</span></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack</span><span class="params">(c)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> fab_con.cd(des_locate):<span class="comment">#远程到目录/var/log/下</span></span><br><span class="line">        os.chdir(src_locate)<span class="comment">#本地目录切换到/opt</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'file_list.txt'</span>):<span class="comment">#判断本地文件是否存在，如果不存在新建一个空文件</span></span><br><span class="line">            os.system(<span class="string">'echo " "&gt; file_list.txt'</span>)</span><br><span class="line">        fab_con.put(<span class="string">'file_list.txt'</span>,<span class="string">'%s/file_list.txt'</span>% des_locate)<span class="comment">#把本地opt下的file_list.txt文件上传到远程主机的/var/log下</span></span><br><span class="line">        fab_con.run(<span class="string">'tar -zcvf my_pack.tar.gz %s --exclude-from=file_list.txt'</span> % (<span class="string">' '</span>.join(tar_files))) <span class="comment">#打包远端主机上满足boot.log-*的文件，并去除掉file_list.txt中的内容</span></span><br><span class="line"><span class="comment">#下载函数</span></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(c)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> fab_con.cd(des_locate):<span class="comment">#远程到目录/var/log下</span></span><br><span class="line">        os.chdir(src_locate)  <span class="comment"># 本地目录切换到/opt</span></span><br><span class="line">        fab_con.get(<span class="string">'%s/my_pack.tar.gz'</span> % des_locate,<span class="string">'my_pack.tar.gz'</span>)<span class="comment">#将远程目录下的文件下载到本地</span></span><br><span class="line"></span><br><span class="line">    os.chdir(src_locate)<span class="comment">#切换本地目录</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'file_list.txt'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> f:<span class="comment">#创建文件</span></span><br><span class="line">        data=os.popen(<span class="string">'tar -tf my_pack.tar.gz'</span>)<span class="comment">#查看下载下来的压缩包内的内容并写到本地的file_list.txt文件中</span></span><br><span class="line">        file_list=data.read()<span class="comment">#格式列表</span></span><br><span class="line">        <span class="keyword">print</span> (file_list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> file_list:<span class="comment">#循环写</span></span><br><span class="line">            f.write(i)</span><br><span class="line"><span class="comment">#解压函数</span></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpack</span><span class="params">(c)</span>:</span></span><br><span class="line">    os.chdir(src_locate)  <span class="comment"># 本地目录切换到/opt</span></span><br><span class="line">    <span class="comment">#os.system('tar -zxvf my_pack.tar.gz -C %s' % src_locate)#本地执行解压</span></span><br><span class="line">    shutil.unpack_archive(<span class="string">'my_pack.tar.gz'</span>,src_locate,<span class="string">'gztar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除函数</span></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(c)</span>:</span></span><br><span class="line">    os.chdir(src_locate)  <span class="comment"># 本地目录切换到/opt</span></span><br><span class="line">    fab_con.run(<span class="string">'rm -rf %s/my_pack.tar.gz'</span> % des_locate)<span class="comment">#远端执行删除操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#打包函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_py</span><span class="params">(c)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> c.cd(des_locate):<span class="comment">#远程到目录/var/log/下</span></span><br><span class="line">        os.chdir(src_locate)<span class="comment">#本地目录切换到/opt</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'file_list.txt'</span>):<span class="comment">#判断本地文件是否存在，如果不存在新建一个空文件</span></span><br><span class="line">            os.system(<span class="string">'echo " "&gt; file_list.txt'</span>)</span><br><span class="line">        c.put(<span class="string">'file_list.txt'</span>,<span class="string">'%s/file_list.txt'</span>% des_locate)<span class="comment">#把本地opt下的file_list.txt文件上传到远程主机的/var/log下</span></span><br><span class="line">        c.run(<span class="string">'tar -zcvf my_pack.tar.gz %s --exclude-from=file_list.txt'</span> % (<span class="string">' '</span>.join(tar_files))) <span class="comment">#打包远端主机上满足boot.log-*的文件，并去除掉file_list.txt中的内容</span></span><br><span class="line"><span class="comment">#下载函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_py</span><span class="params">(c)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> c.cd(des_locate):<span class="comment">#远程到目录/var/log下</span></span><br><span class="line">        os.chdir(src_locate)  <span class="comment"># 本地目录切换到/opt</span></span><br><span class="line">        c.get(<span class="string">'%s/my_pack.tar.gz'</span> % des_locate,<span class="string">'my_pack.tar.gz'</span>)<span class="comment">#将远程目录下的文件下载到本地</span></span><br><span class="line"></span><br><span class="line">    os.chdir(src_locate)<span class="comment">#切换本地目录</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'file_list.txt'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> f:<span class="comment">#创建文件</span></span><br><span class="line">        data=os.popen(<span class="string">'tar -tf my_pack.tar.gz'</span>)<span class="comment">#查看下载下来的压缩包内的内容并写到本地的file_list.txt文件中</span></span><br><span class="line">        file_list=data.read()<span class="comment">#格式列表</span></span><br><span class="line">        <span class="keyword">print</span> (file_list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> file_list:<span class="comment">#循环写</span></span><br><span class="line">            f.write(i)</span><br><span class="line"><span class="comment">#解压函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpack_py</span><span class="params">(c)</span>:</span></span><br><span class="line">    os.chdir(src_locate)  <span class="comment"># 本地目录切换到/opt</span></span><br><span class="line">    <span class="comment">#os.system('tar -zxvf my_pack.tar.gz -C %s' % src_locate)#本地执行解压</span></span><br><span class="line">    shutil.unpack_archive(<span class="string">'my_pack.tar.gz'</span>,src_locate,<span class="string">'gztar'</span>)</span><br><span class="line"><span class="comment">#删除函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_py</span><span class="params">(c)</span>:</span></span><br><span class="line">    os.chdir(src_locate)  <span class="comment"># 本地目录切换到/opt</span></span><br><span class="line">    c.run(<span class="string">'rm -rf %s/my_pack.tar.gz'</span> % des_locate)<span class="comment">#远端执行删除操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">"1:打包"</span>)</span><br><span class="line">        print(<span class="string">'2:下载'</span>)</span><br><span class="line">        print(<span class="string">'3:解压'</span>)</span><br><span class="line">        print(<span class="string">'4:删除'</span>)</span><br><span class="line">        print(<span class="string">'5:退出'</span>)</span><br><span class="line">        choice_num=input(<span class="string">'输入序号来执行命令：'</span>)</span><br><span class="line">        <span class="keyword">if</span> choice_num==<span class="string">'1'</span>:</span><br><span class="line">            pack_py(c=fab_con)</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'打包已完成'</span>)</span><br><span class="line">        <span class="keyword">elif</span> choice_num==<span class="string">'2'</span>:</span><br><span class="line">            download_py(c=fab_con)</span><br><span class="line">            print(<span class="string">'下载已完成'</span>)</span><br><span class="line">        <span class="keyword">elif</span> choice_num==<span class="string">'3'</span>:</span><br><span class="line">            unpack_py(c=fab_con)</span><br><span class="line">            print(<span class="string">'解压已完成'</span>)</span><br><span class="line">        <span class="keyword">elif</span> choice_num==<span class="string">'4'</span>:</span><br><span class="line">            delete_py(c=fab_con)</span><br><span class="line">            print(<span class="string">'删除已完成'</span>)</span><br><span class="line">        <span class="keyword">elif</span> choice_num==<span class="string">'5'</span>:</span><br><span class="line">            exit()</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>fabric应用（1.14）</title>
      <link href="/2018/06/20/fabric%E5%BA%94%E7%94%A8/"/>
      <content type="html"><![CDATA[<p><strong> fabric应用（1.14）：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>收到一份python需求，兴高采烈的写完了，现在分享一下<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="业务需求："><a href="#业务需求：" class="headerlink" title="业务需求："></a>业务需求：</h3><p>使用fabric库，进入自己的实验Linux机器（10.10.10.234）的系统日志目录/var/log，找到boot.log-<strong>*</strong>,把这些文件打包成一个压缩包，下载到自己的笔记本电脑，使用shutil解压，然后删除掉服务器上的压缩包。用户名密码root/123456</p><h3 id="程序要求："><a href="#程序要求：" class="headerlink" title="程序要求："></a>程序要求：</h3><p>- 既要可以通过python xxx.py的方式来运行脚本程序来完成以上任务。</p><p>- 也要实现使用fab命令行的方式来实现以上任务。</p><p>- 要实现日志增量下载，即要预先知道本地已下载过的最新日志有哪些，不要重复下载。</p><h3 id="环境要求："><a href="#环境要求：" class="headerlink" title="环境要求："></a>环境要求：</h3><p>1、linux本地服务器一台192.168.1.2</p><p>2、linux远端服务器一台192.168.1.1</p><p>3、本地服务器使用自带python27，yum安装fabric，fabric版本为1.14.0</p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#主机</span></span><br><span class="line">env.hosts = [<span class="string">'192.168.1.1'</span>]</span><br><span class="line"><span class="comment">#主机用户名</span></span><br><span class="line">env.user = <span class="string">'root'</span></span><br><span class="line"><span class="comment">#主机密码</span></span><br><span class="line">env.password = <span class="string">'123456'</span></span><br><span class="line"><span class="comment">#目标即将要打包的文件</span></span><br><span class="line">tar_files=[<span class="string">'boot.log-*'</span>]</span><br><span class="line"><span class="comment">#以python fabric.py执行时需要用到的初始化单台主机,保留</span></span><br><span class="line">env.host_string = <span class="string">'192.168.1.1'</span></span><br><span class="line"><span class="comment">#远端服务器上的日志获取路径</span></span><br><span class="line">des_locate=<span class="string">'/var/log/'</span></span><br><span class="line"><span class="comment">#本地服务器上的日志下载路径</span></span><br><span class="line">src_locate=<span class="string">'/opt/'</span></span><br><span class="line"><span class="comment">#打包函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cd(des_locate):<span class="comment">#远程到目录/var/log/下</span></span><br><span class="line">        <span class="keyword">with</span> lcd(src_locate):<span class="comment">#本地目录切换到本地的/opt/</span></span><br><span class="line">            os.chdir(src_locate)<span class="comment">#本地目录切换到/opt</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'file_list.txt'</span>):<span class="comment">#判断本地文件是否存在，如果不存在新建一个空文件</span></span><br><span class="line">                os.system(<span class="string">'echo " "&gt; file_list.txt'</span>)</span><br><span class="line">            put(<span class="string">'file_list.txt'</span>,<span class="string">'file_list.txt'</span>)<span class="comment">#把本地opt下的file_list.txt文件上传到远程主机的/var/log下</span></span><br><span class="line">            run(<span class="string">'tar -zcvf my_pack.tar.gz %s --exclude-from=file_list.txt'</span> % (<span class="string">' '</span>.join(tar_files))) <span class="comment">#打包远端主机上满足boot.log-*的文件，并去除掉file_list.txt中的内容</span></span><br><span class="line"><span class="comment">#下载函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cd (des_locate):<span class="comment">#远程到目录/var/log下</span></span><br><span class="line">        <span class="keyword">with</span> lcd(src_locate):<span class="comment">#本地目录切换到本地的/opt/</span></span><br><span class="line">            get(<span class="string">'my_pack.tar.gz'</span>,<span class="string">'my_pack.tar.gz'</span>)<span class="comment">#将远程目录下的文件下载到本地</span></span><br><span class="line"></span><br><span class="line">    os.chdir(src_locate)<span class="comment">#切换本地目录</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'file_list.txt'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> f:<span class="comment">#创建文件</span></span><br><span class="line">        data=os.popen(<span class="string">'tar -tf my_pack.tar.gz'</span>)<span class="comment">#查看下载下来的压缩包内的内容并写到本地的file_list.txt文件中</span></span><br><span class="line">        file_list=data.readlines()<span class="comment">#格式列表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> file_list:<span class="comment">#循环写</span></span><br><span class="line">            f.write(i.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment">#解压函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpack</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> lcd(src_locate):<span class="comment">#切换目录</span></span><br><span class="line">        local(<span class="string">'tar -zxvf my_pack.tar.gz -C /opt/'</span>)<span class="comment">#本地执行解压</span></span><br><span class="line"><span class="comment">#删除函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cd(des_locate):<span class="comment">#切换目录</span></span><br><span class="line">        run(<span class="string">'rm -rf my_pack.tar.gz'</span>)<span class="comment">#远端执行删除操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"1:打包"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'2:下载'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'3:解压'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'4:删除'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'5:退出'</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        choice_num=raw_input(<span class="string">'输入序号来执行命令：'</span>)</span><br><span class="line">        <span class="keyword">if</span> choice_num==<span class="string">'1'</span>:</span><br><span class="line">            pack()</span><br><span class="line">        <span class="keyword">elif</span> choice_num==<span class="string">'2'</span>:</span><br><span class="line">            download()</span><br><span class="line">        <span class="keyword">elif</span> choice_num==<span class="string">'3'</span>:</span><br><span class="line">            unpack()</span><br><span class="line">        <span class="keyword">elif</span> choice_num==<span class="string">'4'</span>:</span><br><span class="line">            delete()</span><br><span class="line">        <span class="keyword">elif</span> choice_num==<span class="string">'5'</span>:</span><br><span class="line">            exit()</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="执行方法："><a href="#执行方法：" class="headerlink" title="执行方法："></a>执行方法：</h3><p>1、方法一</p><p>将代码保存在192.168.1.2上的任意目录下fabric.py文件，我是放在/opt/auto-get-log/目录下,依次执行pack、download、unpack、delete命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/auto-get-log/</span><br><span class="line">fab pack</span><br><span class="line">fab download</span><br><span class="line">fab unpack</span><br><span class="line">fab delete</span><br></pre></td></tr></table></figure><p>2、方法二</p><p>使用python即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/auto-get-log/</span><br><span class="line">python fabric.py</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>zabbix监控ibm-x3550-m3服务器</title>
      <link href="/2018/06/19/zabbix%E7%9B%91%E6%8E%A7ibm-x3550-m3%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <content type="html"><![CDATA[<p><strong> zabbix监控ibm-x3550-m3服务器：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h3><p>1、zabbix服务器 </p><p>ip：192.168.1.61</p><p>2、一台ibm x3550 m3服务器</p><p>ip：192.168.1.230</p><h3 id="开始步骤"><a href="#开始步骤" class="headerlink" title="开始步骤"></a>开始步骤</h3><h4 id="1、登录带外管理"><a href="#1、登录带外管理" class="headerlink" title="1、登录带外管理"></a>1、登录带外管理</h4><p>通过默认的带外管理ip、用户、密码能够登录到服务器的IMM管理界面，网页直接搭上IP即可,即可显示如下界面</p><p>ps：</p><p>IBM默认带外ip：192.168.70.200</p><p>默认用户：USERID</p><p>默认密码：PASSW0RD</p><p>注意密码中不是字母O而是数字0</p><p>登录即可</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/1.png" alt=""></p><h4 id="2、修改带外管理IP地址"><a href="#2、修改带外管理IP地址" class="headerlink" title="2、修改带外管理IP地址"></a>2、修改带外管理IP地址</h4><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/2.png" alt=""></p><h4 id="3、设置网络协议（snmp）"><a href="#3、设置网络协议（snmp）" class="headerlink" title="3、设置网络协议（snmp）"></a>3、设置网络协议（snmp）</h4><p>设置之前系统提示需要设置联系人和地址，随便填写一下即可，如图</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/3.png" alt=""></p><h4 id="4、设置告警"><a href="#4、设置告警" class="headerlink" title="4、设置告警"></a>4、设置告警</h4><p>即设置需要发送哪种类型的告警，此处全选，如图</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/4.png" alt=""></p><h4 id="5、设置snmp协议"><a href="#5、设置snmp协议" class="headerlink" title="5、设置snmp协议"></a>5、设置snmp协议</h4><p>此处三个协议全部enabled，community名称写public，类型选trap，主机名称或者ip地址选择zabbix服务端地址，如图</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/5.png" alt=""></p><h4 id="6、重启iMM"><a href="#6、重启iMM" class="headerlink" title="6、重启iMM"></a>6、重启iMM</h4><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/6.png" alt=""></p><h4 id="7、设置测试告警"><a href="#7、设置测试告警" class="headerlink" title="7、设置测试告警"></a>7、设置测试告警</h4><p>使用新的带外ip地址登录，为了测试告警trap是否能够发送，单机Alerts菜单，点击上方1～12的随便一个链接来创建，我这里点击了第一个</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/7-1.png" alt=""></p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/7-2.png" alt=""></p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/7-3.png" alt=""></p><h4 id="8、检查测试告警"><a href="#8、检查测试告警" class="headerlink" title="8、检查测试告警"></a>8、检查测试告警</h4><p>登录zabbix的服务端，查看snmp的日志，查看是否有刚才的测试告警发送过来</p><p>tail -f/var/log/snmptt/snmptt.log</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/8.png" alt=""></p><h4 id="9、添加zabbix主机"><a href="#9、添加zabbix主机" class="headerlink" title="9、添加zabbix主机"></a>9、添加zabbix主机</h4><p>在zabbix的web页面添加监控的主机，ip地址为刚才修改后的带外管理口ip，前提是要求zabbix服务端服务器带外口要ping通，图中snmp接口在监控服务器的告警信息时没有作用，因为告警信息相当于是被主动推送至zabbix服务端</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/9.png" alt=""></p><h4 id="10、添加主机item"><a href="#10、添加主机item" class="headerlink" title="10、添加主机item"></a>10、添加主机item</h4><p>添加192.168.1.230这台主机的监控item，类型选择SNMP trap，键值为snmptrap[“Critical”]，注意使用双引号，该监控项为提取trap告警信息中包含有Critical字符串的告警信息条目，可更换字符串，信息类型为日志或者文本都可以</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/10.png" alt=""></p><h4 id="11、添加主机item（fallback）"><a href="#11、添加主机item（fallback）" class="headerlink" title="11、添加主机item（fallback）"></a>11、添加主机item（fallback）</h4><p>添加主机的监控项，类型依然选择SNMP trap ，键值为snmptrap.fallback，该监控项为获取未匹配到的所有日志信息，信息类型选择文本</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/11.png" alt=""></p><h4 id="12、查看告警"><a href="#12、查看告警" class="headerlink" title="12、查看告警"></a>12、查看告警</h4><p>配置完成之后，前往监控web的最新数据中，查看刚才配置的监控项是否有新的数据</p><p>，我的测试中是拔插的服务器电源，所以过来的是严重电源告警</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/12-1.png" alt=""></p><p>如果是带外管理页面步骤7中的测试发送，则会出现在fallback的监控项中</p><p><img src="/2018/06/19/zabbix监控ibm-x3550-m3服务器/12-2.png" alt=""></p></the>]]></content>
      
      <categories>
          
          <category> operation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>zabbix用户密码修改</title>
      <link href="/2018/06/13/zabbix%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/"/>
      <content type="html"><![CDATA[<p><strong> zabbix用户密码修改：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>zabbix监控中当一般用户的密码忘记了也不要紧，可以通过管理员用户admin很容易的创建一个用户，然而。当管理员的密码忘记了，这时只能在数据库里进行修改。</p><p>zabbix前端用户的操作都保存在zabbix数据库的users表里</p><p>1.查看users表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1mysql&gt; desc users;</span><br><span class="line">2+----------------+---------------------+------+-----+---------+-------+</span><br><span class="line">3| Field          | Type                | Null | Key | Default | Extra |</span><br><span class="line">4+----------------+---------------------+------+-----+---------+-------+</span><br><span class="line">5| userid         | bigint(20) unsigned | NO   | PRI | NULL    |       |</span><br><span class="line">6| alias          | varchar(100)        | NO   | MUL |         |       |</span><br><span class="line">7| name           | varchar(100)        | NO   |     |         |       |</span><br><span class="line">8| surname        | varchar(100)        | NO   |     |         |       |</span><br><span class="line">9| passwd         | char(32)            | NO   |     |         |       |</span><br><span class="line">10| url            | varchar(255)        | NO   |     |         |       |</span><br><span class="line">11| autologin      | int(11)             | NO   |     | 0       |       |</span><br><span class="line">12| autologout     | int(11)             | NO   |     | 900     |       |</span><br><span class="line">13| lang           | varchar(5)          | NO   |     | en_GB   |       |</span><br><span class="line">14| refresh        | int(11)             | NO   |     | 30      |       |</span><br><span class="line">15| type           | int(11)             | NO   |     | 0       |       |</span><br><span class="line">16| theme          | varchar(128)        | NO   |     | default |       |</span><br><span class="line">17| attempt_failed | int(11)             | NO   |     | 0       |       |</span><br><span class="line">18| attempt_ip     | varchar(39)         | NO   |     |         |       |</span><br><span class="line">19| attempt_clock  | int(11)             | NO   |     | 0       |       |</span><br><span class="line">20| rows_per_page  | int(11)             | NO   |     | 50      |       |</span><br><span class="line">21+----------------+---------------------+------+-----+---------+-------+</span><br><span class="line">2216 rows in set (0.00 sec)</span><br><span class="line">23mysql&gt; select userid,name,passwd from users;</span><br><span class="line">24+--------+----------+----------------------------------+</span><br><span class="line">25| userid | name     | passwd                           |</span><br><span class="line">26+--------+----------+----------------------------------+</span><br><span class="line">27|      1 | Zabbix   | 5fce1b3e34b520afeffb37ce08c7cd66 |</span><br><span class="line">28|      2 | Default  | d41d8cd98f00b204e9800998ecf8427e |</span><br><span class="line">29|      3 | jiangtao | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">30+--------+----------+----------------------------------+</span><br><span class="line">313 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>2.修改admin用户的密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1mysql&gt; select userid,alias,passwd from users;   #查看</span><br><span class="line">2+--------+-------------+----------------------------------+</span><br><span class="line">3| userid | alias       | passwd                           |</span><br><span class="line">4+--------+-------------+----------------------------------+</span><br><span class="line">5|      1 | Admin       | 5fce1b3e34b520afeffb37ce08c7cd66 |</span><br><span class="line">6|      2 | guest       | d41d8cd98f00b204e9800998ecf8427e |</span><br><span class="line">7|      3 | zhujiangtao | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">8+--------+-------------+----------------------------------+</span><br><span class="line">93 rows in set (0.00 sec)</span><br><span class="line">10mysql&gt; update users set passwd=MD5(&apos;zhuzhu&apos;) where userid=1; #修改</span><br><span class="line">11Query OK, 1 row affected (0.01 sec)</span><br><span class="line">12Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line">13mysql&gt; select userid,alias,passwd from users;</span><br><span class="line">14+--------+-------------+----------------------------------+</span><br><span class="line">15| userid | alias       | passwd                           |</span><br><span class="line">16+--------+-------------+----------------------------------+</span><br><span class="line">17|      1 | Admin       | 8f1fa88773e0518f7446972f1ed74ab5 |</span><br><span class="line">18|      2 | guest       | d41d8cd98f00b204e9800998ecf8427e |</span><br><span class="line">19|      3 | zhujiangtao | e10adc3949ba59abbe56e057f20f883e |</span><br><span class="line">20+--------+-------------+----------------------------------+</span><br><span class="line">213 rows in set (0.00 sec)</span><br><span class="line">22mysql&gt; flush privileges;  #刷新权限</span><br><span class="line">23Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>3.登陆测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">也可用下面这种方法更新密码</span><br><span class="line">1[root@zhu2 ~]# echo -n &quot;zabbix&quot; | md5sum</span><br><span class="line">25fce1b3e34b520afeffb37ce08c7cd66  -</span><br><span class="line">3mysql&gt; update users set passwd=&apos;5fce1b3e34b520afeffb37ce08c7cd66&apos;  where userid=1;</span><br><span class="line">4Query OK, 1 row affected (0.01 sec)</span><br><span class="line">5Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line">6#和第一种方法大同小异，</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> operation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>zabbix监控MSSQL</title>
      <link href="/2018/06/13/zabbix%E7%9B%91%E6%8E%A7MSSQL/"/>
      <content type="html"><![CDATA[<p><strong> zabbix监控MSSQL：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>1.思路整理</p><p>1、在zabbix server上安装Freetds、unixODBC、unixODBC-devel使其能够访问SQL Server数据库。</p><p>2、配置ODBC访问Sql Server数据库。</p><p>3、定制SQL语句</p><p>4、在zabbix管理界面添加监控数据库的item。</p><p>2.操作过程</p><p>1、在zabbix server上安装Freetds、unixODBC、unixODBC-devel</p><p>#yuminstall unixODBC unixODBC-devel</p><p>​    注：freetds通常yum源里面没有，需要下载编译安装</p><p> #wget <a href="http://ibiblio.org/pub/Linux/ALPHA/freetds/stable/freetds-stable.tgz" target="_blank" rel="noopener">http://ibiblio.org/pub/Linux/ALPHA/freetds/stable/freetds-stable.tgz</a></p><p> tar -zxvf freetds-stable.tgz </p><p>  #cdfreetds-0.91/</p><p> #./configure –prefix=/usr/local/freetds –with-tdsver=8.0 –enable-msdblib</p><p>   #make</p><p>   #makeinstall</p><p>2、配置ODBC访问Sql Server数据库</p><p>a.查找libtdsodbc.so.0驱动的位置</p><p>#locate libtdsodbc.so.0</p><p>如果没有locate命令，安装mlocate执行</p><p>#yuminstall mlocate &amp;&amp; updatedb</p><p>找到libtdsodbc.so.0文件后复制其路径做个软连接</p><p>#ln -s/usr/local/freetds/lib/libtdsodbc.so.0 /usr/lib64/libtdsodbc.so.0</p><p>b.修改/etc/odbcinst.ini添加一行</p><p>#vim/etc/odbcinst.ini</p><p>[FreeTDS]</p><p>Driver =/usr/lib64/libtdsodbc.so.0</p><p>c.配置odbc连接信息</p><p>#vim/etc/odbc.ini #写入以下配置文件</p><p>[DBNAME]             #定义一个标识</p><p>Driver = FreeTDS</p><p>Server = [SQL Server IP]</p><p>PORT = 1433</p><p>TDS_Version = 8.0</p><p>#isql-v DBNAME（odbc.ini中定义的） 数据库账号数据库密码</p><p>d.连接数据库测试</p><p>连接到数据库并执行SQL测试</p><p><img src="file:///C:\Users\jingw\AppData\Local\Temp\msohtmlclip1\01\clip_image001.png" alt="image.png"></p><p>3、定制SQL语句因需求而异。</p><p>4、在zabbix管理界面添加监控数据库的item。</p><p>找到被监控的SQL Server主句，添加item  </p><p><img src="file:///C:\Users\jingw\AppData\Local\Temp\msohtmlclip1\01\clip_image001.png" alt="image.png"></p><p>zabbix采集到的数据。与上面SQL查询到的一致。</p><p>方法二 </p><ol><li>到官方下载模版</li></ol><p>下载地址：<a href="https://share.zabbix.com/databases/microsoft-sql-server/template-ms-sql-2012" target="_blank" rel="noopener">https://share.zabbix.com/databases/microsoft-sql-server/template-ms-sql-2012</a></p><ol><li>修改agentd.conf</li></ol><p>修改zabbix_agent.conf文件</p><p>添加下边这行到配置文件最后</p><p>UserParameter=sqldatabasename.discovery,powershell-NoProfile -ExecutionPolicy Bypass -FileC:\zabbix\scripts\SQLBaseName_To_Zabbix.ps1</p><p>将powershell脚本放在目录下</p><p>将SQLBaseName_To_Zabbix.ps1脚本放在C:\zabbix\scripts\目录下</p><ol><li><p>.重启agentd</p></li><li><p>导入模板文件</p></li></ol><p>导入模板MS SQL 2012.xml</p><p><img src="file:///C:\Users\jingw\AppData\Local\Temp\msohtmlclip1\01\clip_image002.png" alt="image.png"></p><p><img src="file:///C:\Users\jingw\AppData\Local\Temp\msohtmlclip1\01\clip_image002.png" alt="image.png"></p><p>5.主机应用模版</p></the>]]></content>
      
      <categories>
          
          <category> operation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机编码</title>
      <link href="/2018/05/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81/"/>
      <content type="html"><![CDATA[<p><strong> 计算机编码：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>本文转载：<a href="http://python.jobbole.com/87145/" target="_blank" rel="noopener">http://python.jobbole.com/87145/</a></p><p>在人机交互之字符编码 一文中对字符编码进行了详细的讨论，并通过一些简单的小程序验证了我们对于字符编码的认识。但仅了解这篇文章的内容，并不能帮我们在日常编程中躲过一些字符编码相关的坑，Stackoverflow 上就有大量编码相关的问题，比如 <a href="http://stackoverflow.com/questions/9942594/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa0-in-position-20" target="_blank" rel="noopener">1</a>，<a href="http://python.jobbole.com/87145/Convert%20Unicode%20to%20ASCII%20without%20errors" target="_blank" rel="noopener">2</a>，<a href="http://stackoverflow.com/questions/2688020/how-to-print-chinese-word-in-my-code-using-python" target="_blank" rel="noopener">3</a>。</p><p><img src="http://xuelangzf-github.qiniudn.com/20161228_encode_decode_1.png" alt="图1. 错误的编解码"></p><p>本文首先尝试对编码、解码进行一个<strong>宏观、直观</strong>的解读，然后详细来解释 python2 中的str和unicode，并对常见的UnicodeEncodeError 和 UnicodeDecodeError 异常进行剖析。</p><h1 id="如何理解编、解码？"><a href="#如何理解编、解码？" class="headerlink" title="如何理解编、解码？"></a>如何理解编、解码？</h1><p>如何去理解编码、解码？举个例子，Alice同学刚加入了机器学习这门课，想给同班的Bob同学打个招呼。但是作为人，Alice不能通过意念和Bob交流，必须通过某种方式，比如手语、声音、文字等来表达自己的想法。如果Alice选择用文字，那么他可能会写下这么一段文字：<code>My name is： boot …… 来学机器学习喽</code>，写文字这个过程其实就是<strong>编码</strong>，经过编码后的文字才能给Bob看。Bob收到Alice的文字后，就会用自己对文字的认知来解读Alice传达的含义，这个过程其实就是<strong>解码</strong>。当然，如果Bob不懂中文，那么就无法理解Alice的最后一句了，如果Bob不识字，就完全不知道Alice想表达什么了。</p><p>上面的例子只是为了方便我们理解编码、解码这个抽象的概念，现在来看看对于计算机程序来说，如何去理解字符的编码、解码过程。我们知道绝大多数程序都是读取数据，做一些操作，然后输出数据。比如当我们打开一个文本文件时，就会从硬盘读取文件中的数据，接着我们输入了新的数据，点击保存后，文本程序会将更新后的内容输出到硬盘。程序读取数据就相当于Bob读文字，必须进行一个解码的过程，解码后的数据才能让我们进行各种操作。同理，保存到硬盘时，也需要对数据进行编码。</p><p>下图方框 A 代表一个输出数据的程序，方框 B 代表一个读取数据的程序。当然这里的程序只是一个概念，表示一个处理数据的逻辑单元，可以是一个进程、一个函数甚至一个语句等。A 和 B 也可以是同一个程序，先解码外部获取的数据，内部操作后，再进行某种编码。</p><p><img src="http://xuelangzf-github.qiniudn.com/20161228_encode_decode_2.png" alt="图2. 编码、解码的过程"></p><p>值得注意的是，有的编码方案不一定能表示某些信息，这时编码就会失败，比如 ASCII 就不能用来表示中文。当然，如果以错误的方式去解读某段内容，解码也会失败，比如用 ASCII 来解读包含 UTF-8的信息。至于什么是 ASCII，UTF-8等，在<a href="http://selfboot.cn/2014/08/28/character_encoding/" target="_blank" rel="noopener">人机交互之字符编码</a> 中有详细的说明，这里不再赘述。下面结合具体的例子，来看看编码、解码的细节问题。</p><h1 id="python2-x-中的字符串"><a href="#python2-x-中的字符串" class="headerlink" title="python2.x 中的字符串"></a>python2.x 中的字符串</h1><p>在程序设计中，字符串一般是指一连串的<a href="https://docs.python.org/2/howto/unicode.html#definitions" target="_blank" rel="noopener">字符</a>，比如<code>hello world!</code>、<code>你好</code>或者<code>もしもし</code>（日语）等等。各种语言对于字符串的支持各不相同，Python 2 中字符串的设计颇不合理，导致新手经常会出现各种问题，类似下面的提示信息相信很多人都遇到过（<code>UnicodeEncodeError</code> 或者 <code>UnicodeDecodeError</code>）：</p><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>下面我们一起来解决这个疑难杂症。首先需要搞清楚python中的两个类型：<code>&lt;type &#39;str&#39;&gt;</code>和 <code>&lt;type &#39;unicode&#39;&gt;</code>，<a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" target="_blank" rel="noopener">文档</a>中关于这两个类型的说明其实挺含糊的：</p><blockquote><p>There are seven sequence types: strings, Unicode strings, lists, …</p><p>String literals are written in single or double quotes: ‘xyzzy’, “frobozz”. Unicode strings are much like strings, but are specified in the syntax using a preceding ‘u’ character: u’abc’, u”def”.</p></blockquote><p>上面并没有给出什么有用的信息，不过好在<a href="https://www.azavea.com/blog/2014/03/24/solving-unicode-problems-in-python-2-7/" target="_blank" rel="noopener">这篇文章</a>讲的特别好，简单来说：</p><ul><li>str：是<code>字节串（container for bytes）</code>，由 Unicode 经过编码(encode)后的字节组成的。</li><li>unicode：真正意义上的<code>字符串</code>，其中的每个字符用 Unicode 中对应的 <a href="https://en.wikipedia.org/wiki/Code_point" target="_blank" rel="noopener">Code Point</a> 表示。翻译成<strong>人话</strong>就是，unicode 有点类似于前面 Alice 打招呼传递的想法，而 str 则是写下来的文字（或者是说出来的声音，甚至可以是手语）。我们可以用 GBK，UTF-8 等编码方案将 Unicode 类型转换为 str 类型，类似于用语言、文字或者手语来表达想法。</li></ul><h2 id="repr-与终端交互"><a href="#repr-与终端交互" class="headerlink" title="repr 与终端交互"></a>repr 与终端交互</h2><p>  为了彻底理解字符编码、解码，下面要用 python 交互界面进行一些小实验来加深我们的理解（下面所有的交互代码均在 Linux 平台下）。在这之前，我们先来看下面交互代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo = <span class="string">'Test 试试'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo</span><br><span class="line"><span class="string">'Test \xe8\xaf\x95\xe8\xaf\x95'</span></span><br></pre></td></tr></table></figure><p>当我们只输入标识符 demo 时，终端返回了 demo 的内容。这里返回的内容是怎么得到呢？答案是通过 <a href="https://docs.python.org/2/library/functions.html#repr" target="_blank" rel="noopener">repr() 函数</a> 获得。文档中对于 repr 函数解释如下：</p><p>  > Return a string containing a printable representation of an object.</p><p>  所以，我们可以在源文件中用下面的代码，来获取和上面终端一样的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">demo = <span class="string">'Test 试试'</span></span><br><span class="line"><span class="keyword">print</span> repr(demo)</span><br><span class="line"><span class="comment"># 'Test \xe8\xaf\x95\xe8\xaf\x95'</span></span><br></pre></td></tr></table></figure><p>对于字符串来说，<code>repr()</code> 的返回值很好地说明了其在python内部的表示方式。通过 repr 的返回值，我们可以真切体会到前面提到的两点：</p><ul><li><p><strong>str：实际上是字节串</strong></p></li><li><p>unicode：真正意义上的字符串</p><p>下面分别来看看这两个类型。</p><p>​</p><h2 id="unicode-类型"><a href="#unicode-类型" class="headerlink" title="unicode 类型"></a>unicode 类型</h2><p><strong>unicode 是真正意义上的字符串</strong>，为了理解这句话，先看下面的一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>unicode_str = u’Welcome to 广州’ # ‘’前面的 u 表示这是一个 unicode 字符串</p><blockquote><p>unicode_str, type(unicode_str) # repr(unicode_str)<br>   Welcome to \u5e7f\u5dde’, <type 'unicode'="">)<br>1<br>2<br>3<br>unicode_str = u’Welcome to 广州’ # ‘’前面的 u 表示这是一个 unicode 字符串<br>unicode_str, type(unicode_str) # repr(unicode_str)<br>   Welcome to \u5e7f\u5dde’, <type 'unicode'="">)</type></type></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote></blockquote><p>repr 返回的 <code>Welcome to \u5e7f\u5dde</code> 说明了unicode_str存储的内容，其中两个<code>\u</code>后面的数字分别对应了<code>广、州</code>在unicode中的code point：</p></li><li><p><code>5e7f</code> 对应<code>广</code>字；</p></li><li><p>5dde</p></li></ul><p>  对应州字；英文字母也有对应的code point，它的值等于ASCII值，不过repr并没有直接输出。我们可以在</p><p>  站长工具中查看所有字符对应的code point。也可以用 python 的内置函数ord查看字符的 code point，如下所示（调用了 format 将code point转换为十六进制）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:04x&#125;'</span>.format(ord(<span class="string">u'广'</span>))</span><br><span class="line"><span class="string">'5e7f'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:04x&#125;'</span>.format(ord(<span class="string">u'W'</span>))</span><br><span class="line"><span class="string">'0057'</span></span><br></pre></td></tr></table></figure><p>  总结一下，我们可以将 <code>&amp;amp;lt;type &#39;unicode&#39;&amp;amp;gt;</code> 看作是<strong>一系列字符组成的数组</strong>，数组的每一项是一个code point，用来表示相应位置的字符。所以对于 unicode 来说，其长度等于它包含的字符（<code>a</code> 和 <code>广</code> 都是一个字符）的数目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(unicode_str)</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unicode_str[<span class="number">0</span>], unicode_str[<span class="number">12</span>], unicode_str[<span class="number">-1</span>]</span><br><span class="line">(<span class="string">u'W'</span>, <span class="string">u'\u5dde'</span>, <span class="string">u'\u5dde'</span>)</span><br></pre></td></tr></table></figure><h2 id="str-类型"><a href="#str-类型" class="headerlink" title="str 类型"></a>str 类型</h2><p>  <strong>str 是字节串（container for bytes）</strong>，为了理解这句话，先来看下面的一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_str = <span class="string">'Welcome to 广州'</span> <span class="comment"># 这是一个 str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_str, type(str_str)</span><br><span class="line">(<span class="string">'Welcome to \xe5\xb9\xbf\xe5\xb7\x9e'</span>, &lt;type <span class="string">'str'</span>&gt;)</span><br></pre></td></tr></table></figure><p>  python中 <code>\xhh</code>（h为16进制数字）表示一个字节，输出中的<code>\xe5\xb9\xbf\xe5\xb7\x9e</code> 就是所谓的字节串，它对应了<code>广州</code>。实际上 str_str 中的英文字母也是保存为字节串的，不过 repr 并没有以 <code>\x</code> 的形式返回。为了验证上面输出内容确实是<strong>字节串</strong>，我们用python提供的 <a href="https://docs.python.org/2.7/library/functions.html#bytearray" target="_blank" rel="noopener">bytearray 函数</a>将相同内容的 unicode字符串用 UTF-8 编码为字节数组，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>unicode_str = <span class="string">u'Welcome to 广州'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytearray(unicode_str, <span class="string">'UTF-8'</span>)</span><br><span class="line">bytearray(<span class="string">b'Welcome to \xe5\xb9\xbf\xe5\xb7\x9e'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(bytearray(unicode_str, <span class="string">'UTF-8'</span>)) </span><br><span class="line"><span class="comment"># 字节数组，每一项为一个字节；</span></span><br><span class="line">[<span class="number">87</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">229</span>, <span class="number">185</span>, <span class="number">191</span>, <span class="number">229</span>, <span class="number">183</span>, <span class="number">158</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">r"\x"</span> + <span class="string">r"\x"</span>.join([<span class="string">"%02x"</span> % c <span class="keyword">for</span> c <span class="keyword">in</span> list(bytearray(unicode_str, <span class="string">'UTF-8'</span>))])</span><br><span class="line"><span class="comment"># 转换为 \xhh 的形式</span></span><br><span class="line">\x57\x65\x6c\x63\x6f\x6d\x65\x20\x74\x6f\x20\xe5\xb9\xbf\xe5\xb7\x9e</span><br></pre></td></tr></table></figure><p>可见，上面的 str<em>str 是 unicode_str 经过 UTF-8 编码 后的字节串。这里透漏了一个十分重要的信息，**str类型隐含有某种编码方式**，正是这种隐式编码（_implicit encoding</em>）的存在导致了许多问题的出现（后面详细说明）。值得注意的是，str类型字节串的隐式编码不一定都是’UTF-8’，前面示例程序都是在 OS X 平台下的终端，所以隐式编码是 UTF-8。对于 Windows 而言，如果语言设置为简体中文，那么交互界面输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Win 平台下，系统语言为简体中文</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_str = <span class="string">'Welcome to 广州'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_str, type(str_str)</span><br><span class="line">(<span class="string">'Welcome to \xb9\xe3\xd6\xdd'</span>, &lt;type <span class="string">'str'</span>&gt;)</span><br></pre></td></tr></table></figure><p>这里str_str的隐式编码是<strong>cp936</strong>，可以用 <code>bytearray(unicode_str, &#39;cp936&#39;)</code> 来验证这点。终端下，str类型的隐式编码由系统 locale 决定，可以采用下面方式查看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Unix or Linux</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> locale</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>locale.getdefaultlocale() </span><br><span class="line">(<span class="string">'zh_CN'</span>, <span class="string">'UTF-8'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 简体中文 Windows</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>locale.getdefaultlocale() </span><br><span class="line">(<span class="string">'zh_CN'</span>, <span class="string">'cp936'</span>)</span><br></pre></td></tr></table></figure><p>总结一下，我们可以将 <code>&amp;amp;lt;type &#39;str&#39;&amp;amp;gt;</code> 看作是<strong>unicode字符串经过某种编码后的字节组成的数组</strong>。数组的每一项是一个字节，用 <code>\xhh</code> 来表示。所以对于 str 字符串来说，其长度等于编码后字节的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(str_str)</span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_str[<span class="number">0</span>], str_str[<span class="number">-1</span>]</span><br><span class="line">(<span class="string">'W'</span>, <span class="string">'\x9e'</span>) <span class="comment"># 实际上是('\x57', '\x9e')</span></span><br></pre></td></tr></table></figure><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>  Python 2.x 中为上面两种类型的字符串都提供了 <a href="https://docs.python.org/2/library/stdtypes.html#string-methods" target="_blank" rel="noopener">encode 和 decode</a> 方法，原型如下：</p><p>  > str.decode([encoding[, errors]]) &gt; str.encode([encoding[, errors]])</p><p>  利用上面的两个函数，可以实现 str 和 unicode 类型之间的相互转换，如下图所示：</p><p>  <img src="http://xuelangzf-github.qiniudn.com/20161228_encode_decode_3.png" alt="图3. 类型间相互转换"></p><p>  上图中绿色线段标示的即为我们常用的转换方法，红色标示的转换在 python 2.x 中是合法的，不过没有什么意义，通常会抛出错误（可以参见 <a href="http://stackoverflow.com/questions/447107/what-is-the-difference-between-encode-decode" target="_blank" rel="noopener">What is the difference between encode/decode?</a>）。下面是两种类型之间的转换示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decode： &lt;type 'str'&gt; 到 &lt;type 'unicode'&gt;的转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = str_str.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc, type(enc)</span><br><span class="line">(<span class="string">u'Welcome to \u5e7f\u5dde'</span>, &lt;type <span class="string">'unicode'</span>&gt;)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># encode： &lt;type 'unicode'&gt; 到 &lt;type 'str'&gt; 的转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec = unicode_str.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec, type(dec)</span><br><span class="line">(<span class="string">'Welcome to \xe5\xb9\xbf\xe5\xb7\x9e'</span>, &lt;type <span class="string">'str'</span>&gt;)</span><br></pre></td></tr></table></figure><p>  上面代码中通过encode将unicode类型<strong>编码</strong>为str类型，通过 decode 将str类型<strong>解码</strong>为unicode类型。当然，编码、解码的过程并不总是一帆风顺的，通常会出现各种错误。</p><h2 id="编、解码错误"><a href="#编、解码错误" class="headerlink" title="编、解码错误"></a>编、解码错误</h2><p>  Python 中经常会遇到 UnicodeEncodeError 和 UnicodeDecodeError，怎么产生的呢？ 如下代码所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'Hello 广州'</span>.encode(<span class="string">'ascii'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 6-7: ordinal not in range(128)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&gt;&gt;&gt; '</span>Hello 广州<span class="string">'.decode('</span>ascii<span class="string">')</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string"> File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">UnicodeDecodeError: '</span>ascii<span class="string">' codec can'</span>t decode byte <span class="number">0xe5</span> <span class="keyword">in</span> position <span class="number">6</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> range(<span class="number">128</span>)</span><br></pre></td></tr></table></figure><p>  当我们用 ascii 去编码带有中文的unicode字符串时，发生了UnicodeEncodeError，当我们用 ascii 去解码有中文的str字节串时，发生了UnicodeDecodeError。我们知道，ascii 只包含 127 个字符，根本无法表示中文。所以，让 ascii 来编码、解码中文，就超出了其能力范围。这就像你对一个不懂中文的老外说中文，他根本没法听懂。简单来说，<strong>所有的编码、解码错误都是由于所选的编码、解码方式无法表示某些字符造成的</strong>。</p><p>  有时候我们就是想用 ascii 去编码一段夹杂中文的str字节串，并不希望抛出异常。那么可以通过 errors 参数来指定当无法编码某个字符时的处理方式，常用的处理方式有 “strict”，”ignore”和”replace”。改动后的程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'Hello 广州'</span>.encode(<span class="string">'ascii'</span>, <span class="string">'replace'</span>)</span><br><span class="line"><span class="string">'Hello ??'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'Hello 广州'</span>.encode(<span class="string">'ascii'</span>, <span class="string">'ignore'</span>)</span><br><span class="line"><span class="string">'Hello</span></span><br></pre></td></tr></table></figure><h2 id="隐藏的解码"><a href="#隐藏的解码" class="headerlink" title="隐藏的解码"></a>隐藏的解码</h2><p>  str和unicode类型都可以用来表示字符串，为了方便它们之间进行操作，python并不要求在操作之前统一类型，所以下面的代码是合法的，并且能得到正确的输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_str = <span class="string">u'Welcome to '</span> + <span class="string">'GuangZhou'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_str, type(new_str)</span><br><span class="line">(<span class="string">u'Welcome to GuangZhou'</span>, &lt;type <span class="string">'unicode'</span>&gt;)</span><br></pre></td></tr></table></figure><p>  因为str类型是隐含有某种编码方式的字节码，所以python内部将其<strong>解码</strong>为unicode后，再和unicode类型进行 <code>+ 操作</code>，最后返回的结果也是unicode类型。</p><p>  第2步的解码过程是在幕后悄悄发生的，<strong>默认采用ascii来进行解码</strong>，可以通过 <code>sys.getdefaultencoding()</code> 来获取默认编码方式。Python 之所以采用 ascii，是因为 ascii 是最早的编码方式，是许多编码方式的子集。</p><p>  不过正是这个不可见的解码过程，有时候会导致出乎意料的解码错误，考虑下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'Welcome to'</span> + <span class="string">'广州'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xe5 in position 0: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>  上面在字符串的+操作时，python 偷偷对’广州’用 ascii 做解码操作，所以抛出了UnicodeDecodeError异常。其实上面操作等同于 <code>u&#39;Welcome to&#39; + &#39;广州&#39;.decode(&#39;ascii&#39;)</code> ，你会发现这句代码抛出的异常和上面的一模一样。</p><h2 id="隐藏的编码"><a href="#隐藏的编码" class="headerlink" title="隐藏的编码"></a>隐藏的编码</h2><p>  Python 不只偷偷地用 ascii 来解码str类型的字节串，有时还会偷偷用ascii来编码unicode类型。如果函数或类等对象接收的是 str 类型的字符串，但传进去的是unicode，python2 就会使用 ascii 将其编码成str类型再做运算。</p><p>  以raw_input为例，我们可以给 <a href="https://docs.python.org/2/library/functions.html#raw_input" target="_blank" rel="noopener">raw_input</a> 函数提供 prompt 参数，作为输入提示内容。这里如果 prompt 是 unicode 类型，python会先用ascii对其进行编码，所以下面代码会抛出UnicodeEncodeError异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = raw_input(<span class="string">u'请输入内容: '</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-4: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>  上面操作完全等同于 <code>a = raw_input(u&#39;请输入内容: &#39;.encode(&#39;ascii&#39;))</code>，你会发现它们抛出的异常完全一样。此外，如果尝试将unicode字符串重定向输出到文本中，也可能会抛出UnicodeEncodeError异常。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat a.py</span><br><span class="line">demo = u'Test 试试'</span><br><span class="line">print demo</span><br><span class="line"><span class="meta">$</span> python a.py &gt; output</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File "a.py", line 5, in &lt;module&gt;</span><br><span class="line"> print demo</span><br><span class="line">UnicodeEncodeError: 'ascii' codec can't encode characters in position 5-6: ordinal not in range(128)</span><br></pre></td></tr></table></figure><p>当然，如果直接在终端进行输出，则不会抛出异常。因为python会使用控制台的默认编码，而不是 ascii。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结下本文的内容：</p><ul><li>str可以看作是unicode字符串经过某种编码后的字节组成的数组</li><li>unicode是真正意义上的字符串</li><li>通过 encode 可以将unicode类型<strong>编码</strong>为str类型</li><li>通过 decode 可以将str类型<strong>解码</strong>为unicode类型</li><li>python 会隐式地进行编码、解码，默认采用 ascii</li><li>所有的编码、解码错误都是由于所选的编码、解码方式无法表示某些字符造成的</li></ul><p>如果你明白了上面每句话的含义，那么应该能解决大部分编、解码引起的问题了。当然，本篇文章其实并不能帮你完全避免python编码中的坑（坑太多）。还有许多问题在这里并没有说明：</p><ul><li>读取、写入文件时的编码问题：</li><li>数据库的读写</li><li>网络数据操作</li><li>源文件编码格式的指定</li></ul></the>]]></content>
      
      <categories>
          
          <category> feeling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多线程的一点思考</title>
      <link href="/2018/05/10/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
      <content type="html"><![CDATA[<p><strong> 多线程的一点思考：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>threading的run内容必须加lock，不然对于同样的操作，比如打印print a,self.name；在同一个时间点上，多个线程会打印出很长一句莫名其妙的拼接；可自行测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,id,name)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.id=id</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        a=[]</span><br><span class="line">        <span class="comment">#a.append('data')</span></span><br><span class="line">        <span class="comment">#print a,self.name</span></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-----------'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'bedig time:'</span>,datetime.datetime.now()</span><br><span class="line">        b = []</span><br><span class="line">        <span class="comment">#print b,id(b),self.name</span></span><br><span class="line">        b.append(<span class="string">'data'</span>)</span><br><span class="line">        <span class="keyword">print</span> b,self.name,id(b)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'end time:'</span>,datetime.datetime.now()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-----------'</span></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#print a,id(a)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    thread_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">        id=i</span><br><span class="line">        name=<span class="string">'Thread_%s'</span> % i</span><br><span class="line">        Thread=myThread(id,name)</span><br><span class="line">        thread_list.append(Thread)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> thread_list:</span><br><span class="line">        i.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> thread_list:</span><br><span class="line">        i.join()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-----------'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'bedig time:'</span>, datetime.datetime.now()</span><br><span class="line">        b = []</span><br><span class="line">        <span class="comment"># print b,id(b),self.name</span></span><br><span class="line">        b.append(<span class="string">'data'</span>)</span><br><span class="line">        <span class="keyword">print</span> b, id(b)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'end time:'</span>, datetime.datetime.now()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-----------'</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock=threading.Lock()</span><br><span class="line">    begin_time=datetime.datetime.now()</span><br><span class="line">    main()</span><br><span class="line">    end_time=datetime.datetime.now()</span><br><span class="line">    used_time=end_time - begin_time</span><br><span class="line">    <span class="keyword">print</span> used_time</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
            <tag> threading </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pandas操作excel</title>
      <link href="/2018/04/25/pandas%E6%93%8D%E4%BD%9Cexcel/"/>
      <content type="html"><![CDATA[<p><strong> pandas操作excel：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>无聊帮同事解决一个小需求</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="记录一："><a href="#记录一：" class="headerlink" title="记录一："></a>记录一：</h3><p>当天收到同事一个小需求，将一份excel文件里边的数据，批量生成数据库的插入语句，原始数据为第一行为列名，第一行之后的行数据为values值，即要插入的数据，要生成的表明为excel表单名称；</p><p>table-name2的内容如图一</p><p><img src="/2018/04/25/pandas操作excel/1.png" alt="图一"></p><p>标签名称如图二</p><p><img src="/2018/04/25/pandas操作excel/2.png" alt="图二"></p><p>要将上边的数据生成insert into table-name (columns-1,columns-2,columns-3,columns-4)  values(‘values-1’,’values-2’,’values-3’,’values-4’)的文本文件</p><p>掐指一算，可以利用pandas来实现，因为在学习ai，就不用xlwt模块了，下面贴上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#自行修改要读取的文件路径</span></span><br><span class="line">k=pd.ExcelFile(<span class="string">'C:\\Users\\jingw\\Desktop\\123.xlsx'</span>)</span><br><span class="line">sheet_names=k.sheet_names</span><br><span class="line"><span class="keyword">print</span> (sheet_names)</span><br><span class="line"><span class="keyword">for</span> sheet_num <span class="keyword">in</span> range(len(sheet_names)):</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'d:\\insert_sql.txt'</span>,<span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write((<span class="string">'--%s'</span> % sheet_names[sheet_num] + <span class="string">'\n'</span>).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    f=pd.read_excel(<span class="string">'C:\\Users\\jingw\\Desktop\\123.xlsx'</span>,sheetname=sheet_num)</span><br><span class="line">    my_columns = []</span><br><span class="line">    columns_len=len(f.columns)</span><br><span class="line">    j=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.columns:</span><br><span class="line">        my_columns.append(i)</span><br><span class="line">    <span class="comment">#print (my_columns)</span></span><br><span class="line">    my_columns_tuple = tuple(my_columns)</span><br><span class="line"></span><br><span class="line">    insert_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> my_columns:</span><br><span class="line">        <span class="keyword">if</span> insert_str==<span class="string">''</span>:</span><br><span class="line">            insert_str = insert_str + i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            insert_str = insert_str + <span class="string">','</span> + i</span><br><span class="line">    <span class="keyword">print</span> (insert_str)</span><br><span class="line">    my_insert_columns = <span class="string">'insert into %s (%s)'</span> % (sheet_names[sheet_num],insert_str) + <span class="string">' '</span>+ <span class="string">'values'</span></span><br><span class="line">    <span class="keyword">print</span> (my_insert_columns)</span><br><span class="line">    <span class="keyword">for</span> index,raws <span class="keyword">in</span> f.iterrows():</span><br><span class="line">        <span class="keyword">print</span> (raws)</span><br><span class="line">        insert_values = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(columns_len):</span><br><span class="line">            insert_values = insert_values +<span class="string">'"'</span>+ str(raws[i])+ <span class="string">'"'</span>+<span class="string">','</span></span><br><span class="line">        <span class="comment">#print (insert_values)</span></span><br><span class="line">        <span class="comment">#自行修改生成的文件路径</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'d:\\insert_sql.txt'</span>,<span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            insert_sql=<span class="string">''</span></span><br><span class="line">            insert_sql=my_insert_columns+<span class="string">'(%s)'</span> % insert_values[:<span class="number">-1</span>] + <span class="string">'\n'</span></span><br><span class="line">            <span class="keyword">print</span> (insert_sql)</span><br><span class="line">            f.write(insert_sql.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>最后实现结果，完美解决：</p><p><img src="/2018/04/25/pandas操作excel/3.png" alt="图三"></p><h3 id="记录二"><a href="#记录二" class="headerlink" title="记录二"></a>记录二</h3><p>之后同事又提出了需求，将一张sheet下的每一行分别写入其他多张sheet内（除去第一行），如下图</p><p><img src="/2018/04/25/pandas操作excel/2-1.png" alt="图2-1"></p><p>实现后的结果如下图</p><p><img src="/2018/04/25/pandas操作excel/2-2.png" alt="图2-2"></p><p><img src="/2018/04/25/pandas操作excel/2-3.png" alt="图2-3"></p><p><img src="/2018/04/25/pandas操作excel/2-4.png" alt="图2-4"></p><p>贴上代码，方便查阅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data=pd.read_excel(<span class="string">'C:\\Users\\jingw\\Desktop\\123.xlsx'</span>,sheetname=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#print (data.head(),data.shape[0])</span></span><br><span class="line">my_raws=data.shape[<span class="number">0</span>]</span><br><span class="line">my_max_columns=data.shape[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(my_raws):</span><br><span class="line">    <span class="comment">#print (data.loc[i][1:])</span></span><br><span class="line">    table_columns_length=data.loc[i][<span class="number">1</span>:]</span><br><span class="line">    data_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(table_columns_length)):</span><br><span class="line">        data_dict[j]=data.loc[i][j+<span class="number">1</span>]</span><br><span class="line">    df=pd.DataFrame(data=data_dict,index=[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">print</span> (df)</span><br><span class="line">    df.to_excel(excel_writer=<span class="string">'C:\\Users\\jingw\\Desktop\\%s.xlsx'</span> % data.loc[i][<span class="number">0</span>],sheet_name=data.loc[i][<span class="number">0</span>],)</span><br></pre></td></tr></table></figure><h3 id="记录三"><a href="#记录三" class="headerlink" title="记录三"></a>记录三</h3><p>后来这货又提出一个需求，把sheet1的数据插入到sheet0中，当然是按照每张sheet的第一行，也就是列值进行筛选，如果同时存在就将数据插入，如果不存在sheet0中的列，就不要，如果在sheet0中的列，又不在sheet1中的列，则生成结果置空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data0=pd.read_excel(<span class="string">'C:\\Users\\jingw\\Desktop\\123-3.xlsx'</span>,sheetname=<span class="number">0</span>)</span><br><span class="line">sheet0_columns=set(data0.head(<span class="number">1</span>))</span><br><span class="line">data1=pd.read_excel(<span class="string">'C:\\Users\\jingw\\Desktop\\123-3.xlsx'</span>,sheetname=<span class="number">1</span>)</span><br><span class="line">sheet1_columns=set(data1.head(<span class="number">1</span>))</span><br><span class="line">columns_union=sheet0_columns &amp; sheet1_columns</span><br><span class="line">columns_subtraction=sheet0_columns - sheet1_columns</span><br><span class="line"><span class="keyword">print</span> (columns_union)</span><br><span class="line"><span class="keyword">if</span> columns_union:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> columns_union:</span><br><span class="line">        data0[i]=data1[i]</span><br><span class="line"><span class="keyword">if</span> columns_subtraction:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> columns_subtraction:</span><br><span class="line">        data0[i]=<span class="keyword">None</span></span><br><span class="line"><span class="keyword">print</span> (data0.head())</span><br><span class="line">data0.to_excel(<span class="string">'C:\\Users\\jingw\\Desktop\\reulst.xlsx'</span>)</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> mlearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>连接linux远程登录无需密码</title>
      <link href="/2018/04/02/%E8%BF%9E%E6%8E%A5linux%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E6%97%A0%E9%9C%80%E5%AF%86%E7%A0%81/"/>
      <content type="html"><![CDATA[<p><strong> 连接linux远程登录无需密码：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>方法一：</p><p>1、生成本地主机的秘要公要；使用命令ssh-keygen命令，回车两次即可，生成的路径假设在path（mac本地机器生成在了user/zhoujingwei /.ssh/路径下）</p><p><img src="/2018/04/02/连接linux远程登录无需密码/1.png" alt=""></p><p>2、将文件上传到目的主机，使用命令即可</p><p>ssh-copy-id -i ~/.ssh/id_rsa.pub <a href="mailto:root@119.29.167.201" target="_blank" rel="noopener">root@119.29.167.201</a></p><p>方法二：</p><p>直接使用scp把公钥拷贝到remotehost，然后登陆的remotehost上创建文件~/.ssh/authorized_keys,<br>并把公钥的内容追加到这个文件中。</p><p>jsmith@local-host$ scp ~/.ssh/id_rsa.pub  usrname@remotehost:~/.ssh/</p><p>jsmith@local-host$  cat id_rsa.pub&gt;&gt;~/.ssh/authorized_keys</p></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免密登录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pandas模块的学习</title>
      <link href="/2018/03/16/Pandas%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p><strong> Pandas模块的学习：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>pandas 是基于 Numpy 构建的含有更高级数据结构和工具的数据分析包</p><p>类似于 Numpy 的核心是 ndarray，pandas 也是围绕着 Series 和 DataFrame 两个核心数据结构展开的 。Series 和 DataFrame 分别对应于一维的序列和二维的表结构。pandas 约定俗成的导入方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><hr><h3 id="Pandas代码学习-1"><a href="#Pandas代码学习-1" class="headerlink" title="Pandas代码学习(1)"></a>Pandas代码学习(1)</h3><p>pandas提供了读取文件的方法，pandas.read_csv()</p><p>查看dataframe数据框架中的各个字段的类型，可以调用实例的dypes属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line">food_info = pandas.read_csv(<span class="string">"food_info.csv"</span>)</span><br><span class="line">print(type(food_info))</span><br><span class="line"><span class="keyword">print</span> (food_info.dtypes)</span><br><span class="line"><span class="comment">#print (help(pandas.read_csv))</span></span><br></pre></td></tr></table></figure><p><class 'pandas.core.frame.dataframe'=""><br>NDB_No               int64<br>Shrt_Desc           object<br>Water_(g)          float64<br>Energ_Kcal           int64<br>Protein_(g)        float64<br>Lipid_Tot_(g)      float64<br>Ash_(g)            float64<br>Carbohydrt_(g)     float64<br>Fiber_TD_(g)       float64<br>Sugar_Tot_(g)      float64<br>Calcium_(mg)       float64<br>Iron_(mg)          float64<br>Magnesium_(mg)     float64<br>Phosphorus_(mg)    float64<br>Potassium_(mg)     float64<br>Sodium_(mg)        float64<br>Zinc_(mg)          float64<br>Copper_(mg)        float64<br>Manganese_(mg)     float64<br>Selenium_(mcg)     float64<br>Vit_C_(mg)         float64<br>Thiamin_(mg)       float64<br>Riboflavin_(mg)    float64<br>Niacin_(mg)        float64<br>Vit_B6_(mg)        float64<br>Vit_B12_(mcg)      float64<br>Vit_A_IU           float64<br>Vit_A_RAE          float64<br>Vit_E_(mg)         float64<br>Vit_D_mcg          float64<br>Vit_D_IU           float64<br>Vit_K_(mcg)        float64<br>FA_Sat_(g)         float64<br>FA_Mono_(g)        float64<br>FA_Poly_(g)        float64<br>Cholestrl_(mg)     float64<br>dtype: object</class></p><p>同ndarray的属性，dataframe查看前、后数据的方法为head()，tail()方法；</p><p>查看列名的话可以调用实例的columns属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (food_info.head(<span class="number">3</span>))</span><br><span class="line">first_rows = food_info.head()</span><br><span class="line">first_rows</span><br><span class="line"><span class="comment">#food_info.tail(4)</span></span><br><span class="line"><span class="comment">#print(food_info.tail(3))</span></span><br><span class="line"><span class="keyword">print</span> (food_info.columns)</span><br><span class="line"><span class="comment">#print (food_info.shape)</span></span><br></pre></td></tr></table></figure><p>NDB_No                 Shrt_Desc  Water_(g)  Energ_Kcal  Protein_(g)  \<br>0    1001          BUTTER WITH SALT      15.87         717         0.85<br>1    1002  BUTTER WHIPPED WITH SALT      15.87         717         0.85<br>2    1003      BUTTER OIL ANHYDROUS       0.24         876         0.28   </p><p>   Lipid_Tot_(g)  Ash_(g)  Carbohydrt_(g)  Fiber_TD_(g)  Sugar_Tot_(g)  \<br>0          81.11     2.11            0.06           0.0           0.06<br>1          81.11     2.11            0.06           0.0           0.06<br>2          99.48     0.00            0.00           0.0           0.00   </p><p>​        …        Vit_A_IU  Vit_A_RAE  Vit_E_(mg)  Vit_D_mcg  Vit_D_IU  \<br>0       …          2499.0      684.0        2.32        1.5      60.0<br>1       …          2499.0      684.0        2.32        1.5      60.0<br>2       …          3069.0      840.0        2.80        1.8      73.0   </p><p>   Vit_K_(mcg)  FA_Sat_(g)  FA_Mono_(g)  FA_Poly_(g)  Cholestrl_(mg)<br>0          7.0      51.368       21.021        3.043           215.0<br>1          7.0      50.489       23.426        3.012           219.0<br>2          8.6      61.924       28.732        3.694           256.0  </p><p>[3 rows x 36 columns]<br>Index([‘NDB_No’, ‘Shrt_Desc’, ‘Water_(g)’, ‘Energ_Kcal’, ‘Protein_(g)’,<br>​       ‘Lipid_Tot_(g)’, ‘Ash_(g)’, ‘Carbohydrt_(g)’, ‘Fiber_TD_(g)’,<br>​       ‘Sugar_Tot_(g)’, ‘Calcium_(mg)’, ‘Iron_(mg)’, ‘Magnesium_(mg)’,<br>​       ‘Phosphorus_(mg)’, ‘Potassium_(mg)’, ‘Sodium_(mg)’, ‘Zinc_(mg)’,<br>​       ‘Copper_(mg)’, ‘Manganese_(mg)’, ‘Selenium_(mcg)’, ‘Vit_C_(mg)’,<br>​       ‘Thiamin_(mg)’, ‘Riboflavin_(mg)’, ‘Niacin_(mg)’, ‘Vit_B6_(mg)’,<br>​       ‘Vit_B12_(mcg)’, ‘Vit_A_IU’, ‘Vit_A_RAE’, ‘Vit_E_(mg)’, ‘Vit_D_mcg’,<br>​       ‘Vit_D_IU’, ‘Vit_K_(mcg)’, ‘FA_Sat_(g)’, ‘FA_Mono_(g)’, ‘FA_Poly_(g)’,<br>​       ‘Cholestrl_(mg)’],<br>​      dtype=’object’)</p><p>想要调用指定位置的行数据，调用实例的loc方法，并指定索引区间；df使用的从零开始的索引顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pandas uses zero-indexing</span></span><br><span class="line"><span class="comment">#Series object representing the row at index 0.</span></span><br><span class="line"><span class="comment">#print (food_info.loc[0:1])</span></span><br><span class="line">food_info.loc[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line"><span class="comment"># Series object representing the seventh row.</span></span><br><span class="line"><span class="comment">#food_info.loc[6]</span></span><br><span class="line"><span class="comment"># Will throw an error: "KeyError: 'the label [8620] is not in the [index]'"</span></span><br><span class="line"><span class="comment">#food_info.loc[8620]</span></span><br><span class="line"><span class="comment">#The object dtype is equivalent to a string in Python</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>NDB_No</th><th>Shrt_Desc</th><th>Water_(g)</th><th>Energ_Kcal</th><th>Protein_(g)</th><th>Lipid_Tot_(g)</th><th>Ash_(g)</th><th>Carbohydrt_(g)</th><th>Fiber_TD_(g)</th><th>Sugar_Tot_(g)</th><th>…</th><th>Vit_A_IU</th><th>Vit_A_RAE</th><th>Vit_E_(mg)</th><th>Vit_D_mcg</th><th>Vit_D_IU</th><th>Vit_K_(mcg)</th><th>FA_Sat_(g)</th><th>FA_Mono_(g)</th><th>FA_Poly_(g)</th><th>Cholestrl_(mg)</th><th></th></tr></thead><tbody><tr><td>0</td><td>1001</td><td>BUTTER WITH SALT</td><td>15.87</td><td>717</td><td>0.85</td><td>81.11</td><td>2.11</td><td>0.06</td><td>0.0</td><td>0.06</td><td>…</td><td>2499.0</td><td>684.0</td><td>2.32</td><td>1.5</td><td>60.0</td><td>7.0</td><td>51.368</td><td>21.021</td><td>3.043</td><td>215.0</td></tr><tr><td>1</td><td>1002</td><td>BUTTER WHIPPED WITH SALT</td><td>15.87</td><td>717</td><td>0.85</td><td>81.11</td><td>2.11</td><td>0.06</td><td>0.0</td><td>0.06</td><td>…</td><td>2499.0</td><td>684.0</td><td>2.32</td><td>1.5</td><td>60.0</td><td>7.0</td><td>50.489</td><td>23.426</td><td>3.012</td><td>219.0</td></tr></tbody></table><p>2 rows × 36 columns</p><p>调用dtypes查看出来的类型分类如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#object - For string values</span></span><br><span class="line"><span class="comment">#int - For integer values</span></span><br><span class="line"><span class="comment">#float - For float values</span></span><br><span class="line"><span class="comment">#datetime - For time values</span></span><br><span class="line"><span class="comment">#bool - For Boolean values</span></span><br><span class="line">food_info.dtypes</span><br></pre></td></tr></table></figure><p>loc的参数为行数的列表或者列表区间，food_info.loc[[2,5,10]]查看2、5、10行的数据，注意loc的参数是一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Returns a DataFrame containing the rows at indexes 3, 4, 5, and 6.</span></span><br><span class="line">food_info.loc[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line"><span class="comment"># Returns a DataFrame containing the rows at indexes 2, 5, and 10. Either of the following approaches will work.</span></span><br><span class="line"><span class="comment"># Method 1</span></span><br><span class="line"><span class="comment">#two_five_ten = [2,5,10] </span></span><br><span class="line"><span class="comment">#food_info.loc[two_five_ten]</span></span><br><span class="line"><span class="comment"># Method 2</span></span><br><span class="line"><span class="comment">#food_info.loc[[2,5,10]]</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>NDB_No</th><th>Shrt_Desc</th><th>Water_(g)</th><th>Energ_Kcal</th><th>Protein_(g)</th><th>Lipid_Tot_(g)</th><th>Ash_(g)</th><th>Carbohydrt_(g)</th><th>Fiber_TD_(g)</th><th>Sugar_Tot_(g)</th><th>…</th><th>Vit_A_IU</th><th>Vit_A_RAE</th><th>Vit_E_(mg)</th><th>Vit_D_mcg</th><th>Vit_D_IU</th><th>Vit_K_(mcg)</th><th>FA_Sat_(g)</th><th>FA_Mono_(g)</th><th>FA_Poly_(g)</th><th>Cholestrl_(mg)</th><th></th></tr></thead><tbody><tr><td>3</td><td>1004</td><td>CHEESE BLUE</td><td>42.41</td><td>353</td><td>21.40</td><td>28.74</td><td>5.11</td><td>2.34</td><td>0.0</td><td>0.50</td><td>…</td><td>721.0</td><td>198.0</td><td>0.25</td><td>0.5</td><td>21.0</td><td>2.4</td><td>18.669</td><td>7.778</td><td>0.800</td><td>75.0</td></tr><tr><td>4</td><td>1005</td><td>CHEESE BRICK</td><td>41.11</td><td>371</td><td>23.24</td><td>29.68</td><td>3.18</td><td>2.79</td><td>0.0</td><td>0.51</td><td>…</td><td>1080.0</td><td>292.0</td><td>0.26</td><td>0.5</td><td>22.0</td><td>2.5</td><td>18.764</td><td>8.598</td><td>0.784</td><td>94.0</td></tr><tr><td>5</td><td>1006</td><td>CHEESE BRIE</td><td>48.42</td><td>334</td><td>20.75</td><td>27.68</td><td>2.70</td><td>0.45</td><td>0.0</td><td>0.45</td><td>…</td><td>592.0</td><td>174.0</td><td>0.24</td><td>0.5</td><td>20.0</td><td>2.3</td><td>17.410</td><td>8.013</td><td>0.826</td><td>100.0</td></tr><tr><td>6</td><td>1007</td><td>CHEESE CAMEMBERT</td><td>51.80</td><td>300</td><td>19.80</td><td>24.26</td><td>3.68</td><td>0.46</td><td>0.0</td><td>0.46</td><td>…</td><td>820.0</td><td>241.0</td><td>0.21</td><td>0.4</td><td>18.0</td><td>2.0</td><td>15.259</td><td>7.023</td><td>0.724</td><td>72.0</td></tr></tbody></table><p>4 rows × 36 columns</p><p>dataframe支持直接输入列名字符串来作为获取列值数据，或者是输入包含列名的字符串变量；</p><p>计算数据长度的话可以使用先取出某一列的数据列表，然后使用列表的len方法计算数据行数,查看所有列的行数的话使用df的count方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Series object representing the "NDB_No" column.</span></span><br><span class="line">ndb_col = food_info[<span class="string">"NDB_No"</span>]</span><br><span class="line"><span class="comment">#print (ndb_col)</span></span><br><span class="line"><span class="keyword">print</span> (len(ndb_col))</span><br><span class="line"><span class="keyword">print</span> (food_info.count())</span><br><span class="line"><span class="comment"># Alternatively, you can access a column by passing in a string variable.</span></span><br><span class="line"><span class="comment">#col_name = "NDB_No"</span></span><br><span class="line"><span class="comment">#ndb_col = food_info[col_name]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">8618</span></span><br><span class="line"><span class="string">NDB_No             8618</span></span><br><span class="line"><span class="string">Shrt_Desc          8618</span></span><br><span class="line"><span class="string">Water_(g)          8612</span></span><br><span class="line"><span class="string">Energ_Kcal         8618</span></span><br><span class="line"><span class="string">Protein_(g)        8618</span></span><br><span class="line"><span class="string">Lipid_Tot_(g)      8618</span></span><br><span class="line"><span class="string">Ash_(g)            8286</span></span><br><span class="line"><span class="string">Carbohydrt_(g)     8618</span></span><br><span class="line"><span class="string">Fiber_TD_(g)       7962</span></span><br><span class="line"><span class="string">Sugar_Tot_(g)      6679</span></span><br><span class="line"><span class="string">Calcium_(mg)       8264</span></span><br><span class="line"><span class="string">Iron_(mg)          8471</span></span><br><span class="line"><span class="string">Magnesium_(mg)     7936</span></span><br><span class="line"><span class="string">Phosphorus_(mg)    8046</span></span><br><span class="line"><span class="string">Potassium_(mg)     8208</span></span><br><span class="line"><span class="string">Sodium_(mg)        8535</span></span><br><span class="line"><span class="string">Zinc_(mg)          7917</span></span><br><span class="line"><span class="string">Copper_(mg)        7363</span></span><br><span class="line"><span class="string">Manganese_(mg)     6478</span></span><br><span class="line"><span class="string">Selenium_(mcg)     6868</span></span><br><span class="line"><span class="string">Vit_C_(mg)         7826</span></span><br><span class="line"><span class="string">Thiamin_(mg)       7939</span></span><br><span class="line"><span class="string">Riboflavin_(mg)    7961</span></span><br><span class="line"><span class="string">Niacin_(mg)        7937</span></span><br><span class="line"><span class="string">Vit_B6_(mg)        7677</span></span><br><span class="line"><span class="string">Vit_B12_(mcg)      7427</span></span><br><span class="line"><span class="string">Vit_A_IU           7932</span></span><br><span class="line"><span class="string">Vit_A_RAE          7089</span></span><br><span class="line"><span class="string">Vit_E_(mg)         5613</span></span><br><span class="line"><span class="string">Vit_D_mcg          5319</span></span><br><span class="line"><span class="string">Vit_D_IU           5320</span></span><br><span class="line"><span class="string">Vit_K_(mcg)        4969</span></span><br><span class="line"><span class="string">FA_Sat_(g)         8274</span></span><br><span class="line"><span class="string">FA_Mono_(g)        7947</span></span><br><span class="line"><span class="string">FA_Poly_(g)        7954</span></span><br><span class="line"><span class="string">Cholestrl_(mg)     8250</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>取某几列的一般方法就是做一个列名列表，并作为df的入参DF.[列名列表]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">columns = [<span class="string">"Zinc_(mg)"</span>, <span class="string">"Copper_(mg)"</span>,<span class="string">"Energ_Kcal"</span>]</span><br><span class="line"><span class="keyword">print</span> (type(food_info.columns))</span><br><span class="line">zinc_copper = food_info[columns]</span><br><span class="line"><span class="keyword">print</span> (zinc_copper)</span><br><span class="line"><span class="comment">#print zinc_copper</span></span><br><span class="line"><span class="comment"># Skipping the assignment.</span></span><br><span class="line"><span class="comment">#zinc_copper = food_info[["Zinc_(mg)", "Copper_(mg)"]]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;class 'pandas.core.indexes.base.Index'&gt;</span></span><br><span class="line"><span class="string">      Zinc_(mg)  Copper_(mg)  Energ_Kcal</span></span><br><span class="line"><span class="string">0          0.09        0.000         717</span></span><br><span class="line"><span class="string">1          0.05        0.016         717</span></span><br><span class="line"><span class="string">2          0.01        0.001         876</span></span><br><span class="line"><span class="string">3          2.66        0.040         353</span></span><br><span class="line"><span class="string">4          2.60        0.024         371</span></span><br><span class="line"><span class="string">5          2.38        0.019         334</span></span><br><span class="line"><span class="string">6          2.38        0.021         300</span></span><br><span class="line"><span class="string">7          2.94        0.024         376</span></span><br><span class="line"><span class="string">8          3.43        0.056         406</span></span><br><span class="line"><span class="string">9          2.79        0.042         387</span></span><br><span class="line"><span class="string">10         3.07        0.042         394</span></span><br><span class="line"><span class="string">11         0.40        0.029          98</span></span><br><span class="line"><span class="string">12         0.33        0.040          97</span></span><br><span class="line"><span class="string">13         0.47        0.030          72</span></span><br><span class="line"><span class="string">14         0.51        0.033          81</span></span><br><span class="line"><span class="string">15         0.38        0.028          72</span></span><br><span class="line"><span class="string">16         0.51        0.019         342</span></span><br><span class="line"><span class="string">17         3.75        0.036         357</span></span><br><span class="line"><span class="string">18         2.88        0.032         264</span></span><br><span class="line"><span class="string">19         3.50        0.025         389</span></span><br><span class="line"><span class="string">20         1.14        0.080         466</span></span><br><span class="line"><span class="string">21         3.90        0.036         356</span></span><br><span class="line"><span class="string">22         3.90        0.032         413</span></span><br><span class="line"><span class="string">23         2.10        0.021         327</span></span><br><span class="line"><span class="string">24         3.00        0.032         373</span></span><br><span class="line"><span class="string">25         2.92        0.011         300</span></span><br><span class="line"><span class="string">26         2.46        0.022         318</span></span><br><span class="line"><span class="string">27         2.76        0.025         254</span></span><br><span class="line"><span class="string">28         3.61        0.034         301</span></span><br><span class="line"><span class="string">29         2.81        0.031         368</span></span><br><span class="line"><span class="string"><span class="meta">... </span>        ...          ...         ...</span></span><br><span class="line"><span class="string">8588       3.30        0.377         389</span></span><br><span class="line"><span class="string">8589       0.05        0.040          91</span></span><br><span class="line"><span class="string">8590       0.05        0.030          68</span></span><br><span class="line"><span class="string">8591       1.15        0.116         465</span></span><br><span class="line"><span class="string">8592       5.03        0.200         401</span></span><br><span class="line"><span class="string">8593       3.83        0.545         429</span></span><br><span class="line"><span class="string">8594       0.08        0.035          73</span></span><br><span class="line"><span class="string">8595       3.90        0.027         179</span></span><br><span class="line"><span class="string">8596       4.10        0.100         377</span></span><br><span class="line"><span class="string">8597       3.13        0.027         280</span></span><br><span class="line"><span class="string">8598       0.13        0.000         688</span></span><br><span class="line"><span class="string">8599       0.02        0.000         884</span></span><br><span class="line"><span class="string">8600       0.09        0.037         279</span></span><br><span class="line"><span class="string">8601       0.21        0.026         257</span></span><br><span class="line"><span class="string">8602       2.77        0.571         319</span></span><br><span class="line"><span class="string">8603       0.41        0.838         356</span></span><br><span class="line"><span class="string">8604       0.05        0.028          62</span></span><br><span class="line"><span class="string">8605       0.03        0.023         179</span></span><br><span class="line"><span class="string">8606       0.10        0.112         181</span></span><br><span class="line"><span class="string">8607       0.02        0.020         287</span></span><br><span class="line"><span class="string">8608       1.49        0.854         365</span></span><br><span class="line"><span class="string">8609       0.19        0.040         351</span></span><br><span class="line"><span class="string">8610       0.10        0.038         350</span></span><br><span class="line"><span class="string">8611       0.85        0.182         370</span></span><br><span class="line"><span class="string">8612       1.00        0.250          73</span></span><br><span class="line"><span class="string">8613       1.10        0.100         305</span></span><br><span class="line"><span class="string">8614       1.55        0.033         111</span></span><br><span class="line"><span class="string">8615       0.19        0.020         269</span></span><br><span class="line"><span class="string">8616       1.00        0.400          90</span></span><br><span class="line"><span class="string">8617       1.00        0.250          89</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[8618 rows x 3 columns]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>DF的列名类型为<class 'pandas.core.indexes.base.index'=""></class></p><p>如果要方便的操作列名，columns集成了tolist()方法直接变成列表形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#print(food_info.columns)</span></span><br><span class="line"><span class="comment">#print(food_info.head(2))</span></span><br><span class="line">col_names = food_info.columns.tolist()</span><br><span class="line"><span class="keyword">print</span> (col_names)</span><br><span class="line">gram_columns = []</span><br><span class="line"><span class="comment">#如果有的字段为(g)结尾，取出作为我们想要的数据</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> col_names:</span><br><span class="line">    <span class="keyword">if</span> c.endswith(<span class="string">"(g)"</span>):</span><br><span class="line">        gram_columns.append(c)</span><br><span class="line">gram_df = food_info[gram_columns]</span><br><span class="line">print(gram_df.head(<span class="number">3</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">['NDB_No', 'Shrt_Desc', 'Water_(g)', 'Energ_Kcal', 'Protein_(g)', 'Lipid_Tot_(g)', 'Ash_(g)', 'Carbohydrt_(g)', 'Fiber_TD_(g)', 'Sugar_Tot_(g)', 'Calcium_(mg)', 'Iron_(mg)', 'Magnesium_(mg)', 'Phosphorus_(mg)', 'Potassium_(mg)', 'Sodium_(mg)', 'Zinc_(mg)', 'Copper_(mg)', 'Manganese_(mg)', 'Selenium_(mcg)', 'Vit_C_(mg)', 'Thiamin_(mg)', 'Riboflavin_(mg)', 'Niacin_(mg)', 'Vit_B6_(mg)', 'Vit_B12_(mcg)', 'Vit_A_IU', 'Vit_A_RAE', 'Vit_E_(mg)', 'Vit_D_mcg', 'Vit_D_IU', 'Vit_K_(mcg)', 'FA_Sat_(g)', 'FA_Mono_(g)', 'FA_Poly_(g)', 'Cholestrl_(mg)']</span></span><br><span class="line"><span class="string">   Water_(g)  Protein_(g)  Lipid_Tot_(g)  Ash_(g)  Carbohydrt_(g)  \</span></span><br><span class="line"><span class="string">0      15.87         0.85          81.11     2.11            0.06   </span></span><br><span class="line"><span class="string">1      15.87         0.85          81.11     2.11            0.06   </span></span><br><span class="line"><span class="string">2       0.24         0.28          99.48     0.00            0.00   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Fiber_TD_(g)  Sugar_Tot_(g)  FA_Sat_(g)  FA_Mono_(g)  FA_Poly_(g)  </span></span><br><span class="line"><span class="string">0           0.0           0.06      51.368       21.021        3.043  </span></span><br><span class="line"><span class="string">1           0.0           0.06      50.489       23.426        3.012  </span></span><br><span class="line"><span class="string">2           0.0           0.00      61.924       28.732        3.694  </span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h3 id="Pandas代码学习-2"><a href="#Pandas代码学习-2" class="headerlink" title="Pandas代码学习(2)"></a>Pandas代码学习(2)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line">food_info = pandas.read_csv(<span class="string">"food_info.csv"</span>)</span><br><span class="line">col_names = food_info.columns.tolist()</span><br><span class="line">print(col_names)</span><br><span class="line">print(food_info.head(<span class="number">3</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import pandas</span></span><br><span class="line"><span class="string">food_info = pandas.read_csv("food_info.csv")</span></span><br><span class="line"><span class="string">col_names = food_info.columns.tolist()</span></span><br><span class="line"><span class="string">print(col_names)</span></span><br><span class="line"><span class="string">print(food_info.head(3))</span></span><br><span class="line"><span class="string">import pandas</span></span><br><span class="line"><span class="string">food_info = pandas.read_csv("food_info.csv")</span></span><br><span class="line"><span class="string">col_names = food_info.columns.tolist()</span></span><br><span class="line"><span class="string">print(col_names)</span></span><br><span class="line"><span class="string">print(food_info.head(3))</span></span><br><span class="line"><span class="string">['NDB_No', 'Shrt_Desc', 'Water_(g)', 'Energ_Kcal', 'Protein_(g)', 'Lipid_Tot_(g)', 'Ash_(g)', 'Carbohydrt_(g)', 'Fiber_TD_(g)', 'Sugar_Tot_(g)', 'Calcium_(mg)', 'Iron_(mg)', 'Magnesium_(mg)', 'Phosphorus_(mg)', 'Potassium_(mg)', 'Sodium_(mg)', 'Zinc_(mg)', 'Copper_(mg)', 'Manganese_(mg)', 'Selenium_(mcg)', 'Vit_C_(mg)', 'Thiamin_(mg)', 'Riboflavin_(mg)', 'Niacin_(mg)', 'Vit_B6_(mg)', 'Vit_B12_(mcg)', 'Vit_A_IU', 'Vit_A_RAE', 'Vit_E_(mg)', 'Vit_D_mcg', 'Vit_D_IU', 'Vit_K_(mcg)', 'FA_Sat_(g)', 'FA_Mono_(g)', 'FA_Poly_(g)', 'Cholestrl_(mg)']</span></span><br><span class="line"><span class="string">   NDB_No                 Shrt_Desc  Water_(g)  Energ_Kcal  Protein_(g)  \</span></span><br><span class="line"><span class="string">0    1001          BUTTER WITH SALT      15.87         717         0.85   </span></span><br><span class="line"><span class="string">1    1002  BUTTER WHIPPED WITH SALT      15.87         717         0.85   </span></span><br><span class="line"><span class="string">2    1003      BUTTER OIL ANHYDROUS       0.24         876         0.28   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Lipid_Tot_(g)  Ash_(g)  Carbohydrt_(g)  Fiber_TD_(g)  Sugar_Tot_(g)  \</span></span><br><span class="line"><span class="string">0          81.11     2.11            0.06           0.0           0.06   </span></span><br><span class="line"><span class="string">1          81.11     2.11            0.06           0.0           0.06   </span></span><br><span class="line"><span class="string">2          99.48     0.00            0.00           0.0           0.00   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ...        Vit_A_IU  Vit_A_RAE  Vit_E_(mg)  Vit_D_mcg  Vit_D_IU  \</span></span><br><span class="line"><span class="string">0       ...          2499.0      684.0        2.32        1.5      60.0   </span></span><br><span class="line"><span class="string">1       ...          2499.0      684.0        2.32        1.5      60.0   </span></span><br><span class="line"><span class="string">2       ...          3069.0      840.0        2.80        1.8      73.0   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Vit_K_(mcg)  FA_Sat_(g)  FA_Mono_(g)  FA_Poly_(g)  Cholestrl_(mg)  </span></span><br><span class="line"><span class="string">0          7.0      51.368       21.021        3.043           215.0  </span></span><br><span class="line"><span class="string">1          7.0      50.489       23.426        3.012           219.0  </span></span><br><span class="line"><span class="string">2          8.6      61.924       28.732        3.694           256.0  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[3 rows x 36 columns]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>做加减乘除法运算的情况下，每一个value都要进行相应的运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Iron_(mg)"</span>][<span class="number">0</span>:<span class="number">10</span>])</span><br><span class="line">div_1000 = food_info[<span class="string">"Iron_(mg)"</span>] [<span class="number">100</span>:<span class="number">110</span>]/ <span class="number">1000</span></span><br><span class="line"><span class="keyword">print</span> (div_1000)</span><br><span class="line"><span class="comment"># Adds 100 to each value in the column and returns a Series object.</span></span><br><span class="line"><span class="comment">#add_100 = food_info["Iron_(mg)"] + 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subtracts 100 from each value in the column and returns a Series object.</span></span><br><span class="line"><span class="comment">#sub_100 = food_info["Iron_(mg)"] - 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiplies each value in the column by 2 and returns a Series object.</span></span><br><span class="line"><span class="comment">#mult_2 = food_info["Iron_(mg)"]*2</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">276      0.33</span></span><br><span class="line"><span class="string">5814     0.00</span></span><br><span class="line"><span class="string">6192     7.07</span></span><br><span class="line"><span class="string">1242     1.00</span></span><br><span class="line"><span class="string">1245     1.87</span></span><br><span class="line"><span class="string">1243     2.23</span></span><br><span class="line"><span class="string">1244     1.03</span></span><br><span class="line"><span class="string">292      0.00</span></span><br><span class="line"><span class="string">1254     9.30</span></span><br><span class="line"><span class="string">5811    11.02</span></span><br><span class="line"><span class="string">Name: Iron_(mg), dtype: float64</span></span><br><span class="line"><span class="string">1653    0.00156</span></span><br><span class="line"><span class="string">1574    0.00393</span></span><br><span class="line"><span class="string">6356    0.00167</span></span><br><span class="line"><span class="string">163     0.00016</span></span><br><span class="line"><span class="string">132     0.00087</span></span><br><span class="line"><span class="string">2729    0.00095</span></span><br><span class="line"><span class="string">5912    0.00381</span></span><br><span class="line"><span class="string">8501    0.00077</span></span><br><span class="line"><span class="string">212     0.00063</span></span><br><span class="line"><span class="string">41      0.00063</span></span><br><span class="line"><span class="string">Name: Iron_(mg), dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#It applies the arithmetic operator to the first value in both columns, the second value in both columns, and so on</span></span><br><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Water_(g)"</span>].count(),food_info[<span class="string">"Energ_Kcal"</span>].count())</span><br><span class="line">water_energy = food_info[<span class="string">"Water_(g)"</span>] * food_info[<span class="string">"Energ_Kcal"</span>]</span><br><span class="line">water_energy = food_info[<span class="string">"Water_(g)"</span>] * food_info[<span class="string">"Energ_Kcal"</span>]</span><br><span class="line"><span class="keyword">print</span> (water_energy.size,water_energy[:].size)</span><br><span class="line">iron_grams = food_info[<span class="string">"Iron_(mg)"</span>][<span class="number">1</span>:<span class="number">15</span>] / <span class="number">1000</span>  </span><br><span class="line"><span class="keyword">print</span> (iron_grams)</span><br><span class="line"><span class="keyword">print</span> (food_info.shape)</span><br><span class="line">food_info[<span class="string">"Iron_(g)"</span>] = iron_grams</span><br><span class="line"><span class="keyword">print</span> (food_info.shape)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">8612 8618</span></span><br><span class="line"><span class="string">8618 8618</span></span><br><span class="line"><span class="string">5814    0.00000</span></span><br><span class="line"><span class="string">6192    0.00707</span></span><br><span class="line"><span class="string">1242    0.00100</span></span><br><span class="line"><span class="string">1245    0.00187</span></span><br><span class="line"><span class="string">1243    0.00223</span></span><br><span class="line"><span class="string">1244    0.00103</span></span><br><span class="line"><span class="string">292     0.00000</span></span><br><span class="line"><span class="string">1254    0.00930</span></span><br><span class="line"><span class="string">5811    0.01102</span></span><br><span class="line"><span class="string">8575    0.00227</span></span><br><span class="line"><span class="string">291     0.00675</span></span><br><span class="line"><span class="string">1249    0.00125</span></span><br><span class="line"><span class="string">5812    0.01127</span></span><br><span class="line"><span class="string">1292    0.00078</span></span><br><span class="line"><span class="string">Name: Iron_(mg), dtype: float64</span></span><br><span class="line"><span class="string">(8618, 39)</span></span><br><span class="line"><span class="string">(8618, 39)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Score=2×(Protein_(g))−0.75×(Lipid_Tot_(g))</span></span><br><span class="line">weighted_protein = food_info[<span class="string">"Protein_(g)"</span>] * <span class="number">2</span></span><br><span class="line">weighted_fat = <span class="number">-0.75</span> * food_info[<span class="string">"Lipid_Tot_(g)"</span>]</span><br><span class="line">initial_rating = weighted_protein + weighted_fat</span><br><span class="line"><span class="keyword">print</span> (initial_rating[<span class="number">1</span>:<span class="number">15</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5814     0.0000</span></span><br><span class="line"><span class="string">6192     1.9250</span></span><br><span class="line"><span class="string">1242    25.2725</span></span><br><span class="line"><span class="string">1245    25.6750</span></span><br><span class="line"><span class="string">1243    31.6000</span></span><br><span class="line"><span class="string">1244    22.9100</span></span><br><span class="line"><span class="string">292      0.0000</span></span><br><span class="line"><span class="string">1254    11.1775</span></span><br><span class="line"><span class="string">5811     0.0000</span></span><br><span class="line"><span class="string">8575     9.9500</span></span><br><span class="line"><span class="string">291      0.0000</span></span><br><span class="line"><span class="string">1249    14.7050</span></span><br><span class="line"><span class="string">5812     0.2000</span></span><br><span class="line"><span class="string">1292    10.1125</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the "Vit_A_IU" column ranges from 0 to 100000, while the "Fiber_TD_(g)" column ranges from 0 to 79</span></span><br><span class="line"><span class="comment">#For certain calculations, columns like "Vit_A_IU" can have a greater effect on the result, </span></span><br><span class="line"><span class="comment">#due to the scale of the values</span></span><br><span class="line"><span class="comment"># The largest value in the "Energ_Kcal" column.</span></span><br><span class="line">max_calories = food_info[<span class="string">"Energ_Kcal"</span>].max()</span><br><span class="line"><span class="comment"># Divide the values in "Energ_Kcal" by the largest value.</span></span><br><span class="line">normalized_calories = food_info[<span class="string">"Energ_Kcal"</span>] / max_calories</span><br><span class="line">normalized_protein = food_info[<span class="string">"Protein_(g)"</span>] / food_info[<span class="string">"Protein_(g)"</span>].max()</span><br><span class="line">normalized_fat = food_info[<span class="string">"Lipid_Tot_(g)"</span>] / food_info[<span class="string">"Lipid_Tot_(g)"</span>].max()</span><br><span class="line">food_info[<span class="string">"Normalized_Protein"</span>] = normalized_protein</span><br><span class="line">food_info[<span class="string">"Normalized_Fat"</span>] = normalized_fat</span><br><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Normalized_Protein"</span>][<span class="number">1</span>:<span class="number">10</span>])</span><br><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Normalized_Fat"</span>][<span class="number">1</span>:<span class="number">10</span>])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5814    0.000000</span></span><br><span class="line"><span class="string">6192    0.011322</span></span><br><span class="line"><span class="string">1242    0.180820</span></span><br><span class="line"><span class="string">1245    0.165308</span></span><br><span class="line"><span class="string">1243    0.195879</span></span><br><span class="line"><span class="string">1244    0.188632</span></span><br><span class="line"><span class="string">292     0.000000</span></span><br><span class="line"><span class="string">1254    0.104167</span></span><br><span class="line"><span class="string">5811    0.000000</span></span><br><span class="line"><span class="string">Name: Normalized_Protein, dtype: float64</span></span><br><span class="line"><span class="string">5814    0.0000</span></span><br><span class="line"><span class="string">6192    0.0010</span></span><br><span class="line"><span class="string">1242    0.0889</span></span><br><span class="line"><span class="string">1245    0.0470</span></span><br><span class="line"><span class="string">1243    0.0400</span></span><br><span class="line"><span class="string">1244    0.1388</span></span><br><span class="line"><span class="string">292     0.0000</span></span><br><span class="line"><span class="string">1254    0.0963</span></span><br><span class="line"><span class="string">5811    0.0000</span></span><br><span class="line"><span class="string">Name: Normalized_Fat, dtype: float64</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>排序的方式使用df的sort_values()的方法，指明需要的列和是否要返回新的dataframe    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#By default, pandas will sort the data by the column we specify in ascending order and return a new DataFrame</span></span><br><span class="line"><span class="comment"># Sorts the DataFrame in-place, rather than=true returning a new DataFrame.</span></span><br><span class="line"><span class="comment">#print food_info["Sodium_(mg)"]</span></span><br><span class="line">food_info.sort_values(<span class="string">"Sodium_(mg)"</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Sodium_(mg)"</span>][<span class="number">1</span>:<span class="number">10</span>])</span><br><span class="line"><span class="comment">#Sorts by descending order, rather than ascending.</span></span><br><span class="line">food_info.sort_values(<span class="string">"Sodium_(mg)"</span>, inplace=<span class="keyword">True</span>, ascending=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">print</span> (food_info[<span class="string">"Sodium_(mg)"</span>][<span class="number">1</span>:<span class="number">10</span>])</span><br><span class="line"><span class="keyword">print</span> (food_info.columns.size)</span><br><span class="line"><span class="keyword">print</span> (food_info.iloc[<span class="number">1</span>:<span class="number">3</span>,<span class="number">0</span>].size)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">383     0.0</span></span><br><span class="line"><span class="string">405     0.0</span></span><br><span class="line"><span class="string">745     0.0</span></span><br><span class="line"><span class="string">2397    0.0</span></span><br><span class="line"><span class="string">763     0.0</span></span><br><span class="line"><span class="string">407     0.0</span></span><br><span class="line"><span class="string">6574    0.0</span></span><br><span class="line"><span class="string">4397    0.0</span></span><br><span class="line"><span class="string">396     0.0</span></span><br><span class="line"><span class="string">Name: Sodium_(mg), dtype: float64</span></span><br><span class="line"><span class="string">5814    27360.0</span></span><br><span class="line"><span class="string">6192    26050.0</span></span><br><span class="line"><span class="string">1242    26000.0</span></span><br><span class="line"><span class="string">1245    24000.0</span></span><br><span class="line"><span class="string">1243    24000.0</span></span><br><span class="line"><span class="string">1244    23875.0</span></span><br><span class="line"><span class="string">292     17000.0</span></span><br><span class="line"><span class="string">1254    11588.0</span></span><br><span class="line"><span class="string">5811    10600.0</span></span><br><span class="line"><span class="string">Name: Sodium_(mg), dtype: float64</span></span><br><span class="line"><span class="string">39</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h3 id="Pandas代码学习-3"><a href="#Pandas代码学习-3" class="headerlink" title="Pandas代码学习(3)"></a>Pandas代码学习(3)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">titanic_survival = pd.read_csv(<span class="string">"titanic_train.csv"</span>)</span><br><span class="line">titanic_survival.head()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   PassengerId  Survived  Pclass  \</span></span><br><span class="line"><span class="string">0            1         0       3   </span></span><br><span class="line"><span class="string">1            2         1       1   </span></span><br><span class="line"><span class="string">2            3         1       3   </span></span><br><span class="line"><span class="string">3            4         1       1   </span></span><br><span class="line"><span class="string">4            5         0       3   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                                                Name     Sex   Age  SibSp  \</span></span><br><span class="line"><span class="string">0                            Braund, Mr. Owen Harris    male  22.0      1   </span></span><br><span class="line"><span class="string">1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   </span></span><br><span class="line"><span class="string">2                             Heikkinen, Miss. Laina  female  26.0      0   </span></span><br><span class="line"><span class="string">3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   </span></span><br><span class="line"><span class="string">4                           Allen, Mr. William Henry    male  35.0      0   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Parch            Ticket     Fare Cabin Embarked  </span></span><br><span class="line"><span class="string">0      0         A/5 21171   7.2500   NaN        S  </span></span><br><span class="line"><span class="string">1      0          PC 17599  71.2833   C85        C  </span></span><br><span class="line"><span class="string">2      0  STON/O2. 3101282   7.9250   NaN        S  </span></span><br><span class="line"><span class="string">3      0            113803  53.1000  C123        S  </span></span><br><span class="line"><span class="string">4      0            373450   8.0500   NaN        S  </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#The Pandas library uses NaN, which stands for "not a number", to indicate a missing value.</span></span><br><span class="line"><span class="comment">#we can use the pandas.isnull() function which takes a pandas series and returns a series of True and False values</span></span><br><span class="line">age = titanic_survival[<span class="string">"Age"</span>]</span><br><span class="line"><span class="comment">#print(age.loc[0:10])</span></span><br><span class="line">age_is_null = pd.isnull(age)</span><br><span class="line"><span class="keyword">print</span> (age_is_null)</span><br><span class="line">age_null_true = age[age_is_null]</span><br><span class="line"><span class="comment">#print (age_null_true)</span></span><br><span class="line">age_null_count = len(age_null_true)</span><br><span class="line">print(age_null_count)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0     False</span></span><br><span class="line"><span class="string">1     False</span></span><br><span class="line"><span class="string">2     False</span></span><br><span class="line"><span class="string">3     False</span></span><br><span class="line"><span class="string">4     False</span></span><br><span class="line"><span class="string">5      True</span></span><br><span class="line"><span class="string">6     False</span></span><br><span class="line"><span class="string">7     False</span></span><br><span class="line"><span class="string">8     False</span></span><br><span class="line"><span class="string">9     False</span></span><br><span class="line"><span class="string">10    False</span></span><br><span class="line"><span class="string">11    False</span></span><br><span class="line"><span class="string">12    False</span></span><br><span class="line"><span class="string">13    False</span></span><br><span class="line"><span class="string">14    False</span></span><br><span class="line"><span class="string">Name: Age, dtype: bool</span></span><br><span class="line"><span class="string">177</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr><h3 id="Pandas代码学习-4"><a href="#Pandas代码学习-4" class="headerlink" title="Pandas代码学习(4)"></a>Pandas代码学习(4)</h3><hr><h3 id="Pandas代码学习-5"><a href="#Pandas代码学习-5" class="headerlink" title="Pandas代码学习(5)"></a>Pandas代码学习(5)</h3></the>]]></content>
      
      <categories>
          
          <category> mlearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Numpy模块的学习(3-5)</title>
      <link href="/2018/03/15/Numpy%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0(3-5)/"/>
      <content type="html"><![CDATA[<p><strong> Numpy模块的学习(3-5)：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>介绍一个科学计算数据库的使用，它就是numpy，之后会出一个更流行的pandas模块使用简介</p><p><a href="http://www.numpy.org/" target="_blank" rel="noopener">官方网站</a></p><p>环境</p><p>python版本：python3.5 </p><p>操作系统：window10 </p><p>建议安装：anaconda自带 Jupyter Notebook</p><hr><h3 id="Numpy代码学习（3）"><a href="#Numpy代码学习（3）" class="headerlink" title="Numpy代码学习（3）"></a>Numpy代码学习（3）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reshape函数将源矩阵重铸源矩阵是1行15列的，重铸为3行5列</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">print</span> (np.arange(<span class="number">15</span>))</span><br><span class="line">a = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3,  4],</span></span><br><span class="line"><span class="string">       [ 5,  6,  7,  8,  9],</span></span><br><span class="line"><span class="string">       [10, 11, 12, 13, 14]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#查看维度</span></span><br><span class="line">a.shape</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">(3, 5)</span></span><br><span class="line"><span class="string">#ndim的意思是维度的个数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a.ndim</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#查看值类型的名称</span></span><br><span class="line">a.dtype.name</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'int32'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#查看所有值的个数</span></span><br><span class="line">a.size</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">15</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#初始化一个全是0的矩阵</span></span><br><span class="line">np.zeros ((<span class="number">3</span>,<span class="number">4</span>)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="string">       [ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="string">       [ 0.,  0.,  0.,  0.]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#初始化一个全是1的多维矩阵，并且1的类型为整形，默认情况下出来的float型</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#np.ones( (2,3,4), dtype=np.int32 )</span></span><br><span class="line">np.ones((<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),dtype=np.int32)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[[1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1],</span></span><br><span class="line"><span class="string">        [1, 1, 1, 1, 1]]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#创建一个数字序列，从10到30 ，中间间隔5；从1到50，中间间隔0.3</span></span><br><span class="line"><span class="comment">#To create sequences of numbers</span></span><br><span class="line">np.arange( <span class="number">10</span>, <span class="number">30</span>, <span class="number">5</span> )</span><br><span class="line">np.arange(<span class="number">1</span>,<span class="number">50</span>,<span class="number">0.3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([  1. ,   1.3,   1.6,   1.9,   2.2,   2.5,   2.8,   3.1,   3.4,</span></span><br><span class="line"><span class="string">         3.7,   4. ,   4.3,   4.6,   4.9,   5.2,   5.5,   5.8,   6.1,</span></span><br><span class="line"><span class="string">         6.4,   6.7,   7. ,   7.3,   7.6,   7.9,   8.2,   8.5,   8.8,</span></span><br><span class="line"><span class="string">         9.1,   9.4,   9.7,  10. ,  10.3,  10.6,  10.9,  11.2,  11.5,</span></span><br><span class="line"><span class="string">        11.8,  12.1,  12.4,  12.7,  13. ,  13.3,  13.6,  13.9,  14.2,</span></span><br><span class="line"><span class="string">        14.5,  14.8,  15.1,  15.4,  15.7,  16. ,  16.3,  16.6,  16.9,</span></span><br><span class="line"><span class="string">        17.2,  17.5,  17.8,  18.1,  18.4,  18.7,  19. ,  19.3,  19.6,</span></span><br><span class="line"><span class="string">        19.9,  20.2,  20.5,  20.8,  21.1,  21.4,  21.7,  22. ,  22.3,</span></span><br><span class="line"><span class="string">        22.6,  22.9,  23.2,  23.5,  23.8,  24.1,  24.4,  24.7,  25. ,</span></span><br><span class="line"><span class="string">        25.3,  25.6,  25.9,  26.2,  26.5,  26.8,  27.1,  27.4,  27.7,</span></span><br><span class="line"><span class="string">        28. ,  28.3,  28.6,  28.9,  29.2,  29.5,  29.8,  30.1,  30.4,</span></span><br><span class="line"><span class="string">        30.7,  31. ,  31.3,  31.6,  31.9,  32.2,  32.5,  32.8,  33.1,</span></span><br><span class="line"><span class="string">        33.4,  33.7,  34. ,  34.3,  34.6,  34.9,  35.2,  35.5,  35.8,</span></span><br><span class="line"><span class="string">        36.1,  36.4,  36.7,  37. ,  37.3,  37.6,  37.9,  38.2,  38.5,</span></span><br><span class="line"><span class="string">        38.8,  39.1,  39.4,  39.7,  40. ,  40.3,  40.6,  40.9,  41.2,</span></span><br><span class="line"><span class="string">        41.5,  41.8,  42.1,  42.4,  42.7,  43. ,  43.3,  43.6,  43.9,</span></span><br><span class="line"><span class="string">        44.2,  44.5,  44.8,  45.1,  45.4,  45.7,  46. ,  46.3,  46.6,</span></span><br><span class="line"><span class="string">        46.9,  47.2,  47.5,  47.8,  48.1,  48.4,  48.7,  49. ,  49.3,</span></span><br><span class="line"><span class="string">        49.6,  49.9])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">np.arange( <span class="number">0</span>, <span class="number">2</span>, <span class="number">0.3</span> )</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([ 0. ,  0.3,  0.6,  0.9,  1.2,  1.5,  1.8])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#初始化0-11，总共12个数字，并且重铸为4行3列</span></span><br><span class="line">np.arange(<span class="number">12</span>).reshape(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3,  4],</span></span><br><span class="line"><span class="string">       [ 5,  6,  7,  8,  9],</span></span><br><span class="line"><span class="string">       [10, 11, 12, 13, 14]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#随机生成一个2行3列的矩阵</span></span><br><span class="line">np.random.random((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([[ 0.65026519,  0.4807253 ,  0.10297998],</span></span><br><span class="line"><span class="string">       [ 0.09497607,  0.20531811,  0.63868766]])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#导入π，并初始化一个从0到π的1行100列的数组</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> pi</span><br><span class="line">np.linspace( <span class="number">0</span>, pi, <span class="number">100</span> )</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([ 0.        ,  0.03173326,  0.06346652,  0.09519978,  0.12693304,</span></span><br><span class="line"><span class="string">        0.1586663 ,  0.19039955,  0.22213281,  0.25386607,  0.28559933,</span></span><br><span class="line"><span class="string">        0.31733259,  0.34906585,  0.38079911,  0.41253237,  0.44426563,</span></span><br><span class="line"><span class="string">        0.47599889,  0.50773215,  0.53946541,  0.57119866,  0.60293192,</span></span><br><span class="line"><span class="string">        0.63466518,  0.66639844,  0.6981317 ,  0.72986496,  0.76159822,</span></span><br><span class="line"><span class="string">        0.79333148,  0.82506474,  0.856798  ,  0.88853126,  0.92026451,</span></span><br><span class="line"><span class="string">        0.95199777,  0.98373103,  1.01546429,  1.04719755,  1.07893081,</span></span><br><span class="line"><span class="string">        1.11066407,  1.14239733,  1.17413059,  1.20586385,  1.23759711,</span></span><br><span class="line"><span class="string">        1.26933037,  1.30106362,  1.33279688,  1.36453014,  1.3962634 ,</span></span><br><span class="line"><span class="string">        1.42799666,  1.45972992,  1.49146318,  1.52319644,  1.5549297 ,</span></span><br><span class="line"><span class="string">        1.58666296,  1.61839622,  1.65012947,  1.68186273,  1.71359599,</span></span><br><span class="line"><span class="string">        1.74532925,  1.77706251,  1.80879577,  1.84052903,  1.87226229,</span></span><br><span class="line"><span class="string">        1.90399555,  1.93572881,  1.96746207,  1.99919533,  2.03092858,</span></span><br><span class="line"><span class="string">        2.06266184,  2.0943951 ,  2.12612836,  2.15786162,  2.18959488,</span></span><br><span class="line"><span class="string">        2.22132814,  2.2530614 ,  2.28479466,  2.31652792,  2.34826118,</span></span><br><span class="line"><span class="string">        2.37999443,  2.41172769,  2.44346095,  2.47519421,  2.50692747,</span></span><br><span class="line"><span class="string">        2.53866073,  2.57039399,  2.60212725,  2.63386051,  2.66559377,</span></span><br><span class="line"><span class="string">        2.69732703,  2.72906028,  2.76079354,  2.7925268 ,  2.82426006,</span></span><br><span class="line"><span class="string">        2.85599332,  2.88772658,  2.91945984,  2.9511931 ,  2.98292636,</span></span><br><span class="line"><span class="string">        3.01465962,  3.04639288,  3.07812614,  3.10985939,  3.14159265])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#np.sin余弦求法</span></span><br><span class="line">np.sin(np.linspace( <span class="number">0</span>, <span class="number">2</span>*pi, <span class="number">100</span> ))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">array([  0.00000000e+00,   6.34239197e-02,   1.26592454e-01,</span></span><br><span class="line"><span class="string">         1.89251244e-01,   2.51147987e-01,   3.12033446e-01,</span></span><br><span class="line"><span class="string">         3.71662456e-01,   4.29794912e-01,   4.86196736e-01,</span></span><br><span class="line"><span class="string">         5.40640817e-01,   5.92907929e-01,   6.42787610e-01,</span></span><br><span class="line"><span class="string">         6.90079011e-01,   7.34591709e-01,   7.76146464e-01,</span></span><br><span class="line"><span class="string">         8.14575952e-01,   8.49725430e-01,   8.81453363e-01,</span></span><br><span class="line"><span class="string">         9.09631995e-01,   9.34147860e-01,   9.54902241e-01,</span></span><br><span class="line"><span class="string">         9.71811568e-01,   9.84807753e-01,   9.93838464e-01,</span></span><br><span class="line"><span class="string">         9.98867339e-01,   9.99874128e-01,   9.96854776e-01,</span></span><br><span class="line"><span class="string">         9.89821442e-01,   9.78802446e-01,   9.63842159e-01,</span></span><br><span class="line"><span class="string">         9.45000819e-01,   9.22354294e-01,   8.95993774e-01,</span></span><br><span class="line"><span class="string">         8.66025404e-01,   8.32569855e-01,   7.95761841e-01,</span></span><br><span class="line"><span class="string">         7.55749574e-01,   7.12694171e-01,   6.66769001e-01,</span></span><br><span class="line"><span class="string">         6.18158986e-01,   5.67059864e-01,   5.13677392e-01,</span></span><br><span class="line"><span class="string">         4.58226522e-01,   4.00930535e-01,   3.42020143e-01,</span></span><br><span class="line"><span class="string">         2.81732557e-01,   2.20310533e-01,   1.58001396e-01,</span></span><br><span class="line"><span class="string">         9.50560433e-02,   3.17279335e-02,  -3.17279335e-02,</span></span><br><span class="line"><span class="string">        -9.50560433e-02,  -1.58001396e-01,  -2.20310533e-01,</span></span><br><span class="line"><span class="string">        -2.81732557e-01,  -3.42020143e-01,  -4.00930535e-01,</span></span><br><span class="line"><span class="string">        -4.58226522e-01,  -5.13677392e-01,  -5.67059864e-01,</span></span><br><span class="line"><span class="string">        -6.18158986e-01,  -6.66769001e-01,  -7.12694171e-01,</span></span><br><span class="line"><span class="string">        -7.55749574e-01,  -7.95761841e-01,  -8.32569855e-01,</span></span><br><span class="line"><span class="string">        -8.66025404e-01,  -8.95993774e-01,  -9.22354294e-01,</span></span><br><span class="line"><span class="string">        -9.45000819e-01,  -9.63842159e-01,  -9.78802446e-01,</span></span><br><span class="line"><span class="string">        -9.89821442e-01,  -9.96854776e-01,  -9.99874128e-01,</span></span><br><span class="line"><span class="string">        -9.98867339e-01,  -9.93838464e-01,  -9.84807753e-01,</span></span><br><span class="line"><span class="string">        -9.71811568e-01,  -9.54902241e-01,  -9.34147860e-01,</span></span><br><span class="line"><span class="string">        -9.09631995e-01,  -8.81453363e-01,  -8.49725430e-01,</span></span><br><span class="line"><span class="string">        -8.14575952e-01,  -7.76146464e-01,  -7.34591709e-01,</span></span><br><span class="line"><span class="string">        -6.90079011e-01,  -6.42787610e-01,  -5.92907929e-01,</span></span><br><span class="line"><span class="string">        -5.40640817e-01,  -4.86196736e-01,  -4.29794912e-01,</span></span><br><span class="line"><span class="string">        -3.71662456e-01,  -3.12033446e-01,  -2.51147987e-01,</span></span><br><span class="line"><span class="string">        -1.89251244e-01,  -1.26592454e-01,  -6.34239197e-02,</span></span><br><span class="line"><span class="string">        -2.44929360e-16])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#矩阵的剑法运算，对应位置每个值进行相减</span></span><br><span class="line"><span class="comment">#矩阵的幂运算，对应位置每个值求幂值</span></span><br><span class="line"><span class="comment">#矩阵的比较运算，同==判断一样，一个array&lt;value或者array&gt;value均会返回一个bool矩阵</span></span><br><span class="line"><span class="comment">#the product operator * operates elementwise in NumPy arrays</span></span><br><span class="line">a = np.array( [<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>] )</span><br><span class="line">b = np.arange( <span class="number">4</span> )</span><br><span class="line"><span class="keyword">print</span> (a) </span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#b</span></span><br><span class="line">c = a-b</span><br><span class="line"><span class="keyword">print</span> (c)</span><br><span class="line">c = c <span class="number">-1</span></span><br><span class="line"><span class="keyword">print</span> (c)</span><br><span class="line">b**<span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> (b**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (a&lt;<span class="number">35</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[20 30 40 50]</span></span><br><span class="line"><span class="string">[0 1 2 3]</span></span><br><span class="line"><span class="string">[20 29 38 47]</span></span><br><span class="line"><span class="string">[19 28 37 46]</span></span><br><span class="line"><span class="string">[0 1 4 9]</span></span><br><span class="line"><span class="string">[ True  True False False]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#矩阵的乘法，可以使用A.dot(B)或者np.dot(A,B)两种方法</span></span><br><span class="line"><span class="comment">#The matrix product can be performed using the dot function or method</span></span><br><span class="line">A = np.array( [[<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">               [<span class="number">0</span>,<span class="number">1</span>]] )</span><br><span class="line">B = np.array( [[<span class="number">2</span>,<span class="number">0</span>],</span><br><span class="line">               [<span class="number">3</span>,<span class="number">4</span>]] )</span><br><span class="line"><span class="keyword">print</span> (A)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (B)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (A*B)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (A.dot(B))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.dot(A, B)) </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[1 1]</span></span><br><span class="line"><span class="string"> [0 1]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[2 0]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[2 0]</span></span><br><span class="line"><span class="string"> [0 4]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[5 4]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">[[5 4]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="Numpy代码学习（４）"><a href="#Numpy代码学习（４）" class="headerlink" title="Numpy代码学习（４）"></a>Numpy代码学习（４）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求e的幂，使用np.exp()，参数为array</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">B = np.arange(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (B)</span><br><span class="line"><span class="keyword">print</span> (np.exp(B))</span><br><span class="line"><span class="keyword">print</span> (np.sqrt(B))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[0 1 2]</span></span><br><span class="line"><span class="string">[ 1.          2.71828183  7.3890561 ]</span></span><br><span class="line"><span class="string">[ 0.          1.          1.41421356]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#ｒａｖｅｌ将多维矩阵展开为１维，可以使用．ｓｈａｐｅ方法将建立多维矩阵</span></span><br><span class="line"><span class="comment">#如果ｓｈａｐｅ的参数中有－１，则自动计算维度</span></span><br><span class="line"><span class="comment">#Return the floor of the input</span></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="comment">#a.shape</span></span><br><span class="line"><span class="comment">## flatten the array</span></span><br><span class="line"><span class="keyword">print</span> (a.ravel())</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line">a.shape = (<span class="number">6</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (a) </span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (a.T)</span><br><span class="line"><span class="comment">#If a dimension is given as -1 in a reshaping operation, the other dimensions are automatically calculated:</span></span><br><span class="line"><span class="comment">#a.reshape(3,-1)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 9.  1.  4.  6.]</span></span><br><span class="line"><span class="string"> [ 2.  2.  2.  2.]</span></span><br><span class="line"><span class="string"> [ 1.  0.  8.  3.]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[ 9.  1.  4.  6.  2.  2.  2.  2.  1.  0.  8.  3.]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[ 9.  1.]</span></span><br><span class="line"><span class="string"> [ 4.  6.]</span></span><br><span class="line"><span class="string"> [ 2.  2.]</span></span><br><span class="line"><span class="string"> [ 2.  2.]</span></span><br><span class="line"><span class="string"> [ 1.  0.]</span></span><br><span class="line"><span class="string"> [ 8.  3.]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[ 9.  4.  2.  2.  1.  8.]</span></span><br><span class="line"><span class="string"> [ 1.  6.  2.  2.  0.  3.]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵的拼接，列数相加，</span></span><br><span class="line"><span class="comment">#２×２的矩阵ｖｓｔａｃｋ２×２的矩阵为４×２的矩阵结果ｖ代表了垂直</span></span><br><span class="line"><span class="comment">#２×２的矩阵ｈｓｔａｃｋ２×２的矩阵为２×４的矩阵结果ｈ代表了水平</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line">b = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.vstack((a,b)))</span><br><span class="line"><span class="comment">#np.hstack((a,b))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0.  6.]</span></span><br><span class="line"><span class="string"> [ 4.  6.]]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[[ 3.  3.]</span></span><br><span class="line"><span class="string"> [ 3.  8.]]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[[ 0.  6.]</span></span><br><span class="line"><span class="string"> [ 4.  6.]</span></span><br><span class="line"><span class="string"> [ 3.  3.]</span></span><br><span class="line"><span class="string"> [ 3.  8.]]</span></span><br><span class="line"><span class="string">[[ 0.  6.  3.  3.]</span></span><br><span class="line"><span class="string"> [ 4.  6.  3.  8.]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#水平分隔矩阵的方法hsplit，垂直分隔矩阵的方法vsplit</span></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">2</span>,<span class="number">12</span>)))</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.hsplit(a,<span class="number">3</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (np.hsplit(a,(<span class="number">3</span>,<span class="number">4</span>)))   <span class="comment"># Split a after the third and the fourth column</span></span><br><span class="line">a = np.floor(<span class="number">10</span>*np.random.random((<span class="number">12</span>,<span class="number">2</span>)))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'---'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">np.vsplit(a,<span class="number">3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 1.  6.  1.  0.  1.  5.  6.  3.  1.  5.  6.  9.]</span></span><br><span class="line"><span class="string"> [ 9.  2.  9.  1.  7.  3.  7.  4.  9.  3.  3.  8.]]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[array([[ 1.,  6.,  1.,  0.],</span></span><br><span class="line"><span class="string">       [ 9.,  2.,  9.,  1.]]), array([[ 1.,  5.,  6.,  3.],</span></span><br><span class="line"><span class="string">       [ 7.,  3.,  7.,  4.]]), array([[ 1.,  5.,  6.,  9.],</span></span><br><span class="line"><span class="string">       [ 9.,  3.,  3.,  8.]])]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[array([[ 1.,  6.,  1.],</span></span><br><span class="line"><span class="string">       [ 9.,  2.,  9.]]), array([[ 0.],</span></span><br><span class="line"><span class="string">       [ 1.]]), array([[ 1.,  5.,  6.,  3.,  1.,  5.,  6.,  9.],</span></span><br><span class="line"><span class="string">       [ 7.,  3.,  7.,  4.,  9.,  3.,  3.,  8.]])]</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">[[ 2.  8.]</span></span><br><span class="line"><span class="string"> [ 8.  6.]</span></span><br><span class="line"><span class="string"> [ 3.  8.]</span></span><br><span class="line"><span class="string"> [ 0.  2.]</span></span><br><span class="line"><span class="string"> [ 8.  2.]</span></span><br><span class="line"><span class="string"> [ 9.  4.]</span></span><br><span class="line"><span class="string"> [ 9.  2.]</span></span><br><span class="line"><span class="string"> [ 1.  9.]</span></span><br><span class="line"><span class="string"> [ 7.  6.]</span></span><br><span class="line"><span class="string"> [ 2.  3.]</span></span><br><span class="line"><span class="string"> [ 8.  5.]</span></span><br><span class="line"><span class="string"> [ 5.  5.]]</span></span><br><span class="line"><span class="string">[array([[ 2.,  8.],</span></span><br><span class="line"><span class="string">        [ 8.,  6.],</span></span><br><span class="line"><span class="string">        [ 3.,  8.],</span></span><br><span class="line"><span class="string">        [ 0.,  2.]]), array([[ 8.,  2.],</span></span><br><span class="line"><span class="string">        [ 9.,  4.],</span></span><br><span class="line"><span class="string">        [ 9.,  2.],</span></span><br><span class="line"><span class="string">        [ 1.,  9.]]), array([[ 7.,  6.],</span></span><br><span class="line"><span class="string">        [ 2.,  3.],</span></span><br><span class="line"><span class="string">        [ 8.,  5.],</span></span><br><span class="line"><span class="string">        [ 5.,  5.]])]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Simple assignments make no copy of array objects or of their data.</span></span><br><span class="line">a = np.arange(<span class="number">12</span>)</span><br><span class="line">b = a</span><br><span class="line"><span class="comment"># a and b are two names for the same ndarray object</span></span><br><span class="line"><span class="keyword">print</span> (b <span class="keyword">is</span> a)</span><br><span class="line">b.shape = <span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">print</span> (a.shape)</span><br><span class="line"><span class="keyword">print</span> (id(a))</span><br><span class="line"><span class="keyword">print</span> (id(b))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">(3, 4)</span></span><br><span class="line"><span class="string">2153802648192</span></span><br><span class="line"><span class="string">2153802648192</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#The view method creates a new array object that looks at the same data.</span></span><br><span class="line">c = a.view()</span><br><span class="line"><span class="keyword">print</span> (c <span class="keyword">is</span> a)</span><br><span class="line">c.shape = <span class="number">2</span>,<span class="number">6</span></span><br><span class="line"><span class="keyword">print</span> (a.shape)</span><br><span class="line">c[<span class="number">0</span>,<span class="number">4</span>] = <span class="number">1234</span></span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (id(a))</span><br><span class="line"><span class="keyword">print</span> (id(c))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">(3, 4)</span></span><br><span class="line"><span class="string">[[   0    1    2    3]</span></span><br><span class="line"><span class="string"> [1234    5    6    7]</span></span><br><span class="line"><span class="string"> [   8    9   10   11]]</span></span><br><span class="line"><span class="string">2153802648192</span></span><br><span class="line"><span class="string">2153802646432</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#ｃｏｐｙ方法能够完全复制到另一个变量，测试方法，ｐｒｉｎｔ（ａ　ｉｓ　ｂ），如果结果为Ｔｒｕｅ，则数据库中对应的是同一个对象</span></span><br><span class="line"><span class="comment">#The copy method makes a complete copy of the array and its data.</span></span><br><span class="line">d = a.copy() </span><br><span class="line">d <span class="keyword">is</span> a</span><br><span class="line">d[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">9999</span></span><br><span class="line"><span class="keyword">print</span> (d) </span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[9999    1    2    3]</span></span><br><span class="line"><span class="string"> [1234    5    6    7]</span></span><br><span class="line"><span class="string"> [   8    9   10   11]]</span></span><br><span class="line"><span class="string">[[   0    1    2    3]</span></span><br><span class="line"><span class="string"> [1234    5    6    7]</span></span><br><span class="line"><span class="string"> [   8    9   10   11]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="Numpy代码学习（５）"><a href="#Numpy代码学习（５）" class="headerlink" title="Numpy代码学习（５）"></a>Numpy代码学习（５）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#argmax沿着坐标横轴取最大的一个索引</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.sin(np.arange(<span class="number">20</span>)).reshape(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br><span class="line">ind = data.argmax(axis=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> (ind)</span><br><span class="line">data_max = data[ind, range(data.shape[<span class="number">1</span>])]</span><br><span class="line"><span class="keyword">print</span> (data_max)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 0.          0.84147098  0.90929743  0.14112001]</span></span><br><span class="line"><span class="string"> [-0.7568025  -0.95892427 -0.2794155   0.6569866 ]</span></span><br><span class="line"><span class="string"> [ 0.98935825  0.41211849 -0.54402111 -0.99999021]</span></span><br><span class="line"><span class="string"> [-0.53657292  0.42016704  0.99060736  0.65028784]</span></span><br><span class="line"><span class="string"> [-0.28790332 -0.96139749 -0.75098725  0.14987721]]</span></span><br><span class="line"><span class="string">[2 0 3 1]</span></span><br><span class="line"><span class="string">[ 0.98935825  0.84147098  0.99060736  0.6569866 ]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">40</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">b = np.tile(a, (<span class="number">4</span>, <span class="number">3</span>)) </span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[ 0 10 20 30]</span></span><br><span class="line"><span class="string">[[ 0 10 20 30  0 10 20 30  0 10 20 30]</span></span><br><span class="line"><span class="string"> [ 0 10 20 30  0 10 20 30  0 10 20 30]</span></span><br><span class="line"><span class="string"> [ 0 10 20 30  0 10 20 30  0 10 20 30]</span></span><br><span class="line"><span class="string"> [ 0 10 20 30  0 10 20 30  0 10 20 30]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line">b = np.sort(a, axis=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (b)</span><br><span class="line"><span class="comment">#b</span></span><br><span class="line">a.sort(axis=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line">a = np.array([<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">j = np.argsort(a)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (j)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'--------'</span>)</span><br><span class="line"><span class="keyword">print</span> (a[j])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[4 3 5]</span></span><br><span class="line"><span class="string"> [1 2 1]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[3 4 5]</span></span><br><span class="line"><span class="string"> [1 1 2]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[[3 4 5]</span></span><br><span class="line"><span class="string"> [1 1 2]]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[2 3 1 0]</span></span><br><span class="line"><span class="string">--------</span></span><br><span class="line"><span class="string">[1 2 3 4]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>转载：</p><p><a href="https://www.cnblogs.com/xieshengsen/p/6623775.html" target="_blank" rel="noopener">https://www.cnblogs.com/xieshengsen/p/6623775.html</a></p><blockquote><p> 一维数组的索引和切片</p><p># 改变数组的维度<br># reshape 改变数组维度(重新调整矩阵的行数、列数、维数。)</p><p>ravel函数完成展平</p><p>flatten 这个函数恰如其名，flatten就是展平的意思，与ravel函数的功能相同。不过，flatten函数会请求分配内存来保存结果，而ravel函数只是返回数组的一个视图（view）</p><p>shape,用元组设置维度</p><p>resize,resize和reshape函数的功能一样，但resize会直接修改所操作的数组：</p><p>数组的组合</p><p># 1. 水平组合hstack函数</p><p># 2. 垂直组合vstack函数</p><p># 3. 深度组合dstack函数(将一系列数组沿着纵轴（深度）方向进行层叠组合)</p><p># 4. 列组合,column_stack函数对于一维数组将按列方向进行组合,对于二维数组，column_stack与hstack的效果是相同</p><p># 行组合row_stack函数（对于两个一维数组，将直接层叠起来组合成一个二维数组，对于二维数组，row_stack与vstack的效果是相同的）</p><p># 分割数组</p><p># 1. 水平分割 hsplit函数</p><p># 调用split函数并指定参数axis=1</p><p># 2. 垂直分割,vsplit函数</p><p># 调用split函数并指定参数axis=0</p><p># 3. 深度分割,dsplit函数</p><p># 数组的属性</p><p># 1. ndim属性，给出数组的维数，或数组轴的个数</p><p># 2. size属性，给出数组元素的总个数</p><p># 3. itemsize属性，给出数组中的元素在内存中所占的字节数</p><p># 4. nbytes属性,整个数组所占的存储空间(itemsize和size属性值的乘积)</p><p># 5. T属性,效果和transpose函数一样</p><p># 数组的转换,tolist函数</p></blockquote></the>]]></content>
      
      <categories>
          
          <category> mlearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 模块使用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Numpy模块的学习(1-2)</title>
      <link href="/2018/03/14/Numpy%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0(1-2)/"/>
      <content type="html"><![CDATA[<p><strong> Numpy模块的学习(1-2)：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>介绍一个科学计算数据库的使用，它就是numpy，之后会出一个更流行的pandas模块使用简介</p><p><a href="http://www.numpy.org/" target="_blank" rel="noopener">官方网站</a></p><p>先贴上原版英文介绍震楼，英文好的同学自己翻译，不好的先去学好英语(开个玩笑)，我直接翻译一下，拿来主义直接看就是了。</p><h3 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h3><p>NumPy is the fundamental package for scientific computing with Python. It contains among other things:</p><ul><li>a powerful N-dimensional array object</li><li>sophisticated (broadcasting) functions</li><li>tools for integrating C/C++ and Fortran code</li><li>useful linear algebra, Fourier transform, and random number capabilities</li></ul><p>Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data. Arbitrary data-types can be defined. This allows NumPy to seamlessly and speedily integrate with a wide variety of databases.</p><p>NumPy is licensed under the <a href="http://www.numpy.org/license.html#license" target="_blank" rel="noopener">BSD license</a>, enabling reuse with few restrictions.</p><p>我的翻译：</p><p>numpy是利用python进行科学计算的基础包，她包含了其他一些东西：</p><ol><li>一个有力的、强大的N维数组对象；</li><li>复杂(广播)的功能；</li><li>集成C/C++、公式翻译的工具；Fortran ：FormulaTranslation的缩写，好神奇，百度了才知道</li><li>有用的线性代数，Fourier transform这个玩意儿没反应过来，傅立叶转换(大学数学没好好学)，以及随机数字的能力</li></ol><p>除了以上科学的使用，numpy还可以被逻辑数据用作一个高效的多维的容器，可以随心所遇的定义数据类型，这就使得numpy可以无缝隙、快速的集成一个巨大的数据源。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>python版本：python3.5 </p><p>操作系统：window10 </p><p>建议安装：anaconda自带 Jupyter Notebook</p><hr><h3 id="Numpy代码学习（1）"><a href="#Numpy代码学习（1）" class="headerlink" title="Numpy代码学习（1）"></a>Numpy代码学习（1）</h3><p>从txt类型的文件中获取数据源，用genfromtxt方法，不会的就用help方法打印使用方法，因为数据源为分隔符为“，”所以delimiter=”,”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>,dtype=str)</span><br><span class="line"><span class="comment">#print(type(world_alcohol))</span></span><br><span class="line"><span class="comment">#print (world_alcohol)</span></span><br><span class="line"><span class="keyword">print</span> (help(numpy.genfromtxt))</span><br></pre></td></tr></table></figure><p><img src="http://zhoujw.cn/img/20180314-1.png" alt="图1"></p><p>numpy.array可以使用列表表单或者列表中列表的形式作为入参，当输入一个列表的时候，得到的是一位数组，当输入一个列表中包含列表的入参时，得到的是一个矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#The numpy.array() function can take a list or list of lists as input. When we input a list, we get a one-dimensional array as a result:</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line"><span class="comment">#When we input a list of lists, we get a matrix as a result:</span></span><br><span class="line">matrix = numpy.array([[<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>], [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]])</span><br><span class="line"><span class="keyword">print</span> (vector)</span><br><span class="line"><span class="keyword">print</span> (matrix)</span><br></pre></td></tr></table></figure><p>我们可以使用ndarray.shape这个属性，来查看有多少个元素，对于矩阵来说，可以用同样的方法查看矩阵的维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#We can use the ndarray.shape property to figure out how many elements are in the array</span></span><br><span class="line">vector = numpy.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(vector.shape)</span><br><span class="line"><span class="comment">#For matrices, the shape property contains a tuple with 2 elements.</span></span><br><span class="line">matrix = numpy.array([[<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>]])</span><br><span class="line">print(matrix.shape)</span><br></pre></td></tr></table></figure><p>numpy中的array对象中，每一个数据都拥有相同的数据类型和结构，numpy会自动的找出最适应、最合适的数据类型，当把列表转换为数组的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment">#Each value in a NumPy array has to have the same data type</span></span><br><span class="line"><span class="comment">#NumPy will automatically figure out an appropriate data type when reading in data or converting lists to arrays. </span></span><br><span class="line"><span class="comment">#You can check the data type of a NumPy array using the dtype property.</span></span><br><span class="line">numbers = numpy.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> (numbers)</span><br><span class="line">numbers.dtype</span><br></pre></td></tr></table></figure><p>当numpy无法将一个具体的值转换为数字数据类型的时候，她会使用一个特殊的NAN值来标识，这玩意儿不是数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#When NumPy can't convert a value to a numeric data type like float or integer, it uses a special nan value that stands for Not a Number</span></span><br><span class="line"><span class="comment">#nan is the missing data</span></span><br><span class="line"><span class="comment">#1.98600000e+03 is actually 1.986 * 10 ^ 3</span></span><br><span class="line">world_alcohol</span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>, dtype=str, skip_header=<span class="number">1</span>)</span><br><span class="line">print(world_alcohol)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">    [['1986' 'Western Pacific' 'Viet Nam' 'Wine' '0']</span></span><br><span class="line"><span class="string">     ['1986' 'Americas' 'Uruguay' 'Other' '0.5']</span></span><br><span class="line"><span class="string">     ['1985' 'Africa' "Cte d'Ivoire" 'Wine' '1.62']</span></span><br><span class="line"><span class="string">     ..., </span></span><br><span class="line"><span class="string">     ['1987' 'Africa' 'Malawi' 'Other' '0.75']</span></span><br><span class="line"><span class="string">     ['1989' 'Americas' 'Bahamas' 'Wine' '1.5']</span></span><br><span class="line"><span class="string">     ['1985' 'Africa' 'Malawi' 'Spirits' '0.31']]</span></span><br><span class="line"><span class="string"> '''</span></span><br></pre></td></tr></table></figure><p>跟列表定位数据一样，array使用array[x,y]的方式获取某一个位置上的数据，代表着第x+1行数据，第y+1列数据</p><p>如果是一个一维的数据，获取方式同样参考列表切片的方式</p><p>如果是多维数据array，第一个参数为行定位，第二个代表列定位，行和列都能使用切片，中间用逗号分隔</p><p>print(matrix[:,1])就代表取所有行，第二列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">uruguay_other_1986 = world_alcohol[<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">third_country = world_alcohol[<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> (uruguay_other_1986)</span><br><span class="line"><span class="keyword">print</span> (third_country)</span><br><span class="line"><span class="comment">#out：</span></span><br><span class="line"><span class="comment">#0.5</span></span><br><span class="line"><span class="comment">#Cte d'Ivoire</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">print(vector[<span class="number">0</span>:<span class="number">3</span>])  </span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [ 5 10 15]</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[:,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [10 25 40]</span></span><br></pre></td></tr></table></figure><p>print(matrix[:,0:2])代表着取所有行数据，第1列和第2列的矩阵数据</p><p>print(matrix[1:3,0:2])代表取第2行到第3行的数据，第1列到第二列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[:,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [[ 5 10]</span></span><br><span class="line"><span class="comment">#    [20 25]</span></span><br><span class="line"><span class="comment">#    [35 40]]</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">print(matrix[<span class="number">1</span>:<span class="number">3</span>,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [[20 25]</span></span><br><span class="line"><span class="comment"># [35 40]]</span></span><br></pre></td></tr></table></figure><h3 id="Numpy代码学习（2）"><a href="#Numpy代码学习（2）" class="headerlink" title="Numpy代码学习（2）"></a>Numpy代码学习（2）</h3><p>如果直接用array == 某一个值，相当于每一个元素同右边值对比，如果值相等，python解释器返回true，否则返回false，类型为bool，整体为一个array</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="comment">#it will compare the second value to each element in the vector</span></span><br><span class="line"><span class="comment"># If the values are equal, the Python interpreter returns True; otherwise, it returns False</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">vector == <span class="number">5</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#array([ True, False, False, False], dtype=bool)</span></span><br><span class="line"></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                    [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                    [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                    [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">                 ])</span><br><span class="line">matrix == <span class="number">25</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    array([[False, False, False],</span></span><br><span class="line"><span class="comment">#       [False,  True, False],</span></span><br><span class="line"><span class="comment">#       [False, False, False]], dtype=bool)</span></span><br></pre></td></tr></table></figure><p>如果是一维数组，将数组和具体某一个数字的对比结果(true和false)作为参数，传回原数组，可以找出值为true的具体value</p><p>如果是多维数组，可以用同样的方法判断多维数组中某一列或者某一行的所有数据中，等于某一个值的的true和false判断，如果存在，返回True，不存在，返回False，将bool数组作为参数带入原矩阵，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Compares vector to the value 10, which generates a new Boolean vector [False, True, False, False]. It assigns this result to equal_to_ten</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten = (vector == <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> (equal_to_ten)</span><br><span class="line">print(vector[equal_to_ten])</span><br><span class="line"><span class="comment">#print(vector[False True False False])</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[False  True False False]</span></span><br><span class="line"><span class="comment">#[10]</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">             ])</span><br><span class="line">second_column_25 = (matrix[:,<span class="number">1</span>] == <span class="number">25</span>)</span><br><span class="line"><span class="keyword">print</span> (second_column_25)</span><br><span class="line">print(matrix[second_column_25, :])</span><br><span class="line"><span class="comment">#out：</span></span><br><span class="line"><span class="comment">#[False  True False]</span></span><br><span class="line"><span class="comment">#[[20 25 30]]</span></span><br></pre></td></tr></table></figure><p>还可以跟加入多种比较条件，且的公式为&amp;，获得公式为|，如果将bool数组作为入参带入并重新赋值，则将新值写入到bool数组为true的位置，变向的实现了替换的步骤，即将原有一维数组的某一个或者多个值统一替换为某一个值，如果是多维矩阵的话，注意bool数组的维度跟判断条件中的维度有关系即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#We can also perform comparisons with multiple conditions</span></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten_and_five = (vector == <span class="number">10</span>) &amp; (vector == <span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> (equal_to_ten_and_five)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[False False False False]</span></span><br><span class="line"></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten_or_five = (vector == <span class="number">10</span>) | (vector == <span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> (equal_to_ten_or_five)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [ True  True False False]</span></span><br><span class="line"></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">equal_to_ten_or_five = (vector == <span class="number">10</span>) | (vector == <span class="number">5</span>)</span><br><span class="line">vector[equal_to_ten_or_five] = <span class="number">50</span></span><br><span class="line">print(vector)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#[50 50 15 20]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">            [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">            [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">            [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">         ])</span><br><span class="line">second_column_25 = matrix[:,<span class="number">1</span>] == <span class="number">25</span></span><br><span class="line"><span class="keyword">print</span> (second_column_25)</span><br><span class="line">matrix[second_column_25, <span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> (matrix)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    [False  True False]</span></span><br><span class="line"><span class="comment">#     [[ 5 10 15]</span></span><br><span class="line"><span class="comment">#     [20 10 30]</span></span><br><span class="line"><span class="comment">#     [35 40 45]]</span></span><br></pre></td></tr></table></figure><p>可以使用ndarray的astype方法来讲数据格式转换</p><p>可以使用ndarray的min方法来求出最小值</p><p>axis=1代表着行方向，axis=0代表着列方向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#We can convert the data type of an array with the ndarray.astype() method.</span></span><br><span class="line">vector = numpy.array([<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>])</span><br><span class="line"><span class="keyword">print</span> (vector.dtype)</span><br><span class="line"><span class="keyword">print</span> (vector)</span><br><span class="line">vector = vector.astype(float)</span><br><span class="line"><span class="keyword">print</span> (vector.dtype)</span><br><span class="line"><span class="keyword">print</span> (vector)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">        &lt;U1</span></span><br><span class="line"><span class="string">    ['1' '2' '3']</span></span><br><span class="line"><span class="string">    float64</span></span><br><span class="line"><span class="string">    [ 1.  2.  3.]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">vector = numpy.array([<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>])</span><br><span class="line">vector.min()</span><br><span class="line"><span class="comment">#print (help(numpy.array))</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The axis dictates which dimension we perform the operation on</span></span><br><span class="line"><span class="comment">#1 means that we want to perform the operation on each row, and 0 means on each column</span></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">             ])</span><br><span class="line">matrix.sum(axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#matrix.sum(axis=0)</span></span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#array([ 30,  75, 120])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix = numpy.array([</span><br><span class="line">                [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>], </span><br><span class="line">                [<span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>],</span><br><span class="line">                [<span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">             ])</span><br><span class="line">matrix.sum(axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#out:</span></span><br><span class="line"><span class="comment">#    array([60, 75, 90])</span></span><br></pre></td></tr></table></figure><p>numpy.isnan(world_alcohol[:,4]) 就相当于world_alcohol[:,4]==nan</p><p>求平均值可以使用array.mean（）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#replace nan value with 0</span></span><br><span class="line">world_alcohol = numpy.genfromtxt(<span class="string">"world_alcohol.txt"</span>, delimiter=<span class="string">","</span>,dtype=float)</span><br><span class="line"><span class="keyword">print</span> (world_alcohol)</span><br><span class="line">is_value_empty = numpy.isnan(world_alcohol[:,<span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> (is_value_empty)</span><br><span class="line">world_alcohol[is_value_empty, <span class="number">4</span>] = <span class="string">'0'</span></span><br><span class="line">alcohol_consumption = world_alcohol[:,<span class="number">4</span>]</span><br><span class="line">alcohol_consumption = alcohol_consumption.astype(float)</span><br><span class="line">total_alcohol = alcohol_consumption.sum()</span><br><span class="line">average_alcohol = alcohol_consumption.mean()</span><br><span class="line"><span class="keyword">print</span> (total_alcohol)</span><br><span class="line"><span class="keyword">print</span> (average_alcohol)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">out:</span></span><br><span class="line"><span class="string">[[             nan              nan              nan              nan</span></span><br><span class="line"><span class="string">               nan]</span></span><br><span class="line"><span class="string"> [  1.98600000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    0.00000000e+00]</span></span><br><span class="line"><span class="string"> [  1.98600000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    5.00000000e-01]</span></span><br><span class="line"><span class="string"> ..., </span></span><br><span class="line"><span class="string"> [  1.98700000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    7.50000000e-01]</span></span><br><span class="line"><span class="string"> [  1.98900000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    1.50000000e+00]</span></span><br><span class="line"><span class="string"> [  1.98500000e+03              nan              nan              nan</span></span><br><span class="line"><span class="string">    3.10000000e-01]]</span></span><br><span class="line"><span class="string">[ True False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False  True False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string">  True False False False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False False False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True  True False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False  True False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False  True False False False False False False False False</span></span><br><span class="line"><span class="string">  True False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False False  True False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True False  True  True False False</span></span><br><span class="line"><span class="string"> False False False  True False False False False False  True False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False  True False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False False False False  True False False  True False False False False</span></span><br><span class="line"><span class="string"> False  True False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True  True False False False False</span></span><br><span class="line"><span class="string"> False  True False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string">  True False False False False False  True False False  True False False</span></span><br><span class="line"><span class="string">  True False False  True False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False  True False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False  True False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False  True  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False  True False False False  True False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False  True False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False  True False False False False False False False False False</span></span><br><span class="line"><span class="string">  True  True False  True False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False  True</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False  True  True False  True False False</span></span><br><span class="line"><span class="string">  True  True False False False False  True False False False False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False  True False False</span></span><br><span class="line"><span class="string"> False False False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False  True False False False False False False False  True False</span></span><br><span class="line"><span class="string"> False  True False False False False False False False False False False</span></span><br><span class="line"><span class="string"> False False]</span></span><br><span class="line"><span class="string">1137.78</span></span><br><span class="line"><span class="string">1.14006012024</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>bool 用一位存储的布尔类型（值为TRUE或FALSE）</li><li>inti 由所在平台决定其精度的整数（一般为int32或int64）</li><li>int8 整数，范围为128至127</li><li>int16 整数，范围为32 768至32 767</li><li>int32 整数，范围为231至231 1</li><li>int64 整数，范围为263至263 1</li><li>uint8 无符号整数，范围为0至255</li><li>uint16 无符号整数，范围为0至65 535</li><li>uint32 无符号整数，范围为0至2321</li><li>uint64 无符号整数，范围为0至2641</li><li>float16 半精度浮点数（16位）：其中用1位表示正负号，5位表示指数，10位表示尾数</li><li>float32 单精度浮点数（32位）：其中用1位表示正负号，8位表示指数，23位表示尾数</li><li>float64或float 双精度浮点数（64位）：其中用1位表示正负号，11位表示指数，52位表示尾数</li><li>complex64 复数，分别用两个32位浮点数表示实部和虚部</li><li>complex128或complex 复数，分别用两个64位浮点数表示实部和虚部</li></ol></the>]]></content>
      
      <categories>
          
          <category> mlearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
            <tag> 模块使用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>生成zabbix图表，通过微信发送群聊</title>
      <link href="/2018/03/13/%E7%94%9F%E6%88%90zabbix%E5%9B%BE%E7%89%87%E5%B9%B6%E9%80%9A%E8%BF%87%E5%BE%AE%E4%BF%A1%E5%8F%91%E9%80%81/"/>
      <content type="html"><![CDATA[<p><strong> 生成zabbix图表，通过微信发送群聊：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>生成zabbix图表，通过微信发送群聊，嘿嘿，实现了微信实时接收服务器的监控性能item<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>环境：python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.request, urllib.error, urllib.parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> itchat, time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZabbixAPI</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        cf = configparser.ConfigParser()</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">'config.ini'</span>):</span><br><span class="line">            cf.read(<span class="string">r'config.ini'</span>)</span><br><span class="line">            self.__url = cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"url"</span>)</span><br><span class="line">            self.__user= cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"user"</span>)</span><br><span class="line">            self.__password = cf.get(<span class="string">"zabbix_server"</span>,<span class="string">"password"</span>)</span><br><span class="line">            self.__header = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json-rpc"</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'未读到文件config.ini'</span>)</span><br><span class="line">            exit()</span><br><span class="line">        self.__token_id = self.UserLogin()</span><br><span class="line">    <span class="comment">#登陆获取token</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">UserLogin</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"user.login"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"user"</span>: self.__user,</span><br><span class="line">                <span class="string">"password"</span>: self.__password</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> self.PostRequest(data)</span><br><span class="line">    <span class="comment">#推送请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostRequest</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        request = urllib.request.Request(self.__url,json.dumps(data).encode(<span class="string">'utf-8'</span>),self.__header)</span><br><span class="line">        result = urllib.request.urlopen(request)</span><br><span class="line">        response = json.loads(result.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># print response['result']</span></span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">'result'</span>]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> KeyError</span><br><span class="line">    <span class="comment">#主机列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostGet</span><span class="params">(self,hostid=None,hostip=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"host.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>:&#123;</span><br><span class="line">                <span class="string">"output"</span>:<span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"selectGroups"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"selectParentTemplates"</span>: [<span class="string">"templateid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectInterfaces"</span>: [<span class="string">"interfaceid"</span>,<span class="string">"ip"</span>],</span><br><span class="line">                <span class="string">"selectInventory"</span>: [<span class="string">"os"</span>],</span><br><span class="line">                <span class="string">"selectItems"</span>:[<span class="string">"itemid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectGraphs"</span>:[<span class="string">"graphid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectApplications"</span>:[<span class="string">"applicationid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectTriggers"</span>:[<span class="string">"triggerid"</span>,<span class="string">"name"</span>],</span><br><span class="line">                <span class="string">"selectScreens"</span>:[<span class="string">"screenid"</span>,<span class="string">"name"</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> hostid:</span><br><span class="line">            data[<span class="string">"params"</span>]=&#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#主机列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostCreate</span><span class="params">(self,hostname,hostip,groupid=None,templateid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"host.create"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"host"</span>: hostname,</span><br><span class="line">                <span class="string">"interfaces"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"type"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"main"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"useip"</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">"ip"</span>: hostip,</span><br><span class="line">                        <span class="string">"dns"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="string">"port"</span>: <span class="string">"10050"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"groups"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"groupid"</span>: groupid</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"templates"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"templateid"</span>: templateid</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#主机组列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HostGroupGet</span><span class="params">(self,hostid=None,itemid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>:<span class="string">"hostgroup.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>:&#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#监控项列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ItemGet</span><span class="params">(self,hostid=None,itemid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"item.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#模板列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">TemplateGet</span><span class="params">(self, hostid=None,templateid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"template.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"templateids"</span>: templateid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#图像列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GraphGet</span><span class="params">(self,hostid=None,graphid=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"graph.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"hostids"</span>: hostid,</span><br><span class="line">                <span class="string">"graphids"</span>: graphid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"name"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  self.PostRequest(data)</span><br><span class="line">    <span class="comment">#历史数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">History</span><span class="params">(self,itemid,data_type)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</span><br><span class="line">            <span class="string">"method"</span>: <span class="string">"history.get"</span>,</span><br><span class="line">            <span class="string">"params"</span>: &#123;</span><br><span class="line">                <span class="string">"output"</span>: <span class="string">"extend"</span>,</span><br><span class="line">                <span class="string">"history"</span>: data_type,</span><br><span class="line">                <span class="string">"itemids"</span>: itemid,</span><br><span class="line">                <span class="string">"sortfield"</span>: <span class="string">"clock"</span>,</span><br><span class="line">                <span class="string">"sortorder"</span>: <span class="string">"DESC"</span>,</span><br><span class="line">                <span class="string">"limit"</span>: <span class="number">60</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"auth"</span>: self.__token_id,</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> self.PostRequest(data)</span><br><span class="line"><span class="comment">#测试：python manager.py shell ; from ZABBIX.ZabbixAPI import * ; main()，代码修改了要ctrl+Z退出重进</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_graph</span><span class="params">(itemid,kind)</span>:</span></span><br><span class="line">    <span class="comment">#实例zabbixapi</span></span><br><span class="line">    zapi=ZabbixAPI()</span><br><span class="line">    token=zapi.UserLogin()</span><br><span class="line">    hosts=zapi.HostGet()</span><br><span class="line">    <span class="comment">#通过api获取历史数据，根据itemid号和类型,类型参考zabbix官网，测试中使用的zabbix3.0版本，https://www.zabbix.com/documentation/3.0/manual/api/reference/history/get</span></span><br><span class="line">    <span class="comment">#ParameterTypeDescription</span></span><br><span class="line">    <span class="comment">#historyintegerHistory object types to return. </span></span><br><span class="line">    <span class="comment">#Possible values: </span></span><br><span class="line">    <span class="comment">#0 - numeric float; </span></span><br><span class="line">    <span class="comment">#1 - character; </span></span><br><span class="line">    <span class="comment">#2 - log; </span></span><br><span class="line">    <span class="comment">#3 - numeric unsigned; </span></span><br><span class="line">    <span class="comment">#4 - text. </span></span><br><span class="line">    <span class="comment">#Default: 3.</span></span><br><span class="line">    host_hisdata=zapi.History(itemid,kind)</span><br><span class="line">    clock_list=[]</span><br><span class="line">    value_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> host_hisdata:</span><br><span class="line">        <span class="comment">#源数据存放</span></span><br><span class="line">        source_clock=i[<span class="string">'clock'</span>]</span><br><span class="line">        source_value=i[<span class="string">'value'</span>]</span><br><span class="line">        <span class="keyword">import</span> time </span><br><span class="line">        <span class="comment">#将时间戳转换为需要使用的正常日期格式</span></span><br><span class="line">        clock_array=time.localtime(int(source_clock))</span><br><span class="line">        clock_used=time.strftime(<span class="string">'%H:%M:%S'</span>,clock_array)</span><br><span class="line">        <span class="comment">#监控指标值转换为需要使用的正常格式；</span></span><br><span class="line">        value_used=int(source_value)/(<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">        <span class="comment">#分别添加到相应的列表中</span></span><br><span class="line">        clock_list.append(clock_used)</span><br><span class="line">        value_list.append(value_used)</span><br><span class="line">    <span class="comment">#定义字典存储获取到的时间和值域</span></span><br><span class="line">    data_dict=&#123;<span class="string">'clock'</span>:clock_list,<span class="string">'value'</span>:value_list&#125;</span><br><span class="line">    <span class="comment">#使用pandas的df数据框，通过字典转换并求转置  data=[n,2]，不能直接通过pd.DataFrame(data_dict['clock'],data_dict['value'])的方法初始化df数据框，会报错</span></span><br><span class="line">    data=pd.DataFrame.from_dict(data_dict,orient=<span class="string">'index'</span>).T    </span><br><span class="line">    <span class="comment">#将x，y值取出</span></span><br><span class="line">    x=range(len(data[<span class="string">'clock'</span>]))</span><br><span class="line">    y=data[<span class="string">'value'</span>]</span><br><span class="line">    <span class="comment">#画图</span></span><br><span class="line">    <span class="comment">#from matplotlib.font_manager import FontProperties</span></span><br><span class="line">    <span class="comment">#font = FontProperties(fname = "/usr/share/fonts/truetype/arphic/ukai.ttc", size=14) </span></span><br><span class="line">    <span class="comment">#plt.title(u"用户数量(Y)关于游戏消费金额(X)的分布图",fontproperties=font)</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">30</span>,<span class="number">15</span>))    </span><br><span class="line">    <span class="comment">#plt.subplot(221)</span></span><br><span class="line">    plt.plot(x,y,<span class="string">'ro-'</span>)</span><br><span class="line">    plt.title(<span class="string">'Memory'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'time'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Memory Avaliable/(M)'</span>)</span><br><span class="line">    plt.xticks(x, data[<span class="string">'clock'</span>],rotation=<span class="number">45</span>)</span><br><span class="line">    <span class="comment">#必须要先保存再show</span></span><br><span class="line">    plt.savefig(<span class="string">'result.jpg'</span>)</span><br><span class="line">    <span class="comment">#plt.show()</span></span><br><span class="line"><span class="comment">#发送微信</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_weixin</span><span class="params">(alart_img,chatroomName)</span>:</span></span><br><span class="line">    <span class="comment">#登录微信接口</span></span><br><span class="line">    itchat.auto_login(hotReload=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment">#查找微信中的指定群聊，入参为群聊名称</span></span><br><span class="line">    chatrooms=itchat.search_chatrooms(name=chatroomName)    </span><br><span class="line">    <span class="comment">#找到群聊的ID号码</span></span><br><span class="line">    chatroom_id=chatrooms[<span class="number">0</span>][<span class="string">'UserName'</span>]</span><br><span class="line">    <span class="comment">#向群聊中发送zabbix生成的图片</span></span><br><span class="line">    itchat.send_image(alart_img,chatroom_id)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    alart_img=<span class="string">'result.jpg'</span></span><br><span class="line">    chatroomName=<span class="string">u'♞魔都村民♛'</span></span><br><span class="line">    itemid=<span class="number">23316</span></span><br><span class="line">    kind=<span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment">#每隔5分钟取一次zabbix数据，画图</span></span><br><span class="line">        make_graph(itemid)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#发送微信群聊信息</span></span><br><span class="line">        send_weixin(alart_img,chatroomName)</span><br><span class="line">        <span class="comment">#循环等待</span></span><br><span class="line">        time.sleep(<span class="number">300</span>)</span><br></pre></td></tr></table></figure><p>忘记配置图了</p><p>config.ini文件和上边脚本放在同一级目录下，内容如下，IP换掉，zabbix的登录用户名如果没有改动的话就是图中所示，照抄即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[db]</span><br><span class="line">name = MY-DB</span><br><span class="line">host = 192.168.126.100</span><br><span class="line">port = 3306</span><br><span class="line">user = root</span><br><span class="line">pass = 123456</span><br><span class="line">[zabbix_server]</span><br><span class="line">url = http://192.168.1.110/zabbix/api_jsonrpc.php</span><br><span class="line">graphurl = http://192.168.1.110/zabbix/chart2.php</span><br><span class="line">itemurl = http://192.168.1.110/zabbix/chart.php</span><br><span class="line">header = &#123;&quot;Content-Type&quot;: &quot;application/json&quot;&#125;</span><br><span class="line">user = Admin</span><br><span class="line">password = zabbix</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Matplotlib模块的学习</title>
      <link href="/2018/03/12/Matplotlib%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<p><strong> Matplotlib模块的学习：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h3><p>Python中最著名的绘图系统，很多其他的绘图例如seaborn（针对pandas绘图而来）也是由其封装而成。创世人John Hunter于2012年离世。这个绘图系统操作起来很复杂，和R的ggplot,lattice绘图相比显得望而却步</p><p>需要掌握的是：</p><ol><li>散点图，折线图，条形图，直方图，饼状图，箱形图的绘制。</li><li>绘图的三大系统：pyplot，pylab(不推荐)，面向对象</li><li>坐标轴的调整，添加文字注释，区域填充，及特殊图形patches的使用</li><li>金融的同学注意的是：可以直接调用Yahoo财经数据绘图（真。。。）</li></ol><p><a href="http://python.jobbole.com/87471/" target="_blank" rel="noopener">参考链接</a></p><p><a href="https://matplotlib.org/" target="_blank" rel="noopener">官方网站</a>  </p><p>先贴上原版英文介绍震楼，英文好的同学自己翻译，不好的先去学好英语(开个玩笑)，我直接翻译一下，拿来主义直接看就是了。</p><h3 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h3><p>Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and <a href="http://ipython.org/" target="_blank" rel="noopener">IPython</a> shells, the <a href="http://jupyter.org/" target="_blank" rel="noopener">Jupyter</a> notebook, web application servers, and four graphical user interface toolkits.</p><p>Matplotlib tries to make easy things easy and hard things possible. You can generate plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc., with just a few lines of code. For examples, see the <a href="https://matplotlib.org/tutorials/introductory/sample_plots.html" target="_blank" rel="noopener">sample plots</a> and <a href="https://matplotlib.org/gallery/index.html" target="_blank" rel="noopener">thumbnail gallery</a>.</p><p>For simple plotting the <code>pyplot</code> module provides a MATLAB-like interface, particularly when combined with IPython. For the power user, you have full control of line styles, font properties, axes properties, etc, via an object oriented interface or via a set of functions familiar to MATLAB users.</p><p>我的翻译：</p><p>懒了，抽空补上</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>python版本：python3.5 </p><p>操作系统：window10 </p><p>建议安装：anaconda自带 Jupyter Notebook</p><hr><h3 id="Matplotlib代码学习（1）"><a href="#Matplotlib代码学习（1）" class="headerlink" title="Matplotlib代码学习（1）"></a>Matplotlib代码学习（1）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">unrate = pd.read_csv(<span class="string">'unrate.csv'</span>)</span><br><span class="line">unrate[<span class="string">'DATE'</span>] = pd.to_datetime(unrate[<span class="string">'DATE'</span>])</span><br><span class="line">print(unrate.head(<span class="number">12</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">         DATE  VALUE</span></span><br><span class="line"><span class="string">0  1948-01-01    3.4</span></span><br><span class="line"><span class="string">1  1948-02-01    3.8</span></span><br><span class="line"><span class="string">2  1948-03-01    4.0</span></span><br><span class="line"><span class="string">3  1948-04-01    3.9</span></span><br><span class="line"><span class="string">4  1948-05-01    3.5</span></span><br><span class="line"><span class="string">5  1948-06-01    3.6</span></span><br><span class="line"><span class="string">6  1948-07-01    3.6</span></span><br><span class="line"><span class="string">7  1948-08-01    3.9</span></span><br><span class="line"><span class="string">8  1948-09-01    3.8</span></span><br><span class="line"><span class="string">9  1948-10-01    3.7</span></span><br><span class="line"><span class="string">10 1948-11-01    3.8</span></span><br><span class="line"><span class="string">11 1948-12-01    4.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#%matplotlib inline</span></span><br><span class="line"><span class="comment">#Using the different pyplot functions, we can create, customize, and display a plot. For example, we can use 2 functions to :</span></span><br><span class="line">plt.plot()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">first_twelve = unrate[<span class="number">0</span>:<span class="number">12</span>]</span><br><span class="line">plt.plot(first_twelve[<span class="string">'DATE'</span>], first_twelve[<span class="string">'VALUE'</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#While the y-axis looks fine, the x-axis tick labels are too close together and are unreadable</span></span><br><span class="line"><span class="comment">#We can rotate the x-axis tick labels by 90 degrees so they don't overlap</span></span><br><span class="line"><span class="comment">#We can specify degrees of rotation using a float or integer value.</span></span><br><span class="line">plt.plot(first_twelve[<span class="string">'DATE'</span>], first_twelve[<span class="string">'VALUE'</span>])</span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line"><span class="comment">#print help(plt.xticks)</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#xlabel(): accepts a string value, which gets set as the x-axis label.</span></span><br><span class="line"><span class="comment">#ylabel(): accepts a string value, which is set as the y-axis label.</span></span><br><span class="line"><span class="comment">#title(): accepts a string value, which is set as the plot title.</span></span><br><span class="line"></span><br><span class="line">plt.plot(first_twelve[<span class="string">'DATE'</span>], first_twelve[<span class="string">'VALUE'</span>])</span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Month'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Unemployment Rate'</span>)</span><br><span class="line">plt.title(<span class="string">'Monthly Unemployment Trends, 1948'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><hr><h3 id="Matplotlib代码学习（2）"><a href="#Matplotlib代码学习（2）" class="headerlink" title="Matplotlib代码学习（2）"></a>Matplotlib代码学习（2）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mport pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">unrate = pd.read_csv(<span class="string">'unrate.csv'</span>)</span><br><span class="line">unrate[<span class="string">'DATE'</span>] = pd.to_datetime(unrate[<span class="string">'DATE'</span>])</span><br><span class="line">first_twelve = unrate[<span class="number">0</span>:<span class="number">12</span>]</span><br><span class="line">plt.plot(first_twelve[<span class="string">'DATE'</span>], first_twelve[<span class="string">'VALUE'</span>])</span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Month'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Unemployment Rate'</span>)</span><br><span class="line">plt.title(<span class="string">'Monthly Unemployment Trends, 1948'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#add_subplot(first,second,index) first means number of Row,second means number of Column.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">ax3 = fig.add_subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-2.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#fig = plt.figure()</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">ax1.plot(np.random.randint(<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>), np.arange(<span class="number">5</span>))</span><br><span class="line">ax2.plot(np.arange(<span class="number">10</span>)*<span class="number">3</span>, np.arange(<span class="number">10</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-3.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unrate[<span class="string">'MONTH'</span>] = unrate[<span class="string">'DATE'</span>].dt.month</span><br><span class="line">unrate[<span class="string">'MONTH'</span>] = unrate[<span class="string">'DATE'</span>].dt.month</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(unrate[<span class="number">0</span>:<span class="number">12</span>][<span class="string">'MONTH'</span>], unrate[<span class="number">0</span>:<span class="number">12</span>][<span class="string">'VALUE'</span>], c=<span class="string">'red'</span>)</span><br><span class="line">plt.plot(unrate[<span class="number">12</span>:<span class="number">24</span>][<span class="string">'MONTH'</span>], unrate[<span class="number">12</span>:<span class="number">24</span>][<span class="string">'VALUE'</span>], c=<span class="string">'blue'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-4.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'orange'</span>, <span class="string">'black'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    start_index = i*<span class="number">12</span></span><br><span class="line">    end_index = (i+<span class="number">1</span>)*<span class="number">12</span></span><br><span class="line">    subset = unrate[start_index:end_index]</span><br><span class="line">    plt.plot(subset[<span class="string">'MONTH'</span>], subset[<span class="string">'VALUE'</span>], c=colors[i])</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-5.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'orange'</span>, <span class="string">'black'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    start_index = i*<span class="number">12</span></span><br><span class="line">    end_index = (i+<span class="number">1</span>)*<span class="number">12</span></span><br><span class="line">    subset = unrate[start_index:end_index]</span><br><span class="line">    label = str(<span class="number">1948</span> + i)</span><br><span class="line">    plt.plot(subset[<span class="string">'MONTH'</span>], subset[<span class="string">'VALUE'</span>], c=colors[i], label=label)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line"><span class="comment">#print (help(plt.legend))</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-6.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'orange'</span>, <span class="string">'black'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    start_index = i*<span class="number">12</span></span><br><span class="line">    end_index = (i+<span class="number">1</span>)*<span class="number">12</span></span><br><span class="line">    subset = unrate[start_index:end_index]</span><br><span class="line">    label = str(<span class="number">1948</span> + i)</span><br><span class="line">    plt.plot(subset[<span class="string">'MONTH'</span>], subset[<span class="string">'VALUE'</span>], c=colors[i], label=label)</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Month, Integer'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Unemployment Rate, Percent'</span>)</span><br><span class="line">plt.title(<span class="string">'Monthly Unemployment Trends, 1948-1952'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-7.png" alt=""></p><hr><h3 id="Matplotlib代码学习（3）"><a href="#Matplotlib代码学习（3）" class="headerlink" title="Matplotlib代码学习（3）"></a>Matplotlib代码学习（3）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">reviews = pd.read_csv(<span class="string">'fandango_scores.csv'</span>)</span><br><span class="line">cols = [<span class="string">'FILM'</span>, <span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>, <span class="string">'Fandango_Stars'</span>]</span><br><span class="line">norm_reviews = reviews[cols]</span><br><span class="line">print(norm_reviews[:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                             FILM  RT_user_norm  Metacritic_user_nom  \</span><br><span class="line">0  Avengers: Age of Ultron (2015)           4.3                 3.55   </span><br><span class="line">1               Cinderella (2015)           4.0                 3.75   </span><br><span class="line">2                  Ant-Man (2015)           4.5                 4.05   </span><br><span class="line"></span><br><span class="line">   IMDB_norm  Fandango_Ratingvalue  Fandango_Stars  </span><br><span class="line">0       3.90                   4.5             5.0  </span><br><span class="line">1       3.55                   4.5             5.0  </span><br><span class="line">2       3.90                   4.5             5.0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> arange</span><br><span class="line"><span class="comment">#The Axes.bar() method has 2 required parameters, left and height. </span></span><br><span class="line"><span class="comment">#We use the left parameter to specify the x coordinates of the left sides of the bar. </span></span><br><span class="line"><span class="comment">#We use the height parameter to specify the height of each bar</span></span><br><span class="line">num_cols = [<span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>, <span class="string">'Fandango_Stars'</span>]</span><br><span class="line"></span><br><span class="line">bar_heights = norm_reviews.ix[<span class="number">0</span>, num_cols].values</span><br><span class="line"><span class="keyword">print</span> (bar_heights)</span><br><span class="line">bar_positions = arange(<span class="number">5</span>) + <span class="number">0.75</span></span><br><span class="line"><span class="keyword">print</span> (bar_positions)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.bar(bar_positions, bar_heights, <span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-8.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#By default, matplotlib sets the x-axis tick labels to the integer values the bars </span></span><br><span class="line"><span class="comment">#spanned on the x-axis (from 0 to 6). We only need tick labels on the x-axis where the bars are positioned. </span></span><br><span class="line"><span class="comment">#We can use Axes.set_xticks() to change the positions of the ticks to [1, 2, 3, 4, 5]:</span></span><br><span class="line"></span><br><span class="line">num_cols = [<span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>, <span class="string">'Fandango_Stars'</span>]</span><br><span class="line">bar_heights = norm_reviews.ix[<span class="number">0</span>, num_cols].values</span><br><span class="line">bar_positions = arange(<span class="number">5</span>) + <span class="number">0.75</span></span><br><span class="line">tick_positions = range(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line">ax.bar(bar_positions, bar_heights, <span class="number">0.5</span>)</span><br><span class="line">ax.set_xticks(tick_positions)</span><br><span class="line">ax.set_xticklabels(num_cols, rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">ax.set_xlabel(<span class="string">'Rating Source'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Average Rating'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Average User Rating For Avengers: Age of Ultron (2015)'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-9.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> arange</span><br><span class="line">num_cols = [<span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>, <span class="string">'Fandango_Stars'</span>]</span><br><span class="line"></span><br><span class="line">bar_widths = norm_reviews.ix[<span class="number">0</span>, num_cols].values</span><br><span class="line">bar_positions = arange(<span class="number">5</span>) + <span class="number">0.75</span></span><br><span class="line">tick_positions = range(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.barh(bar_positions, bar_widths, <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">ax.set_yticks(tick_positions)</span><br><span class="line">ax.set_yticklabels(num_cols)</span><br><span class="line">ax.set_ylabel(<span class="string">'Rating Source'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'Average Rating'</span>)</span><br><span class="line">ax.set_title(<span class="string">'Average User Rating For Avengers: Age of Ultron (2015)'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-10.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Let's look at a plot that can help us visualize many points.</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.scatter(norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>], norm_reviews[<span class="string">'RT_user_norm'</span>])</span><br><span class="line">ax.set_xlabel(<span class="string">'Fandango'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Rotten Tomatoes'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-11.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Switching Axes</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">ax1.scatter(norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>], norm_reviews[<span class="string">'RT_user_norm'</span>])</span><br><span class="line">ax1.set_xlabel(<span class="string">'Fandango'</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'Rotten Tomatoes'</span>)</span><br><span class="line">ax2.scatter(norm_reviews[<span class="string">'RT_user_norm'</span>], norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>])</span><br><span class="line">ax2.set_xlabel(<span class="string">'Rotten Tomatoes'</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">'Fandango'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-12.png" alt=""></p><hr><h3 id="Matplotlib代码学习（4）"><a href="#Matplotlib代码学习（4）" class="headerlink" title="Matplotlib代码学习（4）"></a>Matplotlib代码学习（4）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">reviews = pd.read_csv(<span class="string">'fandango_scores.csv'</span>)</span><br><span class="line">cols = [<span class="string">'FILM'</span>, <span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>]</span><br><span class="line">norm_reviews = reviews[cols]</span><br><span class="line">print(norm_reviews[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">                             FILM  RT_user_norm  Metacritic_user_nom  \</span><br><span class="line">0  Avengers: Age of Ultron (2015)           4.3                 3.55   </span><br><span class="line">1               Cinderella (2015)           4.0                 3.75   </span><br><span class="line">2                  Ant-Man (2015)           4.5                 4.05   </span><br><span class="line">3          Do You Believe? (2015)           4.2                 2.35   </span><br><span class="line">4   Hot Tub Time Machine 2 (2015)           1.4                 1.70   </span><br><span class="line"></span><br><span class="line">   IMDB_norm  Fandango_Ratingvalue  </span><br><span class="line">0       3.90                   4.5  </span><br><span class="line">1       3.55                   4.5  </span><br><span class="line">2       3.90                   4.5  </span><br><span class="line">3       2.70                   4.5  </span><br><span class="line">4       2.55                   3.0</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fandango_distribution = norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>].value_counts()</span><br><span class="line">fandango_distribution = fandango_distribution.sort_index()</span><br><span class="line"></span><br><span class="line">imdb_distribution = norm_reviews[<span class="string">'IMDB_norm'</span>].value_counts()</span><br><span class="line">imdb_distribution = imdb_distribution.sort_index()</span><br><span class="line"></span><br><span class="line">print(fandango_distribution)</span><br><span class="line">print(imdb_distribution)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">2.7     2</span><br><span class="line">2.8     2</span><br><span class="line">2.9     5</span><br><span class="line">3.0     4</span><br><span class="line">3.1     3</span><br><span class="line">3.2     5</span><br><span class="line">3.3     4</span><br><span class="line">3.4     9</span><br><span class="line">3.5     9</span><br><span class="line">3.6     8</span><br><span class="line">3.7     9</span><br><span class="line">3.8     5</span><br><span class="line">3.9    12</span><br><span class="line">4.0     7</span><br><span class="line">4.1    16</span><br><span class="line">4.2    12</span><br><span class="line">4.3    11</span><br><span class="line">4.4     7</span><br><span class="line">4.5     9</span><br><span class="line">4.6     4</span><br><span class="line">4.8     3</span><br><span class="line">Name: Fandango_Ratingvalue, dtype: int64</span><br><span class="line">2.00     1</span><br><span class="line">2.10     1</span><br><span class="line">2.15     1</span><br><span class="line">2.20     1</span><br><span class="line">2.30     2</span><br><span class="line">2.45     2</span><br><span class="line">2.50     1</span><br><span class="line">2.55     1</span><br><span class="line">2.60     2</span><br><span class="line">2.70     4</span><br><span class="line">2.75     5</span><br><span class="line">2.80     2</span><br><span class="line">2.85     1</span><br><span class="line">2.90     1</span><br><span class="line">2.95     3</span><br><span class="line">3.00     2</span><br><span class="line">3.05     4</span><br><span class="line">3.10     1</span><br><span class="line">3.15     9</span><br><span class="line">3.20     6</span><br><span class="line">3.25     4</span><br><span class="line">3.30     9</span><br><span class="line">3.35     7</span><br><span class="line">3.40     1</span><br><span class="line">3.45     7</span><br><span class="line">3.50     4</span><br><span class="line">3.55     7</span><br><span class="line">3.60    10</span><br><span class="line">3.65     5</span><br><span class="line">3.70     8</span><br><span class="line">3.75     6</span><br><span class="line">3.80     3</span><br><span class="line">3.85     4</span><br><span class="line">3.90     9</span><br><span class="line">3.95     2</span><br><span class="line">4.00     1</span><br><span class="line">4.05     1</span><br><span class="line">4.10     4</span><br><span class="line">4.15     1</span><br><span class="line">4.20     2</span><br><span class="line">4.30     1</span><br><span class="line">Name: IMDB_norm, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line"><span class="comment">#ax.hist(norm_reviews['Fandango_Ratingvalue'])</span></span><br><span class="line"><span class="comment">#ax.hist(norm_reviews['Fandango_Ratingvalue'],bins=20)</span></span><br><span class="line">ax.hist(norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>], range=(<span class="number">4</span>, <span class="number">5</span>),bins=<span class="number">20</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-13.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">5</span>,<span class="number">20</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">ax3 = fig.add_subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">ax4 = fig.add_subplot(<span class="number">4</span>,<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">ax1.hist(norm_reviews[<span class="string">'Fandango_Ratingvalue'</span>], bins=<span class="number">20</span>, range=(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">ax1.set_title(<span class="string">'Distribution of Fandango Ratings'</span>)</span><br><span class="line">ax1.set_ylim(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">ax2.hist(norm_reviews[<span class="string">'RT_user_norm'</span>], <span class="number">20</span>, range=(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">ax2.set_title(<span class="string">'Distribution of Rotten Tomatoes Ratings'</span>)</span><br><span class="line">ax2.set_ylim(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">ax3.hist(norm_reviews[<span class="string">'Metacritic_user_nom'</span>], <span class="number">20</span>, range=(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">ax3.set_title(<span class="string">'Distribution of Metacritic Ratings'</span>)</span><br><span class="line">ax3.set_ylim(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">ax4.hist(norm_reviews[<span class="string">'IMDB_norm'</span>], <span class="number">20</span>, range=(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">ax4.set_title(<span class="string">'Distribution of IMDB Ratings'</span>)</span><br><span class="line">ax4.set_ylim(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-14.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.boxplot(norm_reviews[<span class="string">'RT_user_norm'</span>])</span><br><span class="line">ax.set_xticklabels([<span class="string">'Rotten Tomatoes'</span>])</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-15.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_cols = [<span class="string">'RT_user_norm'</span>, <span class="string">'Metacritic_user_nom'</span>, <span class="string">'IMDB_norm'</span>, <span class="string">'Fandango_Ratingvalue'</span>]</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.boxplot(norm_reviews[num_cols].values)</span><br><span class="line">ax.set_xticklabels(num_cols, rotation=<span class="number">90</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-16.png" alt=""></p><hr><h3 id="Matplotlib代码学习（5）"><a href="#Matplotlib代码学习（5）" class="headerlink" title="Matplotlib代码学习（5）"></a>Matplotlib代码学习（5）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">women_degrees = pd.read_csv(<span class="string">'percent-bachelors-degrees-women-usa.csv'</span>)</span><br><span class="line">plt.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[<span class="string">'Biology'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-20.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#100-women_degrees means men</span></span><br><span class="line">plt.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[<span class="string">'Biology'</span>], c=<span class="string">'blue'</span>, label=<span class="string">'Women'</span>)</span><br><span class="line">plt.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[<span class="string">'Biology'</span>], c=<span class="string">'green'</span>, label=<span class="string">'Men'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.title(<span class="string">'Percentage of Biology Degrees Awarded By Gender'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-21.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fig, ax = plt.subplots()</span></span><br><span class="line"><span class="comment"># Add your code here.</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[<span class="string">'Biology'</span>], label=<span class="string">'Women'</span>)</span><br><span class="line">ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[<span class="string">'Biology'</span>], label=<span class="string">'Men'</span>)</span><br><span class="line"></span><br><span class="line">ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line">ax.set_title(<span class="string">'Percentage of Biology Degrees Awarded By Gender'</span>)</span><br><span class="line">ax.legend(loc=<span class="string">"upper right"</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-17.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[<span class="string">'Biology'</span>], c=<span class="string">'blue'</span>, label=<span class="string">'Women'</span>)</span><br><span class="line">ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[<span class="string">'Biology'</span>], c=<span class="string">'green'</span>, label=<span class="string">'Men'</span>)</span><br><span class="line">ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">    spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line"><span class="comment"># End solution code.</span></span><br><span class="line">ax.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-18.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">major_cats = [<span class="string">'Biology'</span>, <span class="string">'Computer Science'</span>, <span class="string">'Engineering'</span>, <span class="string">'Math and Statistics'</span>]</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,sp+<span class="number">1</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[major_cats[sp]], c=<span class="string">'blue'</span>, label=<span class="string">'Women'</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[major_cats[sp]], c=<span class="string">'green'</span>, label=<span class="string">'Men'</span>)</span><br><span class="line">    <span class="comment"># Add your code here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calling pyplot.legend() here will add the legend to the last subplot that was created.</span></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">major_cats = [<span class="string">'Biology'</span>, <span class="string">'Computer Science'</span>, <span class="string">'Engineering'</span>, <span class="string">'Math and Statistics'</span>]</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,sp+<span class="number">1</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[major_cats[sp]], c=<span class="string">'blue'</span>, label=<span class="string">'Women'</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[major_cats[sp]], c=<span class="string">'green'</span>, label=<span class="string">'Men'</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(major_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calling pyplot.legend() here will add the legend to the last subplot that was created.</span></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-19.png" alt=""></p><p><img src="/2018/03/12/Matplotlib模块的学习/plt-22.png" alt=""></p><hr><h3 id="Matplotlib代码学习（6）"><a href="#Matplotlib代码学习（6）" class="headerlink" title="Matplotlib代码学习（6）"></a>Matplotlib代码学习（6）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Color</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">women_degrees = pd.read_csv(<span class="string">'percent-bachelors-degrees-women-usa.csv'</span>)</span><br><span class="line">major_cats = [<span class="string">'Biology'</span>, <span class="string">'Computer Science'</span>, <span class="string">'Engineering'</span>, <span class="string">'Math and Statistics'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cb_dark_blue = (<span class="number">0</span>/<span class="number">255</span>, <span class="number">107</span>/<span class="number">255</span>, <span class="number">164</span>/<span class="number">255</span>)</span><br><span class="line">cb_orange = (<span class="number">255</span>/<span class="number">255</span>, <span class="number">128</span>/<span class="number">255</span>, <span class="number">14</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,sp+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># The color for each line is assigned here.</span></span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[major_cats[sp]], c=cb_dark_blue, label=<span class="string">'Women'</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[major_cats[sp]], c=cb_orange, label=<span class="string">'Men'</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(major_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-23.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Setting Line Width</span></span><br><span class="line">cb_dark_blue = (<span class="number">0</span>/<span class="number">255</span>, <span class="number">107</span>/<span class="number">255</span>, <span class="number">164</span>/<span class="number">255</span>)</span><br><span class="line">cb_orange = (<span class="number">255</span>/<span class="number">255</span>, <span class="number">128</span>/<span class="number">255</span>, <span class="number">14</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,sp+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Set the line width when specifying how each line should look.</span></span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[major_cats[sp]], c=cb_dark_blue, label=<span class="string">'Women'</span>, linewidth=<span class="number">10</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[major_cats[sp]], c=cb_orange, label=<span class="string">'Men'</span>, linewidth=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(major_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-24.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">stem_cats = [<span class="string">'Engineering'</span>, <span class="string">'Computer Science'</span>, <span class="string">'Psychology'</span>, <span class="string">'Biology'</span>, <span class="string">'Physical Sciences'</span>, <span class="string">'Math and Statistics'</span>]</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">18</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">1</span>,<span class="number">6</span>,sp+<span class="number">1</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[stem_cats[sp]], c=cb_dark_blue, label=<span class="string">'Women'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[stem_cats[sp]], c=cb_orange, label=<span class="string">'Men'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(stem_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-25.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">18</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">1</span>,<span class="number">6</span>,sp+<span class="number">1</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[stem_cats[sp]], c=cb_dark_blue, label=<span class="string">'Women'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[stem_cats[sp]], c=cb_orange, label=<span class="string">'Men'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(stem_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.show()</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">18</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sp <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    ax = fig.add_subplot(<span class="number">1</span>,<span class="number">6</span>,sp+<span class="number">1</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], women_degrees[stem_cats[sp]], c=cb_dark_blue, label=<span class="string">'Women'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    ax.plot(women_degrees[<span class="string">'Year'</span>], <span class="number">100</span>-women_degrees[stem_cats[sp]], c=cb_orange, label=<span class="string">'Men'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> key,spine <span class="keyword">in</span> ax.spines.items():</span><br><span class="line">        spine.set_visible(<span class="keyword">False</span>)</span><br><span class="line">    ax.set_xlim(<span class="number">1968</span>, <span class="number">2011</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">    ax.set_title(stem_cats[sp])</span><br><span class="line">    ax.tick_params(bottom=<span class="string">"off"</span>, top=<span class="string">"off"</span>, left=<span class="string">"off"</span>, right=<span class="string">"off"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> sp == <span class="number">0</span>:</span><br><span class="line">        ax.text(<span class="number">2005</span>, <span class="number">87</span>, <span class="string">'Men'</span>)</span><br><span class="line">        ax.text(<span class="number">2002</span>, <span class="number">8</span>, <span class="string">'Women'</span>)</span><br><span class="line">    <span class="keyword">elif</span> sp == <span class="number">5</span>:</span><br><span class="line">        ax.text(<span class="number">2005</span>, <span class="number">62</span>, <span class="string">'Men'</span>)</span><br><span class="line">        ax.text(<span class="number">2001</span>, <span class="number">35</span>, <span class="string">'Women'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-26.png" alt=""></p><hr><h3 id="Matplotlib代码学习（7）"><a href="#Matplotlib代码学习（7）" class="headerlink" title="Matplotlib代码学习（7）"></a>Matplotlib代码学习（7）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">titanic = pd.read_csv(<span class="string">'train.csv'</span>)</span><br><span class="line"><span class="keyword">print</span> (titanic.head())</span><br><span class="line">cols = [<span class="string">'Survived'</span>, <span class="string">'Pclass'</span>, <span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'SibSp'</span>, <span class="string">'Parch'</span>, <span class="string">'Fare'</span>, <span class="string">'Embarked'</span>]</span><br><span class="line">titanic = titanic[cols].dropna()</span><br><span class="line"><span class="keyword">print</span> (titanic.head())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">‘’PassengerId  Survived  Pclass  \</span></span><br><span class="line"><span class="string">0            1         0       3   </span></span><br><span class="line"><span class="string">1            2         1       1   </span></span><br><span class="line"><span class="string">2            3         1       3   </span></span><br><span class="line"><span class="string">3            4         1       1   </span></span><br><span class="line"><span class="string">4            5         0       3   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                                                Name     Sex   Age  SibSp  \</span></span><br><span class="line"><span class="string">0                            Braund, Mr. Owen Harris    male  22.0      1   </span></span><br><span class="line"><span class="string">1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   </span></span><br><span class="line"><span class="string">2                             Heikkinen, Miss. Laina  female  26.0      0   </span></span><br><span class="line"><span class="string">3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   </span></span><br><span class="line"><span class="string">4                           Allen, Mr. William Henry    male  35.0      0   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Parch            Ticket     Fare Cabin Embarked  </span></span><br><span class="line"><span class="string">0      0         A/5 21171   7.2500   NaN        S  </span></span><br><span class="line"><span class="string">1      0          PC 17599  71.2833   C85        C  </span></span><br><span class="line"><span class="string">2      0  STON/O2. 3101282   7.9250   NaN        S  </span></span><br><span class="line"><span class="string">3      0            113803  53.1000  C123        S  </span></span><br><span class="line"><span class="string">4      0            373450   8.0500   NaN        S  </span></span><br><span class="line"><span class="string">   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked</span></span><br><span class="line"><span class="string">0         0       3    male  22.0      1      0   7.2500        S</span></span><br><span class="line"><span class="string">1         1       1  female  38.0      1      0  71.2833        C</span></span><br><span class="line"><span class="string">2         1       3  female  26.0      0      0   7.9250        S</span></span><br><span class="line"><span class="string">3         1       1  female  35.0      1      0  53.1000        S</span></span><br><span class="line"><span class="string">4         0       3    male  35.0      0      0   8.0500        S</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">sns.distplot(titanic[<span class="string">'Age'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2018/03/12/Matplotlib模块的学习/plt-27.png" alt=""></p></the>]]></content>
      
      <categories>
          
          <category> mlearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>zabbix自动发现无法获取主机</title>
      <link href="/2018/02/10/zabbix%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E4%B8%BB%E6%9C%BA/"/>
      <content type="html"><![CDATA[<p><strong> zabbix自动发现无法获取主机：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p><img src="/2018/02/10/zabbix自动发现无法获取主机/1.png" alt=""></p><p><img src="/2018/02/10/zabbix自动发现无法获取主机/2.png" alt=""></p><p><img src="/2018/02/10/zabbix自动发现无法获取主机/3.png" alt=""></p></the>]]></content>
      
      <categories>
          
          <category> operation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>zabbix-proxy安装</title>
      <link href="/2018/01/13/zabbix-proxy%E5%AE%89%E8%A3%85/"/>
      <content type="html"><![CDATA[<p><strong> zabbix-proxy安装：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>rpm离线安装</p><p>1、首先安装mysql使用的包有，下载下来，mysql官网下载<a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></p><p>Mysql-server-5.6.21</p><p>Mysql-client-5.6.21</p><p>Mysql-shared-compat-5.6.21</p><p>Mysql-shared-5.6.21</p><p>Mysql-devel-5.6.21</p><p>Mysql-5.6.21</p><p>2、利用本地镜像安装一些辅助类libxmllibxml2 libcurl libcurl-devel net-snmp-devel</p><p>3、下载zabbix的rpm包，此处我们只用了proxy，和agent，所以下载了这两个</p><p>因为server端是3.0.9，所以proxy端和agent也用同样的版本</p><p>Zabbix-proxy-mysql-3.0.9</p><p>Zabbix-agent-3.0.9</p><p>同时还下载了java网关</p><p>Zabbix-java-gateway-3.0.9</p><p>发送工具</p><p>Zabbix-sender-3.0.9</p><p>接受工具</p><p>Zabbix-get-3.0.9</p><p>下载地址：<a href="https://repo.zabbix.com/zabbix/3.0/rhel/6/x86_64/" target="_blank" rel="noopener">https://repo.zabbix.com/zabbix/3.0/rhel/6/x86_64/</a></p><p>当然地址根据操作系统和zabbix的使用版本不同，下载位置不一样</p><p>4、跟所有的zabbix安装一样，要建一个zabbix用户、初始化数据库(proxy只用初始化表，无初始化表数据)等</p><p>这里记录一下proxy的rpm安装之后查找初始化数据库的sql脚本位置</p><p>先使用rpm -ql|grep zabbix-proxy查找到zabbix安装了哪些文件</p><p>然后找到/usr/share/doc/zabbix/***.sql.gz，脚本名字忘记了，但是应该是一个压缩文件</p><p>然后执行zcat /usr/share/doc/zabbix/***.sql.gz|xargs mysql -u zabbix -p zabbix_proxy</p><p>前提是已经为mysql创建好了zabbix用户，并且已经建好了一个zabbix_proxy的空的utf-8的数据库</p></the>]]></content>
      
      <categories>
          
          <category> operation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dbfpy模块的使用案例-python2.7</title>
      <link href="/2017/09/10/dbfpy/"/>
      <content type="html"><![CDATA[<p><strong> dbfpy模块的使用案例-python2.7：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>前两天写的一段处理dbf文件的案例，用于删除类dbf文件内容，提供了一种新思路。<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>对于每日接收的dbf格式的文件(以.dbf后缀的文件)或者是每日接收的日期结尾的文件，例如XXXX.dbf或者XXXX.0310，</p><p>对于这种实质上dbf内容的文件，需要进行删除操作；</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>百度python能够直接使用的模块无果，比较之下dbfpy文件能够较好的处理dbf文件，dbfpy文件能够实现读取现有的dbf文件内容、字段名称、格式以及长度，以及新写一个新的文件，为了实现删除操作，换一种思路如下:</p><ol><li>读取所有的源文件数据</li><li>去除不要的数据，留下想要的数据，即删除操作</li><li>新建一个新文件，数据结构和字段、长度均为源文件结构</li><li>将第二步留下的数据写入到第三步中产生的新文件中</li></ol><p>好了，需求和分析完成，贴上代码</p><p>因为dbfpy模块是python27下的，因此以下代码实在python2.7下运行的</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> dbfpy <span class="keyword">import</span> dbf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h4 id="重建函数"><a href="#重建函数" class="headerlink" title="重建函数"></a>重建函数</h4><p>定义一个重建函数，将一个文件名称传入函数，例如将XXXXX.dbf作为入参传入函数；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rebulid_dbf</span><span class="params">(x)</span>:</span></span><br><span class="line">    sourcefile = dbf.Dbf(x, <span class="keyword">True</span>)</span><br><span class="line">    sourcefield_name=sourcefile.fieldNames</span><br><span class="line">    sourcefield=sourcefile.header.fields</span><br><span class="line">    ziduan=[]</span><br><span class="line">    leixing=[]</span><br><span class="line">    changdu=[]</span><br><span class="line">    jingdu=[]</span><br><span class="line">    <span class="comment">#n=0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sourcefield:</span><br><span class="line">        k = re.split(<span class="string">' +'</span>, str(i))</span><br><span class="line">        <span class="comment">#print k[1] ,len(k)</span></span><br><span class="line">        ziduan.append(k[<span class="number">0</span>])</span><br><span class="line">        leixing.append(k[<span class="number">1</span>])</span><br><span class="line">        changdu.append(k[<span class="number">2</span>])</span><br><span class="line">        jingdu.append(k[<span class="number">3</span>])</span><br><span class="line">    a = []</span><br><span class="line">    b = []</span><br><span class="line">    time=<span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="string">'op_ccbdjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf file</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_hyccjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf file</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_jsmxjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'op_zqjsjsq1l.dbf'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'ZQZH'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_JSMX'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_JSMX'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_HYCC'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_HYCC'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br><span class="line">    <span class="keyword">elif</span> x==<span class="string">'SQ_HYCB'</span>+MMDD+<span class="string">'.dbf'</span> <span class="keyword">or</span> x==<span class="string">'SQ_HYCB'</span>+MMDD+<span class="string">'.DBF'</span>:</span><br><span class="line">        <span class="keyword">for</span> rec <span class="keyword">in</span> sourcefile:</span><br><span class="line">            <span class="keyword">if</span> rec[<span class="string">'jydy'</span>] != <span class="string">'xxxx'</span>:</span><br><span class="line">                time+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> ziduan:</span><br><span class="line">                    a.append(rec[i])</span><br><span class="line">        raw=sourcefile.recordCount</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(time):</span><br><span class="line">            b.append(a[i*len(ziduan):(i+<span class="number">1</span>)*len(ziduan)])</span><br><span class="line">        <span class="comment">#create new dbf table</span></span><br><span class="line">        myfile = dbf.Dbf(<span class="string">'MID_FILE_'</span>+x, new=<span class="keyword">True</span>)</span><br><span class="line">        needField=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ziduan)):</span><br><span class="line">            newField=()</span><br><span class="line">            <span class="keyword">if</span> leixing[i] == <span class="string">'C'</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                newField = (ziduan[i], leixing[i], int(changdu[i]), int(jingdu[i]))</span><br><span class="line">            needField.append(newField)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> needField:</span><br><span class="line">            myfile.addField(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            data = myfile.newRecord()</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(sourcefield_name)):</span><br><span class="line">                <span class="keyword">if</span> leixing[j] == <span class="string">'C'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = str(b[i][j])</span><br><span class="line">                <span class="keyword">elif</span> leixing[j] == <span class="string">'N'</span>:</span><br><span class="line">                    data[sourcefield_name[j]] = float(b[i][j])</span><br><span class="line">            data.store()</span><br><span class="line">        myfile.close()</span><br></pre></td></tr></table></figure><h4 id="预处理、中转函数"><a href="#预处理、中转函数" class="headerlink" title="预处理、中转函数"></a>预处理、中转函数</h4><p>此函数主要用于将原文件拷贝到指定的一个中转mid目录下进行操作，并将处理完的结果拷贝回原目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sett_file</span><span class="params">(x,insett_file,insett_path,location)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> location==<span class="string">'SH'</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> insett_file:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> x:</span><br><span class="line">                os.chdir(insett_path)</span><br><span class="line">                j_f=j+<span class="string">'.dbf'</span></span><br><span class="line">                <span class="keyword">if</span> j <span class="keyword">in</span> i <span class="keyword">and</span> i != j_f:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'-------------上海-------------------'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'1、今日存在%s文件，现在拷贝文件到mid.....'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\mid\%s\%s &gt;&gt; ..\mid\%s\copy_%s.log"</span> % (i,YYYYMMDD,i,YYYYMMDD,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'2、%s文件已拷贝至mid'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % j</span><br><span class="line">                    os.chdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">                    <span class="keyword">if</span> os.path.exists(j_f):</span><br><span class="line">                        os.system(<span class="string">"del %s"</span> % j_f)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy ..\..\%s\%s .\%s &gt;&gt; copy_%s.log"</span> % (YYYYMMDD,i,j_f,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'3、mid中文件已拷贝为%s格式供使用'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) %j_f</span><br><span class="line">                    rebulid_dbf(j_f)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'4、mid中文件已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\..\%s\%s  /y &gt;&gt; copy_%s.log"</span> % (<span class="string">'MID_FILE_'</span>+j_f,YYYYMMDD,i,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'5、清算目录下的文件%s已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">    <span class="keyword">elif</span> location==<span class="string">'SZ'</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> insett_file:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> x:</span><br><span class="line">                os.chdir(insett_path)</span><br><span class="line">                j_f_big = j+MMDD+<span class="string">'.DBF'</span></span><br><span class="line">                j_f_small= j+MMDD+<span class="string">'.dbf'</span></span><br><span class="line">                <span class="comment">#print j_f,i</span></span><br><span class="line">                <span class="keyword">if</span> i == j_f_big <span class="keyword">or</span> i == j_f_small:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'-------------深圳-------------------'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'1、今日存在%s文件，现在拷贝文件到mid.....'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\mid\%s\%s &gt;&gt; ..\mid\%s\copy_%s.log"</span> % (i,YYYYMMDD,i,YYYYMMDD,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'2、%s文件已拷贝至mid'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % j</span><br><span class="line">                    os.chdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">                    rebulid_dbf(j_f_big)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'3、mid中文件已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">                    os.system(<span class="string">"echo f|xcopy .\%s ..\..\%s\%s  /y &gt;&gt; copy_%s.log"</span> % (<span class="string">'MID_FILE_'</span>+j_f_big,YYYYMMDD,i,YYYYMMDD))</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'4、清算目录下的文件%s已重建'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % i</span><br></pre></td></tr></table></figure><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><p>作为主函数入口，定义时间、路径、要修改的文件名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    YYYYMMDD = time.strftime(<span class="string">'%Y%m%d'</span>, time.localtime())</span><br><span class="line">    MMDD = time.strftime(<span class="string">'%m%d'</span>, time.localtime())</span><br><span class="line">    insett_path = <span class="string">r'D:\abc\abc\%s'</span> % YYYYMMDD</span><br><span class="line">    os.chdir(insett_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'..\mid\%s'</span> % YYYYMMDD):</span><br><span class="line">        os.mkdir(<span class="string">'..\mid\%s'</span> % YYYYMMDD)</span><br><span class="line">    insett_file = os.listdir(insett_path)</span><br><span class="line">    shzd_targit_file=[<span class="string">'op_ccbdjsq1l'</span>,<span class="string">'op_hyccjsq1l'</span>,<span class="string">'op_jsmxjsq1l'</span>,<span class="string">'op_zqjsjsq1l'</span>]</span><br><span class="line">    sett_file(shzd_targit_file,insett_file,insett_path,<span class="string">'SH'</span>)</span><br><span class="line">    szzd_targit_file=[<span class="string">'SQ_HYCB'</span>,<span class="string">'SQ_HYCC'</span>,<span class="string">'SQ_JSMX'</span>]</span><br><span class="line">    sett_file(szzd_targit_file, insett_file, insett_path, <span class="string">'SZ'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'任务执行成功，如果有问题，请查看中转目录下的日志文件。'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'中转目录为：%s'</span>.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'gbk'</span>) % insett_path+<span class="string">'\mid'</span></span><br><span class="line">    input()</span><br></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块使用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python环境迁移</title>
      <link href="/2017/02/10/python%E7%8E%AF%E5%A2%83%E8%BF%81%E7%A7%BB/"/>
      <content type="html"><![CDATA[<p><strong> python环境迁移：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>有时候网络不给力,很多依赖包通过pip下载太慢了,可以通过已有的环境导出再导入新环境.</p><p>现有环境导出</p><p>pip freeze &gt; requestments.txt    # 编辑此文件对需要的包进行删减<br>pip install -d pgk/ -r requestments.txt<br>导出需要的包</p><p>导入新环境</p><p>首先将刚才导出的包传到新环境,然后执行</p><p>pip install *</p><p>总结</p><p>关键是pip install -d 当然网络良好可以通过pip install -r requestments.txt</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用anaconda命令大全</title>
      <link href="/2017/02/06/%E5%B8%B8%E7%94%A8anaconda%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <content type="html"><![CDATA[<p><strong> 常用anaconda命令大全：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><ol><li><p>使用conda<br>首先我们将要确认你已经安装好了conda</p></li><li><p>配置环境<br>下一步我们将通过创建几个环境来展示conda的环境管理功能。使你更加轻松的了解关于环境的一切。我们将学习如何确认你在哪个环境中，以及如何做复制一个环境作为备份。</p></li><li><p>测试python<br>然后我们将检查哪一个版本的python可以被安装，以及安装另一个版本的python，还有在两个版本的python之间的切换。</p></li><li><p>检查包<br>1)我们将罗列出安装在我们电脑上的包</p><p>2)浏览可用的包</p><p>3)使用conda install命令来来安装以及移除一些包</p><p>4)对于一些不能使用conda安装的包，我们将在Anaconda.org网站上搜索</p><p>5)对于那些在其它位置的包，我们将使用pip命令来实现安装。我们还会安装一个可以免费试用30天的商业包IOPro</p></li><li><p>移除包、环境以及conda</p></li></ol><h1 id="管理conda："><a href="#管理conda：" class="headerlink" title="管理conda："></a>管理conda：</h1><h2 id="检查conda版本"><a href="#检查conda版本" class="headerlink" title="检查conda版本:"></a>检查conda版本:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><h2 id="升级当前版本的conda"><a href="#升级当前版本的conda" class="headerlink" title="升级当前版本的conda"></a>升级当前版本的conda</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure><h1 id="管理环境"><a href="#管理环境" class="headerlink" title="管理环境"></a>管理环境</h1><h2 id="创建并激活一个环境"><a href="#创建并激活一个环境" class="headerlink" title="创建并激活一个环境"></a>创建并激活一个环境</h2><p>使用”conda create”命令，后边跟上你希望用来称呼它的任何名字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name snowflake biopython</span><br></pre></td></tr></table></figure><h2 id="激活这个新环境"><a href="#激活这个新环境" class="headerlink" title="激活这个新环境"></a>激活这个新环境</h2><ul><li><p>Linux，OS X:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate snowflakes</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>Windows：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate snowflake</span><br></pre></td></tr></table></figure><h3 id="小技巧："><a href="#小技巧：" class="headerlink" title="小技巧："></a>小技巧：</h3><p>新的开发环境会被默认安装在你conda目录下的envs文件目录下。你可以指定一个其他的路径；去通过<br><code>conda create -h</code>了解更多信息吧。</p><h2 id="列出所有的环境"><a href="#列出所有的环境" class="headerlink" title="列出所有的环境"></a>列出所有的环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info -envis或者(-e)</span><br></pre></td></tr></table></figure><p><strong> 注意：conda有时也会在目前活动的环境前边加上*号。</strong></p><h2 id="切换到另一个环境-activate-deactivate"><a href="#切换到另一个环境-activate-deactivate" class="headerlink" title="切换到另一个环境(activate/deactivate)"></a>切换到另一个环境(activate/deactivate)</h2><p>为了切换到另一个环境，键入下列命令以及所需环境的名字。</p><ul><li><p>Linux，OS X:</p><p>​</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate snowflakes</span><br></pre></td></tr></table></figure><ul><li><p>Windows：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate snowflakes</span><br></pre></td></tr></table></figure><p>如果要从你当前工作环境的路径切换到系统根目录时，键入： </p><ul><li><p>Linux，OS X:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source deactivate</span><br></pre></td></tr></table></figure><ul><li>Windows:</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><h2 id="复制一个环境"><a href="#复制一个环境" class="headerlink" title="复制一个环境"></a>复制一个环境</h2><p>通过克隆来复制一个环境。这儿将通过克隆snowfllakes来创建一个称为flowers的副本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n flowers --clone snowflakes</span><br></pre></td></tr></table></figure><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info –-envs1</span><br></pre></td></tr></table></figure><p>来检查环境</p><hr><h2 id="删除一个环境"><a href="#删除一个环境" class="headerlink" title="删除一个环境"></a>删除一个环境</h2><p>如果你不想要这个名为flowers的环境，就按照如下方法移除该环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n flowers</span><br></pre></td></tr></table></figure><h1 id="管理Python"><a href="#管理Python" class="headerlink" title="管理Python"></a>管理Python</h1><h2 id="安装一个不同版本的python"><a href="#安装一个不同版本的python" class="headerlink" title="安装一个不同版本的python"></a>安装一个不同版本的python</h2><p>现在我们假设你需要python3来编译程序，但是你不想覆盖掉你的python2.7来升级，你可以创建并激活一个名为snakes的环境，并通过下面的命令来安装最新版本的python3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n snakes python=31</span><br></pre></td></tr></table></figure><hr><h2 id="检查新的环境中的python版本"><a href="#检查新的环境中的python版本" class="headerlink" title="检查新的环境中的python版本"></a>检查新的环境中的python版本</h2><p>确保snakes环境中运行的是python3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version1</span><br></pre></td></tr></table></figure><hr><h2 id="使用不同版本的python"><a href="#使用不同版本的python" class="headerlink" title="使用不同版本的python"></a>使用不同版本的python</h2><p>为了使用不同版本的python，你可以切换环境，通过简单的激活它就可以，让我们看看如何返回默认版本</p><ul><li>Linux，OS X:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate - snowflakes1</span><br></pre></td></tr></table></figure><ul><li>Windows：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate snowflakes1</span><br></pre></td></tr></table></figure><hr><h2 id="注销该环境"><a href="#注销该环境" class="headerlink" title="注销该环境"></a>注销该环境</h2><p>当你完成了在snowflakes环境中的工作室，注销掉该环境并转换你的路径到先前的状态：</p><ul><li>Linux，OS X：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source deactivate1</span><br></pre></td></tr></table></figure><ul><li>Windows：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate1</span><br></pre></td></tr></table></figure><hr><h1 id="管理包"><a href="#管理包" class="headerlink" title="管理包"></a>管理包</h1><ul><li>conda安装和管理python包非常方便，可以在指定的python环境中安装包，且自动安装所需要的依赖包，避免了很多拓展包冲突兼容问题。</li><li>不建议使用easy_install安装包。大部分包都可以使用conda安装，无法使用conda和anaconda.org安装的包可以通过pip命令安装</li><li>使用合适的源可以提升安装的速度</li></ul><hr><h2 id="查看已安装包"><a href="#查看已安装包" class="headerlink" title="查看已安装包"></a>查看已安装包</h2><p>使用这条命令来查看哪个版本的python或其他程序安装在了该环境中，或者确保某些包已经被安装了或被删除了。在你的终端窗口中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list1</span><br></pre></td></tr></table></figure><hr><h2 id="向指定环境中安装包"><a href="#向指定环境中安装包" class="headerlink" title="向指定环境中安装包"></a>向指定环境中安装包</h2><h3 id="使用Conda命令安装包"><a href="#使用Conda命令安装包" class="headerlink" title="使用Conda命令安装包"></a>使用Conda命令安装包</h3><p>我们将在指定环境中安装这个Beautiful Soup包，有两种方式:<br>- 直接指定-n 指定安装环境的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --name bunnies beautifulsoup41</span><br></pre></td></tr></table></figure><p><strong> 提示：你必须告诉conda你要安装环境的名字（-n bunies）否则它将会被安装到当前环境中。\</strong></p><ul><li>激活bunnies环境，再使用conda install命令。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">activate bunnies</span><br><span class="line">conda install beautifulsoup412</span><br></pre></td></tr></table></figure><h3 id="2-从Anaconda-org安装一个包"><a href="#2-从Anaconda-org安装一个包" class="headerlink" title="2.从Anaconda.org安装一个包"></a>2.从Anaconda.org安装一个包</h3><p>如果一个包不能使用conda安装，我们接下来将在Anaconda.org网站查找。</p><p>在浏览器中，去 <a href="http://anaconda.org/" target="_blank" rel="noopener">Anaconda资源官网</a> 。我们查找一个叫“bottleneck”的包，所以在左上角的叫“Search Anaconda Cloud”搜索框中输入“bottleneck”并点击search按钮。</p><p>Anaconda.org上会有超过一打的bottleneck包的版本可用，但是我们想要那个被下载最频繁的版本。所以你可以通过下载量来排序，通过点击Download栏。<br>点击包的名字来选择最常被下载的包。它会链接到Anaconda.org详情页显示下载的具体命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install--channel https：//conda .anaconda.ort/pandas bottleneck1</span><br></pre></td></tr></table></figure><h3 id="3-通过pip命令来安装包"><a href="#3-通过pip命令来安装包" class="headerlink" title="3. 通过pip命令来安装包"></a>3. 通过pip命令来安装包</h3><p>对于那些无法通过conda安装或者从Anaconda.org获得的包，我们通常可以用pip命令来安装包。</p><p>可以上pypi网<br>站查询要安装的包，查好以后输入pip install命令就可以安装这个包了。</p><p>我们激活想要放置程序的python环境，然后通过pip安装一个叫“See”的程序。</p><ul><li>Linux，OS X：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate bunnies1</span><br></pre></td></tr></table></figure><ul><li>Windows：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate bunnies1</span><br></pre></td></tr></table></figure><p>所有平台：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install see1</span><br></pre></td></tr></table></figure><h3 id="提示：pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包。"><a href="#提示：pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包。" class="headerlink" title="提示：pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包。"></a>提示：pip只是一个包管理器，所以它不能为你管理环境。pip甚至不能升级python，因为它不像conda一样把python当做包来处理。但是它可以安装一些conda安装不了的包。</h3><h3 id="4-文件安装"><a href="#4-文件安装" class="headerlink" title="4. 文件安装"></a>4. 文件安装</h3><p>如果真的遇到走投无路的境地，也就是上面这些方法通通不管用！！！那就只能下载源码安装了，比如exe文件（双击安装）或者whl文件（pip安装）等等。还有在github上找到源码，使用<code>python setup.py install</code>命令安装</p><p>Tips:不建议使用setuptools 的easy_install，非常不方便管理，也不好卸载<br>有些时候，Anaconda和pip下载的速度慢，访问不稳定怎么办？换个源呗，<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学的源</a>就很不错，当然啦，你可以自己google一些好用的源</p><p>对于包管理工具，了解这么多就够了，比较喜欢追根究底的童鞋可以移步<a href="http://zengrong.net/post/2169.htm" target="_blank" rel="noopener">包管理工具解惑</a><br><strong>提示：<br>在任何时候你可以通过在命令后边跟上-help来获得该命令的完整文档。 </strong></p><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update --help1</span><br></pre></td></tr></table></figure><p><strong> 小技巧：\</strong><br>很多跟在–后边常用的命令选项，可以被略写为一个短线加命令首字母。所以–name选项和-n的作用是一样的。通过<code>conda -h</code>或<code>conda –-help</code>来看大量的缩写。</p><h1 id="移除包、环境、或者conda"><a href="#移除包、环境、或者conda" class="headerlink" title="移除包、环境、或者conda"></a>移除包、环境、或者conda</h1><p>如果你愿意的话。让我们通过移除一个或多个试验包、环境以及conda来结束这次测试指导。</p><h2 id="移除包"><a href="#移除包" class="headerlink" title="移除包"></a>移除包</h2><p>假设你决定不再使用商业包IOPro。你可以在bunnies环境中移除它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n bunnies iopro1</span><br></pre></td></tr></table></figure><h2 id="移除环境"><a href="#移除环境" class="headerlink" title="移除环境"></a>移除环境</h2><p>我们不再需要snakes环境了，所以输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n snakes --all1</span><br></pre></td></tr></table></figure><h2 id="删除conda"><a href="#删除conda" class="headerlink" title="删除conda"></a>删除conda</h2><ul><li>Linux，OS X：</li></ul><p>移除Anaconda 或 Miniconda 安装文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/miniconda 1</span><br></pre></td></tr></table></figure><p>OR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/anaconda1</span><br></pre></td></tr></table></figure><ul><li>Windows：</li></ul><p>去控制面板，点击“添加或删除程序”，选择“Python2.7（Anaconda）”或“Python2.7（Miniconda）”并点击删除程序。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><p><a href="http://conda.pydata.org/docs/test-drive.html" target="_blank" rel="noopener">30分钟Anaconda快速入门英文版</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">Anaconda清华大学镜像源</a></p></the>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos操作系统常用log日志</title>
      <link href="/2017/02/04/Centos%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8log%E6%97%A5%E5%BF%97/"/>
      <content type="html"><![CDATA[<p><strong> Centos操作系统常用log日志：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>因为经常会分析日志,每次都百度很麻烦总结出来大家.</p><p>分析日志常用工具大家可以百度找一下.</p><p>常见的Linux操作系统登录文件有如下几个：</p><p>1）/var/log/secure：记录登录系统存取数据的文件;</p><p>例如pop3，ssh，telnet，ftp等都会记录在此.</p><p>2）/ar/log/wtmp：记录登录这的信息记录，被编码过，所以必须以last解析;</p><p>3）/var/log/message:jihu所有的开机系统发生的错误都会在此记录;</p><p>4）/var/log.boot.log：记录一些开机或者关机启动的一些服务显示的启动或者关闭的信息;</p><p>5）/var/log/maillog：记录邮件的存取和往来;</p><p>6）/var/log/cron：用来记录crontab这个服务的内容;</p><p>7）/var/log/httpd，/var/log/mysqld.log等等文件，记录几个不同的网络服务的记录文件;</p><p>8)/var/log/acpid ,   ACPI - Advanced Configuration andPower Interface，表示高级配置和电源管理接口。 </p><p>后面的 d 表示 deamon 。 acpid 也就是 the ACPI event daemon 。 也就是 acpi的消息进程。用来控制、获取、管理 acpi 的状态的服务程序。</p><p>9)/var/run/utmp 记录着现在登录的用户;</p><p>10)/var/log/lastlog 记录每个用户最后的登录信息;</p><p>11)/var/log/btmp 记录错误的登录尝试;</p><p>12)/var/log/dmesg内核日志;</p><p>13)/var/log/cpus CPU的处理信息；</p><p>14）/var/log/syslog 事件记录监控程序日志；</p><p>15）/var/log/auth.log 用户认证日志；</p><p>16）/var/log/daemon.log 系统进程日志；</p><p>17）/var/log/mail.err 邮件错误信息；</p><p>18）/var/log/mail.info 邮件信息；</p><p>19）/var/log/mail.warn 邮件警告信息；</p><p>20)/var/log/daemon.log 系统监控程序产生的信息;</p><p>21)/var/log/kern 内核产生的信息;</p><p>22)/var/log/lpr   行打印机假脱机系统产生的信息;</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统日志 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>查看shell</title>
      <link href="/2017/02/04/%E6%9F%A5%E7%9C%8Bshell/"/>
      <content type="html"><![CDATA[<p><strong> 查看shell：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>不带参数的ps命令显示和当前终端有关的进程状况</p><p>$$变量存储当前进程的PID</p><p>ps第四列是进程所使用的命令，如果是Shell，那么显示shell名，比如sh/ksh等</p><p>awk ‘{print $4}’就是只显示第四列的值</p><p>PS：用echo $SHELL可以查看系统默认的shell</p><p>查看当前发行版可以使用的shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shell</span><br></pre></td></tr></table></figure><p>/bin/sh</p><p>/bin/bash</p><p>/sbin/nologin</p><p>查看当前使用的shell</p><p>一、最常用的查看shell的命令，但不能实时反映当前shell</p><p>[jack@localhost~]$ echo $SHELL</p><p>/bin/bash</p><p>二、下面这个用法并不是所有shell都支持</p><p>[jack@localhost~]$ echo $0</p><p>bash</p><p>三、环境变量中shell的匹配查找</p><p>[jack@localhost~]$ env | grep SHELL</p><p>SHELL=/bin/bash</p><p>四、口令文件中shell的匹配查找</p><p>[jack@localhost~]$ cat /etc/passwd | grep jack</p><p>jack:x:500:500:mengfei:/home/jack:/bin/bash</p><p>五、查看当前进程</p><p>[jack@localhost~]$ ps</p><p>PIDTTY          TIME CMD</p><p>3052pts/0    00:00:00 bash</p><p>3254pts/0    00:00:00 ps</p><p>六、先查看当前shell的pid，再定位到此shell进程</p><p>[jack@localhost~]$ echo $$</p><p>3052</p><p>[jack@localhost~]$ ps -ef | grep 3052</p><p>jack       3052 3047 0 11:33 pts/0    00:00:00 bash</p><p>jack       3420 3052 0 11:57 pts/0    00:00:00 ps -ef</p><p>jack       3421 3052 0 11:57 pts/0    00:00:00 grep 3052</p><p>附：一条命令即可实现：</p><p>[jack@localhost~]$ ps -ef | grep <code>echo $$</code> | grep -v grep | grep -v ps</p><p>jack       3052 3047 0 11:33 pts/0    00:00:00 bash</p><p>七、输入一条不存的命令，查看出错的shell提示</p><p>[jack@localhost~]$ tom</p><p>bash: tom:command not found</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>各种bin目录的区别</title>
      <link href="/2017/02/02/%E5%90%84%E7%A7%8Dbin%E7%9B%AE%E5%BD%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <content type="html"><![CDATA[<p><strong> 各种bin目录的区别：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>/bin,/sbin,/usr/sbin,/usr/bin 目录</p><p>​    这些目录都是存放命令的，首先区别下/sbin和/bin：</p><p>​    从命令功能来看，/sbin 下的命令属于基本的系统命令，如shutdown，reboot，用于启动系统，修复系统，/bin下存放一些普通的基本命令，如ls,chmod等，这些命令在Linux系统里的配置文件脚本里经常用到。</p><p>​    从用户权限的角度看，/sbin目录下的命令通常只有管理员才可以运行，/bin下的命令管理员和一般的用户都可以使用。</p><p>​    从可运行时间角度看，/sbin,/bin能够在挂载其他文件系统前就可以使用。</p><p>   而/usr/bin,/usr/sbin与/sbin /bin目录的区别在于：</p><p>   /bin,/sbin目录是在系统启动后挂载到根文件系统中的，所以/sbin,/bin目录必须和根文件系统在同一分区；</p><p>   /usr/bin,usr/sbin可以和根文件系统不在一个分区。</p><p>   /usr/sbin存放的一些非必须的系统命令；/usr/bin存放一些用户命令，如led(控制LED灯的)。</p><p>​    转下一位网友的解读，个人认为诠释得很到位：</p><p>   /bin是系统的一些指令。bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等。</p><p>   /sbin一般是指超级用户指令。主要放置一些系统管理的必备程式例如:cfdisk、dhcpcd、dump、e2fsck、fdisk、halt、ifconfig、ifup、 ifdown、init、insmod、lilo、lsmod、mke2fs、modprobe、quotacheck、reboot、rmmod、runlevel、shutdown等。</p><p>   /usr/bin是你在后期安装的一些软件的运行脚本。主要放置一些应用软体工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome<em>、 gzip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb</em>、wget等。</p><p>   /usr/sbin   放置一些用户安装的系统管理的必备程式例如:dhcpd、httpd、imap、in.*d、inetd、lpd、named、netconfig、nmbd、samba、sendmail、squid、swap、tcpd、tcpdump等。</p><p>​    如果新装的系统，运行一些很正常的诸如：shutdown，fdisk的命令时，悍然提示：bash:command not found。那么</p><p>​    首先就要考虑root的$PATH里是否已经包含了这些环境变量。</p><p>​    可以查看PATH，如果是：PATH=$PATH:$HOME/bin则需要添加成如下：</p><p>   PATH=$PATH:$HOME/bin:/sbin:/usr/bin:/usr/sbin</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bin目录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修改linux主机名</title>
      <link href="/2017/01/30/%E4%BF%AE%E6%94%B9linux%E4%B8%BB%E6%9C%BA%E5%90%8D/"/>
      <content type="html"><![CDATA[<p><strong> 修改linux主机名：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h3><p>CentOS7下修改主机名</p><p>第一种：hostname 主机名</p><p>01.hostname主机名称 </p><p>这种方式，只能修改临时的主机名，当重启机器后，主机名称又变回来了。</p><p>第二种：hostnamectlset-hostname <hostname></hostname></p><p>命令行中输入</p><p>01.hostnamectlset-hostname &lt;主机名&gt; </p><p>使用这种方式修改，可以永久性的修改主机名称！</p><p>来自 &lt;<a href="http://www.cnblogs.com/kluan/p/4458277.html" target="_blank" rel="noopener">http://www.cnblogs.com/kluan/p/4458277.html</a>&gt; </p><h3 id="Centos6-5"><a href="#Centos6-5" class="headerlink" title="Centos6.5"></a>Centos6.5</h3><p>vi /etc/sysconfig/network HOSTNAME=master #修改localhost.localdomain为master</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 修改主机名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql新安装之后密码处理</title>
      <link href="/2017/01/28/mysql%E6%96%B0%E5%AE%89%E8%A3%85%E4%B9%8B%E5%90%8E%E5%AF%86%E7%A0%81%E5%A4%84%E7%90%86/"/>
      <content type="html"><![CDATA[<p><strong> mysql新安装之后密码处理：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>首次安装成功mysql-server和mysql-client之后，登录需要密码，但是没有提示输入密码，应为密码是一个随机数字被产生在/root/.mysql_secret中，cat即可</p><p>用随机密码登录后，修改root密码</p><h3 id="方法1：-用SET-PASSWORD命令"><a href="#方法1：-用SET-PASSWORD命令" class="headerlink" title="方法1： 用SET PASSWORD命令"></a>方法1： 用SET PASSWORD命令</h3><p>首先登录<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">MySQL</a>。  </p><p>格式：mysql&gt;set password for 用户名@localhost = password(‘新密码’);  </p><p>例子：mysql&gt;set password for root@localhost = password(‘123’);  </p><h3 id="方法2：用mysqladmin"><a href="#方法2：用mysqladmin" class="headerlink" title="方法2：用mysqladmin"></a>方法2：用mysqladmin</h3><p>格式：mysqladmin-u用户名 -p旧密码 password 新密码  </p><p>例子：mysqladmin-uroot -p123456 password 123 </p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux常用系统运维命令</title>
      <link href="/2017/01/25/linux%E5%B8%B8%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4%E5%91%BD%E4%BB%A4/"/>
      <content type="html"><![CDATA[<p><strong> linux常用系统运维命令：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>系统 </p><p>#uname -a # 查看内核/操作系统/CPU信息 </p><p>#head -n 1 /etc/issue # 查看操作系统版本 </p><p>#cat /proc/cpuinfo # 查看CPU信息 </p><p>#hostname # 查看计算机名 </p><p>#lspci -tv # 列出所有PCI设备 </p><p>#lsusb -tv # 列出所有USB设备 </p><p>#lsmod # 列出加载的内核模块 </p><p>#env # 查看环境变量 </p><p>资源 </p><p>#free -m # 查看内存使用量和交换区使用量 </p><p>#df -h # 查看各分区使用情况 </p><p>#du -sh # 查看指定目录的大小 </p><p>#grep MemTotal /proc/meminfo # 查看内存总量 </p><p>#grep MemFree /proc/meminfo # 查看空闲内存量 </p><p>#uptime # 查看系统运行时间、用户数、负载 </p><p>#cat /proc/loadavg # 查看系统负载 </p><p>磁盘和分区 </p><p>#mount | column -t # 查看挂接的分区状态 </p><p>#fdisk -l # 查看所有分区 </p><p>#swapon -s # 查看所有交换分区 </p><p>#hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) </p><p>#dmesg | grep IDE # 查看启动时IDE设备检测状况 </p><p>网络 </p><p>#ifconfig # 查看所有网络接口的属性 </p><p>#iptables -L # 查看防火墙设置 </p><p>#route -n # 查看路由表 </p><p>#netstat -lntp # 查看所有监听端口 </p><p>#netstat -antp # 查看所有已经建立的连接 </p><p>#netstat -s # 查看网络统计信息 </p><p>进程 </p><p>#ps -ef # 查看所有进程 </p><p>#top # 实时显示进程状态 </p><p>用户 </p><p>#w # 查看活动用户 </p><p>#id # 查看指定用户信息 </p><p>#last # 查看用户登录日志 </p><p>#cut -d: -f1 /etc/passwd # 查看系统所有用户 </p><p>#cut -d: -f1 /etc/group # 查看系统所有组 </p><p>#crontab -l # 查看当前用户的计划任务 </p><p>服务 </p><p>#chkconfig -list # 列出所有系统服务 </p><p>#chkconfig -list | grep on # 列出所有启动的系统服务 </p><p>程序 </p><p>#rpm -qa # 查看所有安装的软件包</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7常用命令大全</title>
      <link href="/2017/01/24/Centos7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <content type="html"><![CDATA[<p><strong> Centos7常用命令大全：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>一：使用CentOS常用命令查看cpu </p><p>more/proc/cpuinfo | grep “model name” </p><p>grep”model name” /proc/cpuinfo </p><p>[root@localhost/]# grep “CPU” /proc/cpuinfo </p><p>modelname : Intel(R) Pentium(R) Dual CPU E2180 @ 2.00GHz </p><p>modelname : Intel(R) Pentium(R) Dual CPU E2180 @ 2.00GHz </p><p>如果觉得需要看的更加舒服 </p><p>grep”model name” /proc/cpuinfo | cut -f2 -d: </p><p>二：使用CentOS常用命令查看内存 </p><p>grepMemTotal /proc/meminfo grep MemTotal /proc/meminfo | cut -f2 -d: free -m |grep”Mem” | awk ‘{print $2}’ </p><p>三：使用CentOS常用命令查看cpu是32位还是64位 </p><p>查看CPU位数(32or 64) </p><p>getconfLONG_BIT </p><p>四：使用CentOS常用命令查看当前linux的版本 </p><p>more/etc/redhat-release </p><p>cat/etc/redhat-release </p><p>五：使用CentOS常用命令查看内核版本 </p><p>uname-r </p><p>uname-a </p><p>六：使用CentOS常用命令查看当前时间 </p><p>date上面已经介绍如何同步时间了 </p><p>七：使用CentOS常用命令查看硬盘和分区 </p><p>df-h </p><p>fdisk-l </p><p>也可以查看分区 </p><p>du-sh </p><p>可以看到全部占用的空间 </p><p>du/etc -sh </p><p>可以看到这个目录的大小 </p><p>八：使用CentOS常用命令查看安装的软件包 </p><p>查看系统安装的时候装的软件包 </p><p>cat-n /root/install.log </p><p>more/root/install.log | wc -l </p><p>查看现在已经安装了那些软件包 </p><p>rpm-qa </p><p>rpm-qa | wc -l </p><p>yumlist installed | wc -l </p><p>不过很奇怪，我通过rpm，和yum这两种方式查询的安装软件包，数量并不一样。没有找到原因。 </p><p>九：使用CentOS常用命令查看键盘布局 </p><p>cat/etc/sysconfig/keyboard </p><p>cat/etc/sysconfig/keyboard | grep KEYTABLE | cut -f2 -d= </p><p>十：使用CentOS常用命令查看selinux情况 </p><p>sestatus </p><p>sestatus| cut -f2 -d: </p><p>cat/etc/sysconfig/selinux </p><p>十一：使用CentOS常用命令查看ip，mac地址 </p><p>在ifcfg-eth0文件里你可以看到mac，网关等信息。 ifconfig cat /etc/sysconfig/network-scripts/ifcfg-eth0 |grep IPADDR cat /etc/sysconfig/network-scripts/ifcfg-eth0 | grep IPADDR | cut-f2 -d= ifconfig eth0 |grep “inet addr:” |awk ‘{print $2}’|cut -c 6-ifconfig | grep ‘inet addr:’| grep -v ‘127.0.0.1’ | cut -d: -f2 | awk ‘{ print$1}’ 查看网关 cat /etc/sysconfig/network 查看dns cat /etc/resolv.conf十二：使用CentOS常用命令查看默认语言 </p><p>echo$LANG $LANGUAGE </p><p>cat/etc/sysconfig/i18n </p><p>十二：使用CentOS常用命令查看所属时区和是否使用UTC时间 </p><p>cat/etc/sysconfig/clock </p><p>十三：使用CentOS常用命令查看主机名 </p><p>hostname </p><p>cat/etc/sysconfig/network </p><p>修改主机名就是修改这个文件，同时最好也把host文件也修改。 </p><p>十四：使用CentOS常用命令查看开机运行时间 </p><p>uptime </p><p>09:44:45up 67 days, 23:32, … </p><p>看来刚才确实是网段的问题，我的机器还是67天前开机的。 </p><p>#系统资源使用情况 </p><p>vmstat1 -S m procs ———–memory———- —swap– —–io—- –system——-cpu—— r b swpd free buff cache si so bi bo in cs us sy id wa st 0 0 0233 199 778 0 0 4 25 1 1 3 0 96 0 0 0 0 0 233 199 778 0 0 0 0 1029 856 13 1 860 0 </p><p>十五：使用CentOS常用命令查看开机运行时间 </p><p>uptime </p><p>09:44:45up 67 days, 23:32, … </p><p>看来刚才确实是网段的问题，我的机器还是67天前开机的。 </p><p>#系统资源使用情况 </p><p>1.vmstat 1 -S m </p><p>2.procs ———–memory———- —swap– —–io—- –system——-cpu—— </p><p>\3. rb swpd free buff cache si so bi bo in cs us sy id wa st </p><p>\4. 00 0 233 199 778 0 0 4 25 1 1 3 0 96 0 0 </p><p>\5. 00 0 233 199 778 0 0 0 0 1029 856 13 1 86 0 0 </p><ol><li>​</li></ol><p>对大家推荐很好使用的LinuxCentOS系统，像让大家对Linux CentOS系统有所了解，然后对Linux CentOS系统全面讲解介绍，希望对大家有用LinuxCentOS常用的命令. </p><p>wget$wget -r -np -nd <a href="http://example.com/packages/" target="_blank" rel="noopener">http://example.com/packages/</a> 这条命令可以下载 <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a> 网站上 packages 目录中的所有文件。Linux CentOS其中，-np 的作用是不遍历父目录，-nd表示不在本机重新创建目录结构。 </p><p>$wget -r -np -nd –accept=iso <a href="http://example.com/centos-5/i386/" target="_blank" rel="noopener">http://example.com/centos-5/i386/</a>与上一条命令相似，Linux CentOS但多加了一个 –accept=iso 选项，这指示 wget 仅下载 i386 目录中所有扩展名为 iso的文件。你也可以指定多个扩展名，Linux CentOS只需用逗号分隔即可。 </p><p>$wget -i filename.txt 此命令常用于批量下载的情形，Linux CentOS把所有需要下载文件的地址放到 filename.txt 中，然后wget 就会自动为你下载所有文件了。 Linux CentOS$ wget -c <a href="http://example.com/really-big-file.iso" target="_blank" rel="noopener">http://example.com/really-big-file.iso</a> 这里所指定的 -c 选项的作用为断点续传。 </p><p>$wget -m -k (-H) <a href="http://www.example.com/" target="_blank" rel="noopener">http://www.example.com/</a> 该命令可用来镜像一个网站，wget 将对链接进行转换。Linux CentOS如果网站中的图像是放在另外的站点，那么可以使用 -H选项。 </p><p>VI 编辑命令命令模式 </p><p>移动光标 </p><p>[Ctrl] + [f] → 屏幕『向下』移动一页，相当于 [Page Down]按键 </p><p>[Ctrl] + [b] → 屏幕『向上』移动一页，相当于 [Page Up] 按键 </p><p>n<space> → n 表示『数字』。按下数字后再按空白鍵，光标会向右移动这一行的 n 个字元 </space></p><p>0 → 数字『 0 』：移动到这一行的最前面字元处 </p><p>$ → 移动到这一行的最后面字元处 </p><p>G → 移动到这个文件的最后一行 </p><p>nG → n 为数字。移动到这个文件的第 n 行(可配合 :set nu) </p><p>gg → 移动到这个文件的第一行，相当于1G </p><p>n<enter> → n 为数字。光标向下移动 n 行 </enter></p><p>Linux CentOS查找与替换 </p><p>n → 『重复前一个查找的动作』 </p><p>N → 与 n 刚好相反，为『反向』进行前一个查找动作 </p><p>:n1,n2s/word1/word2/g → n1 与 n2 均为数字。在第 n1 与 n2 行之间查找 word1 字符串，并将该字符串替换为 word2。 </p><p>如：在1 到 9 行之间查找 eric4ever 并替换为 ERIC4EVER 则：『:1,9s/eric4ever/ERIC4EVER/g』 </p><p>:1,$s/word1/word2/g → 从第一行到最后一行查找 word1 字符串，并将该字符串替换为 word2 </p><p>:1,$s/word1/word2/gc → 从第一行到最后一行查找 word1 字符串，并将该字符窗替换为 word2，替换前显示提示对话框是否确认替换 </p><p>Linux CentOS删除、复制与粘贴 </p><p>x, X → 在一行字当中，x 为向后刪除一个字元 (相当于 [del] 按键)， </p><p>X为向前刪除一个字元(相当于 [backspace] 按键) </p><p>dd → 刪除光标所在的那一整行 </p><p>ndd → n 为数字。刪除光标所在的向下 n 列 </p><p>yy → 复制光标所在的那一行 </p><p>nyy → n 为数字。复制光标所在的向下 n 列 </p><p>p, P → p 为将已复制的内容粘贴在光标下一行上，P 则为粘贴在光标的上一行 </p><p>u → 还原前一个动作 </p><p>[Ctrl]+r → 重做上一个动作 </p><p>. → 小数点，意思是重复前一个动作 </p><p>Linux CentOS编辑模式i, I → 插入：在目前的光标所在处插入输入的文字，已存在的文字会向后退； 其中， i 为『从目前光标所在处插入』， I 为『在目前所在行的第一個非空白字元处开始插入』a, A →a 为『从目前光标所在的下一个字元处开始插入』， A 为『从光标所在行的最后一个字元处开始插入』 </p><p>o, O → o 为『在目前光标所在的下一行处插入新的一行』， O 为『在目前光标所在处的上一行插入新的一行』 </p><p>r, R → r 为『取代光标所在的那一个字元』，R 为『一直取代光标所在的文字，直到按下 ESC 为止』 </p><p>Esc → 退出编辑模式，回到一般模式中 </p><p>LinuxCentOS末行指令模式 </p><p>:w → 将编辑的文件写入到硬盘上 </p><p>:q → 退出 vi </p><p>:set nu → 显示行号 </p><p>:set nonu → 取消显示行号 </p><p>LinuxCentOSvim 块操作 </p><p>Ctrl+v进入视图模式 </p><p><esc>退出视图模式 </esc></p><p>在Ctrl+v后: </p><p><dollar>+A在块的每行末尾添加 </dollar></p><p>I 插入 </p><p>y块抽取 </p><p>p块粘贴 </p><p>c 修改 </p><p>Linuxcentos已被广泛应用但是也在不断的更新，这里介绍Linux centos安装设置使用，帮助大家安装更新Linux centos系统手动配置Linuxcentos的IP地址 </p><p>今天在vmwareserver上装了个centos-4.7（免费的redhat,是小红帽的的克隆版本，跟小红帽的版本是对应的）,其中ip安装时没设好，一般Linuxcentos的网卡IP地址是存放在文件中的，这个配置文件在/etc/sysconfig/network-scripts下， </p><p>名称分别为ifcfg-eth0,ifcfg-eth1….如果你有一块网卡，就只有ifcfg-eth0一个文件，如果你有两块或者两块以上的网卡，就会有ifcfg-eth1、ifcfg-eth2等文件的出现。 </p><p>文件结构： </p><p>DEVICE=eth0//指出设备名称 </p><p>ONBOOT=yes//是否启动应用 </p><p>BOOTPROTO=static//启动类型 静态 （默认dhcp） </p><p>IPADDR=192.168.0.77//IP地址 </p><p>NETMASK=255.255.255.0//子网掩码 </p><p>GATEWAY=192.168.0.1//网关 </p><p>步骤： </p><p>1、vi/etc/sysconfig/network-scripts/ifcfg-teh0 （也可通过管理工具setup或netconfig命令设置） </p><p>2、重新启动网络服务servicenetwork restart </p><p>要想和主机连接：还需配置xp主机，在vmware上设置为host-only模式，xp里修改vmnet1的IP地址为192.168.0.1, 修改Linux centos IP为192.168.0.77 </p><p>共享上网设置：xp里修改第一块虚拟网卡的网络属性为共享internet(属性-&gt;高级-&gt;钩选“允许其他网络用户通过此计算机的Internet连接来连接”)会自动把vmnet1改为192.168.0.1,Linux centos就能上网了 </p><p>CentOSVsftpd配置经过长时间的发展，这里我发表一下个人理解，下面就这就来讲术CentOS Vsftpd配置。调整CentOS Vsftpd配置文件： </p><p>1.编辑CentOSVsftpd配置文件前先备份 </p><p>[root@KcentOS5~]cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.backup </p><p>2.编辑主CentOSVsftpd配置文件Vsftpd.conf </p><p>[root@KcentOS5~]vi /etc/vsftpd/vsftpd.conf </p><p>这里我将原CentOSVsftpd配置文件的修改完全记录，凡是修改的地方我都会保留注释原来的配置。其中加入我对每条配置项的认识，对于一些比较关键的配置项这里我做了我的观点，并且原本英语的说明我也不删除，供参考对比用。 </p><p>Exampleconfig file /etc/vsftpd/vsftpd.conf </p><p>Thedefault compiled in settings are fairly paranoid. This sample file </p><p>loosensthings up a bit, to make the ftp daemon more usable. </p><p>Pleasesee vsftpd.conf.5 for all compiled in defaults. </p><p>READTHIS: This example file is NOT an exhaustive list of vsftpd options. </p><p>Pleaseread the vsftpd.conf.5 manual page to get a full idea of vsftpd’s </p><p>capabilities. </p><p>Allowanonymous FTP? (Beware - allowed by default if you comment this out). </p><p>anonymous_enable=YES </p><p>anonymous_enable=NO </p><p>设定不允许匿名访问 </p><p>Uncommentthis to allow local users to log in. </p><p>local_enable=YES设定本地用户可以访问。注意：主要是为虚拟宿主用户，如果该项目设定为NO那么所有虚拟用户将无法访问。 </p><p>Uncommentthis to enable any form of FTP write command. </p><p>write_enable=YES </p><p>设定可以进行写操作。 </p><p>Defaultumask for local users is 077. You may wish to change this to 022, </p><p>ifyour users expect that (022 is used by most other ftpd’s) </p><p>local_umask=022 </p><p>设定上传后文件的权限掩码。 </p><p>Uncommentthis to allow the anonymous FTP user to upload files. This only </p><p>hasan effect if the above global write enable is activated. Also, you will </p><p>obviouslyneed to create a directory writable by the FTP user. </p><p>anon_upload_enable=YES </p><p>anon_upload_enable=NO </p><p>禁止匿名用户上传。 </p><p>Uncommentthis if you want the anonymous FTP user to be able to create </p><p>newdirectories. </p><p>anon_mkdir_write_enable=YES </p><p>anon_mkdir_write_enable=NO </p><p>禁止匿名用户建立目录。 </p><p>Activatedirectory messages - messages given to remote users when they </p><p>gointo a certain directory. </p><p>dirmessage_enable=YES </p><p>设定开启目录标语功能。 </p><p>Activatelogging of uploads/downloads. </p><p>xferlog_enable=YES </p><p>设定开启日志记录功能。 </p><p>Makesure PORT transfer connections originate from port 20 (ftp-data). </p><p>connect_from_port_20=YES </p><p>设定端口20进行数据连接。 </p><p>Ifyou want, you can arrange for uploaded anonymous files to be owned by </p><p>adifferent user. Note! Using “root” for uploaded files is not </p><p>recommended! </p><p>chown_uploads=YES </p><p>chown_uploads=NO </p><p>设定禁止上传文件更改宿主。 </p><p>chown_username=whoever </p><p>Youmay override where the log file goes if you like. The default is shown </p><p>below. </p><p>xferlog_file=/var/log/vsftpd.log </p><p>设定CentOSVsftpd配置的服务日志保存路径。注意，该文件默认不存在。必须要手动touch出来，并且由于这里更改了CentOSVsftpd配置的服务宿主用户为手动建立的Vsftpd。必须注意给与该用户对日志的写入权限，否则服务将启动失败。 </p><p>Ifyou want, you can have your log file in standard ftpd xferlog format </p><p>xferlog_std_format=YES </p><p>设定日志使用标准的记录格式。 </p><p>Youmay change the default value for timing out an idle session. </p><p>idle_session_timeout=600 </p><p>设定空闲连接超时时间，这里使用默认。将具体数值留给每个具体用户具体指定，当然如果不指定的话，还是使用这里的默认值600，单位秒。 </p><p>Youmay change the default value for timing out a data connection. </p><p>data_connection_timeout=120 </p><p>设定单次最大连续传输时间，这里使用默认。将具体数值留给每个具体用户具体指定，当然如果不指定的话，还是使用这里的默认值120，单位秒。 </p><p>Itis recommended that you define on your system a unique user which the </p><p>ftpserver can use as a totally isolated and unprivileged user. </p><p>nopriv_user=ftpsecure </p><p>nopriv_user=vsftpd </p><p>设定支撑CentOSVsftpd服务的宿主用户为手动建立的Vsftpd用户。注意，一旦做出更改宿主用户后，必须注意一起与该服务相关的读写文件的读写赋权问题。比如日志文件就必须给与该用户写入权限等。 </p><p>Enablethis and the server will recognise asynchronous ABOR requests. Not </p><p>recommendedfor security (the code is non-trivial). Not enabling it, </p><p>however,may confuse older FTP clients. </p><p>async_abor_enable=YES </p><p>设定支持异步传输功能。 </p><p>Bydefault the server will pretend to allow ASCII mode but in fact ignore </p><p>therequest. Turn on the below options to have the server actually do ASCII </p><p>manglingon files when in ASCII mode. </p><p>Bewarethat on some FTP servers, ASCII support allows a denial of service </p><p>attack(DoS) via the command “SIZE /big/file” in ASCII mode. vsftpd </p><p>predictedthis attack and has always been safe, reporting the size of the </p><p>rawfile. </p><p>ASCIImangling is a horrible feature of the protocol. </p><p>ascii_upload_enable=YES </p><p>ascii_download_enable=YES </p><p>设定支持ASCII模式的上传和下载功能。 </p><p>Youmay fully customise the login banner string: </p><p>ftpd_banner=ThisVsftp server supports virtual users ^_^ </p><p>设定CentOSVsftpd配置的登陆标语。 </p><p>Youmay specify a file of disallowed anonymous e-mail addresses. Apparently </p><p>usefulfor combatting certain DoS attacks. </p><p>deny_email_enable=YES </p><p>(defaultfollows) </p><p>banned_email_file=/etc/vsftpd/banned_emails </p><p>Youmay specify an explicit list of local users to chroot() to their home </p><p>directory.If chroot_local_user is YES, then this list becomes a list of </p><p>usersto NOT chroot(). </p><p>chroot_list_enable=YES </p><p>chroot_list_enable=NO </p><p>禁止用户登出自己的FTP主目录。 </p><p>(defaultfollows) </p><p>chroot_list_file=/etc/vsftpd/chroot_list </p><p>Youmay activate the “-R” option to the builtin ls. This is disabled by </p><p>defaultto avoid remote users being able to cause excessive I/O on large </p><p>sites.However, some broken FTP clients such as “ncftp” and”mirror” assume </p><p>thepresence of the “-R” option, so there is a strong case for enablingit. </p><p>ls_recurse_enable=YES </p><p>ls_recurse_enable=NO </p><p>禁止用户登陆FTP后使用”ls-R”的命令。该命令会对服务器性能造成巨大开销。如果该项被允许，那么挡多用户同时使用该命令时将会对该服 </p><p>务器造成威胁。 </p><p>When”listen” directive is enabled, vsftpd runs in standalone mode and </p><p>listenson IPv4 sockets. This directive cannot be used in conjunction </p><p>withthe listen_ipv6 directive. </p><p>listen=YES </p><p>设定该CentOSVsftpd服务工作在StandAlone模式下。顺便展开说明一下，所谓StandAlone模式就是该服务拥有自己的守护进程支持，在ps-A命令下我们将可用看到vsftpd的守护进程名。如果不想工作在StandAlone模式下，则可以选择SuperDaemon模式，在该模式下vsftpd将没有自己的守护进程，而是由超级守护进程Xinetd全权代理，与此同时，Vsftp服务的许多功能将得不到实现。 </p><p>Thisdirective enables listening on IPv6 sockets. To listen on IPv4 and IPv6 </p><p>sockets,you must run two copies of vsftpd whith two configuration files. </p><p>Makesure, that one of the listen options is commented !! </p><p>listen_ipv6=YES </p><p>pam_service_name=vsftpd </p><p>设定PAM服务下CentOSVsftpd配置验证文件名。因此，PAM验证将参考/etc/pam.d/下的vsftpd文件配置。 </p><p>userlist_enable=YES </p><p>设定userlist_file中的用户将不得使用FTP。 </p><p>tcp_wrappers=YES </p><p>设定支持TCPWrappers。 </p><p>KC:The following entries are added for supporting virtual ftp users. </p><p>以下这些是关于Vsftpd虚拟用户支持的重要CentOSVsftpd配置项目。默认Vsftpd.conf中不包含这些设定项目，需要自己手动添加配置。 </p><p>guest_enable=YES </p><p>设定启用虚拟用户功能。 </p><p>guest_username=overlord </p><p>指定虚拟用户的宿主用户。 </p><p>virtual_use_local_privs=YES </p><p>设定虚拟用户的权限符合他们的宿主用户。 </p><p>user_config_dir=/etc/vsftpd/vconf </p><p>设定虚拟用户个人Vsftp的配置文件存放路径。也就是说，这个被指定的目录里，将存放每个Vsftp虚拟用户个性的配置文件，一个需要注意的 </p><p>地方就是这些配置文件名必须和虚拟用户名相同。保存退出。 </p><p>3.建立CentOSVsftpd配置的日志文件，并更该属主为Vsftpd的服务宿主用户： </p><p>[root@KcentOS5~]touch /var/log/vsftpd.log </p><p>[root@KcentOS5~]chown vsftpd.vsftpd /var/log/vsftpd.log </p><p>4.建立虚拟用户CentOSVsftpd配置文件存放路径： </p><p>[root@KcentOS5~]mkdir /etc/vsftpd/vconf/ </p><p>CentOSvsftp已被广泛应用但是也在不断的更新，这里介绍CentOS vsftp安装设置使用，帮助大家安装更新CentOS vsftp系统。 </p><p>CentOSvsftp安装： </p><p>1.安装CentOSVsftpd服务相关部件： </p><p>[root@KcentOS5~]# yum install vsftpd* </p><p>2.确认安装PAM服务相关部件： </p><p>[root@KcentOS5~]# yum install pam* </p><p>开发包，其实不装也没有关系，主要的目的是确认PAM。 </p><p>3.安装DB4部件包： </p><p>这里要特别安装一个db4的包，用来支持文件数据库。 </p><p>[root@KcentOS5~]# yum install db4* </p><p>CentOSvsftp系统帐户 </p><p>1.建立CentOSvsftp服务的宿主用户： </p><p>[root@CentOS5/]#chmod 700 /home/vftpsite </p><p>[root@KcentOS5~]# useradd vsftpd -s /sbin/nologin </p><p>默认的Vsftpd的服务宿主用户是root，但是这不符合安全性的需要。这里建立名字为vsftpd的用户，用他来作为支持Vsftpd的服务宿主用户。由于该用户仅用来支持Vsftpd服务用，因此没有许可他登陆系统的必要，并设定他为不能登陆系统的用户。[root@CentOS5/]#useradd –d /home/vftpsite –s /sbin/nologin vftpuser </p><p>2.建立CentOSvsftp虚拟宿主用户： </p><p>[root@KcentOS5nowhere]# useradd overlord -s /sbin/nologin </p><p>本篇主要是介绍Vsftp的虚拟用户，虚拟用户并不是系统用户，也就是说这些FTP的用户在系统中是不存在的。他们的总体权限其实是集中寄托在一个在系统中的某一个用户身上的，所谓Vsftpd的虚拟宿主用户，就是这样一个支持着所有虚拟用户的宿主用户。由于他支撑了FTP的所有虚拟的用户，那么他本身的权限将会影响着这些虚拟的用户，因此，处于安全性的考虑，也要非分注意对该用户的权限的控制，该用户也绝对没有登陆系统的必要，这里也设定他为不能登陆系统的用户。 </p><p>（这里插一句：原本在建立上面两个用户的时候，想连用户主路径也不打算给的。本来想加上-d /home/nowhere 的，据man useradd手册上讲 </p><p>述：“-d, –home HOME_DIR </p><p>Thenew user will be created using HOME_DIR as the value for the </p><p>user鈙login directory. The default is to append the LOGIN name to </p><p>BASE_DIRand use that as the login directory name. The directory </p><p>HOME_DIRdoes not have to exist but will not be created if it is </p><p>missing. </p><p>使用-d参数指定用户的主目录，用户主目录并不是必须存在的。如果没有存在指定的目录的话，那么它将不会被建立”。结果我尝试-d /home/nowhere 指定到一个并不存在的目录的时候，我KAO！竟然给我自己新建了一个= =＃） </p><p>【原创】FTP服务时互联网上比较古老的一种应用，至今Interner应用面非常广泛，但令管理员头痛不已的是其用户管理，既多且杂，如何解决这一问题呢？使用MySQL与ProFTP或VsFTP软件结合可以搭建一个高效、稳定且集中管理的FTP服务器。本来就来介绍一下如何搭建一个方便管理的基于MySQL数据库的FTP服务器。 </p><p>一、软件版本的选择： </p><p>搭建基于数据库的FTP服务器首先要选择合适的软件。下面就是所选择软件的详细信息： </p><p>◆Linux版本RHEL5； </p><p>◆MySQL版本MySQL-standard-5.1.30-1.rhel5.src.rpm; </p><p>◆FTP服务器proftpd-1.3.2.tar.gz和vsftpd-2.2.1.tar.gz; </p><p>◆MySQL的PAM验证程序pam_mysql-0.8RC1.tar.gz; </p><p>需要说明的是，RHEL5安装时自定义安装，“developmenttools”项必须选择，否则编译调试软件时需要的软件包需另行安装；其次，要确保所安装Linux系统时没有安装MySQL与FTP服务器等软件，如果有则先卸载；再次，ProFTPD与VsFTPD两者不要在同台计算机同时使用，这样会造成意想不到的问题，读者根据自己的需求和软件的具体功能选择其中之一。 </p><p>建立程序安装目录 </p><p>整个安装过程以root用户执行如下命令： </p><p>#cd/soft/programe </p><p>#mkdirmysq </p><p>需要注意目录名称的大小写。 </p><p>#mkdirproftpd </p><p>#mkdirpam_mods </p><p>MySQL的安装目录为/soft/program/mysql,ProFTPD的安装目录为/soft/program/proftpd，pam_mysq1.so的安装目录为/soft/program/pam_mods，/storage是一个已经存在的目录，所有的FTP用户上传和下载文件都存放在这里。 </p><p>安装MySQL </p><p>◆增加一个管理MySQL的用户和组： </p><p>#groupaddmysqlgrp </p><p>#useradd-g mysqlgrp mysqladm </p><p>#passwdmysqladm </p><p>◆切换到MySQL-stan-dard-5.1.30-1.rhel5.src.rpm文件所在的目录，执行以下步骤安装： </p><p>#rpm-ivhMySQL-stan-dard-5.1.30-1.rhel5.src.rpm </p><p>此条命令解压出mysql-5.1.30.tar.gz文件存放在以下的目录中。 </p><p>#cd/usr/src/redhat/SOURCE </p><p>#tarzxvf mysqt-5.1.30.tar.gz </p><p>#cdmysql-5.1.30 </p><p>#./configurePrefix=/soft/program/mysql –with-extra-charsets=all </p><p>其中,“–prefix=/soft/program/mysql”参数是用来指定Mysql的安装目录，“–with-extra-charsets=all”是用来支持所有的字符集。 </p><p>#make </p><p>#makeinstall </p><p>◆初始化数据库 </p><p>#cd/soft/program/mysql/bin </p><p>#./mysql_install_db </p><p>◆为了安全要修改数据库存放目录的属主信息和访问模式/soft/program/mysqll/var为数据库存放的缺省目录 </p><p>#cd/soft/program/mysql </p><p>#chown–R mysqladm:mysqlgrp var </p><p>#chmod-R go-wrx var </p><p>◆修改配置文件 </p><p>#cd/soft/program/mysql/share/mysql </p><p>#cpmy-small.cnf /etc/my.cnf </p><p>#cd/etc </p><p>在my.cnf文件中，增加如下内容： </p><p>[mysql] </p><p>user=mysqladm#表示用mysqladm 用户启动MySQL# </p><p>default-character-set=utf8#表示使用UTF-8字符集，此种字符集通用性较好，也很好的支持中文，当然也可以直接使用GBK。 </p><p>[clent] </p><p>Default-character-set=utf8 </p><p>◆ 启动 </p><p>启动方式有两种，一种是手工启动，一种是自动启动，其中手工启动的操作如下： </p><p>#cd/soft/program/mysql/bin </p><p>#./mysqld_safe&amp; </p><p>自动启动则需要在/etc/rc.d/rc/local中加入以下的内容，开机自动启动MySQL数据库： </p><p>If[-x /soft/program/mysql/bin/mysqld_safe]; then </p><p>install_path_name/bin/mysqld_safe&amp; </p><p>fi </p><p>◆修改管理员密码 </p><p>使用如下命令修改数据库密码： </p><p>#cd/soft/program/mysql/bin </p><p>#./mysqladmin-h localhost -u root password ‘123456’ </p><p>上述命令的意思是本机上（-hhost）使用的管理数据库的缺省管理账号root。需要注意的事，此root并非Linux系统中的root用户，密码设置为123456. </p><p>安装ProFTPD </p><p>◆切换到proftpd-1.3.2.tar.gz文件所在的目录，执行以下步骤安装： </p><p>#tarzxvf proftpd-1.3.2.tar.gz </p><p>#cdproftpd-1.3.2 </p><p>#./configure–prefix=/soft/program/proftpd–with-modules=mod_sql:mod_sql_mysql:mod_quotatab:mod_quotatab_sql </p><p>此参数将支持MySQL和Quota模块添加进来。 </p><p>–with-includes=/soft/program/mysql/include/mysql </p><p>上述参数指定MySQL中include的目录路径。 </p><p>–with-libraries=/soft/program/mysql/lib/mysql </p><p>此参数指定MySQL中lib的目录路径。 </p><p>#make </p><p>#makeinstall </p><p>使用如下命令建立一个用于管理ProFTPD的Linux系统账号和组。 </p><p>#groupadd-g 2009 ftpgroup </p><p>#useradd-u 2009 –s /bin/false -d /storage -g ftpgroup ftpuser </p><p>#chown-R ftpuser.ftpgroup /storage </p><p>#chmod–R go-wrx- /storage </p><p>#chmod–R u+wrx /storage </p><p>简单修改ProFTPD配置文件，使之正常运行： </p><p>#cd/soft/program/proftpd/etc </p><p>用编辑器打开proftpd.conf,修改一下的内容： </p><p>#Setthe user and group under which the server will run. </p><p>Userftpuser </p><p>Groupftpgroup </p><p>◆启动ProFTPD </p><p>启动Proftpd同样有两种方法，即手工启动和自动启动，其中手工启动操作如下： </p><p>#cd/soft/program/proftpd/sbin/ </p><p>#./proftpd </p><p>此时一个基本的FTP服务器已经搭建成，可以进行测试了。需要注意的是，启动时如果出现具有以下信息的错误： </p><p>errorwhile loading shared libraries:libmysqlclient.so.15:cannot open shared object <a href="file:///\\No" target="_blank" rel="noopener">file:No</a> suchfile or directory </p><p>通常的解决办法如下： </p><p>#cd/etc </p><p>用文本工具打开ld.so.conf,添加以下的内容/soft/program/mysql/lib/mysql </p><p>#ldconflg </p><p>更新ld.socache file。 </p><p>要让ProFTPD自动启动在/etc/rc.d/rc.local中加入以下的内容，开机即可自启动ProFTPD: </p><p>/soft/program/proftpd/sbin/proftpd </p><p>二、MySQL与ProFTPD组合 </p><p>在MySQL中建立一个名为ftp的数据库，在该数据库中建立以下的四个表： </p><p>◆登录FTP服务器的用户表ftpusers，字段信息如下所示，这些字段是必需的，其他字段根据自己的需要添加，参考字段如下： </p><p>‘userid’text NOT NULL #用户登录账号# </p><p>‘passwd’text NOT NULL #用户登录密码# </p><p>‘uid’int(11)NOT NULL default ‘2009’, #与Linux系统账号ftpuser的UID号一致# </p><p>‘gid’int(11)NOT NULL default ‘2009’, #与Linux系统组# </p><p>ftpgroup的GID号一致’homedir’ text,用户文件上传下载目录，如账号名为abc,此处就填写/storage/abc，’shell’ textdefault ,’/sbin/nologin’这个是用来指定用户是否能登录Linux系统，这里默认的是不能登录。 </p><p>◆FTP用户归属表ftpgroups，字段信息如下所示，关于建立该组的目的将在quotalimits表中说明 </p><p>‘groupname’text NOT NULL #组名# </p><p>‘gid’smallint(6) NOT NULL default’0’,#组的id号# </p><p>‘memembers’text NOT NULL #成员# </p><p>◆用于设置磁盘限额相关信息的表quotalimits和quotatallies,这两个表的字段请不要改动，它是与ProFTPD的配置文件紧密联系，quotalimits表的字段信息如下： </p><p>‘name’varchar(30)default NULL, </p><p>‘quota_type’enum(‘user’,’group’,’class’,’all’)NOT NULL default ‘user’, </p><p>‘per_session’enum(‘false’,’true’)NOT NULL default’false’, </p><p>‘limit_type’enum(‘soft’,’hard’)NOT NULL default’soft’, </p><p>‘bytes_in_avail’floatNOT NULL default’0’, </p><p>‘bytes_out_avail’floatNOT NULL default’0’, </p><p>‘bytes_xfer_avail’floatNOT NULL default’0’, </p><p>‘files_in_avail’int(10)unsigned NOT NULL default’0’, </p><p>‘files_out_avail’int(10)unsignedNOT NULL default’0’, </p><p>‘files_xfer_avail’int(10)unsignedNOT NULL default’0’ </p><p>需要注意的是，name应该这样理解，既能表示单个用户，也能表示用户组名。如果在quota_type(限额类型)中使用group来认证的话，那就得在这里设置组名，这样整组都具有统一的磁盘限额的特性，当然要在ftpgroups表中插入组记录，并且在member字段中得把用户一个一个的列进去。默认值可以为空NULL。如果为空，则针对所在有quota_type中设置的类型，比如在quota_type中设置为user，就是针对所有ftpusers中的用户起作用，如果是group名，也是对ftpgroups所有组作用。quota_type磁盘限额类型，可以设置为用户，也可以设置为用户组group。如果name写的是用户组，这里就得设置为group来认定。默认为user认证。per_session默认为false.limit_type默认为soft。Bytes_in_avail用户占用空间大小，也就是FTP用户空间容量，单位是byte,默认为0，0是不受限制，以下同理。bytes_out_avail所有下载文件的总和，默认为0。 </p><p>bytes_xfer_avail一个用户上传下载流量总和，默认为0。files_in_avail限制上传文件总和，默认为0。files_out_avail限制下载文件个数总计，默认为0。files_xfer_avail允许下载和上传的文件总和，默认为0。Quotatallies表的字段信息，各字段信息参照quotalimits。配置参考参数如下： </p><p>nameVARCHAR(30)NOT NULL, </p><p>quota_typeENUM(“user”,”group”,”class”,”all”)NOTNULL, </p><p>bytes_in_usedFLOAT NOT NULL, </p><p>bytes_out_usedFLOAT NOT NULL, </p><p>bytes_xfer_usedFLOAT NOT NULL, </p><p>files_in_usedINT UNSIGNED NOT NULL, </p><p>files_out_usedINT UNSIGNED NOT NULL, </p><p>files_xfer_usedINT UNSIGNED NOT NULL </p><p>此外，在proftpd.conf文件中增加以下的内容： </p><p>◆数据库连接的信息，ftp是数据库名，localhost是主机名，root是连接数据库的用户名，123456是密码。 </p><p>root123456 </p><p>◆数据库认证的类型，Plaintext表示明文认证方式 </p><p>SQLAuthTYpesBackend Plaintext </p><p>◆指定用来做用户认证的表的有关信息 </p><p>SALUserlnfoftpusers userid passwd uid gid homedir shell </p><p>SQLGrouplnfoftpgroups groupname gid members </p><p>◆校验数据表 </p><p>SQLAuthenticateusers groups usersetfast groupsetfast </p><p>◆如果home目录不存在，则系统会根据ftpusers表中的home字段。 </p><p>新建一个目录： </p><p>SQLHomedirOnDemandon </p><p>◆打开磁盘限额引擎 </p><p>QuotaEngineon </p><p>◆设置磁盘限额 </p><p>QuotaDirectoryTallyon </p><p>◆设置磁盘容量显示时的单位 </p><p>QuotaDisplayUnitsMb </p><p>◆设置磁盘限额日志文件 </p><p>QuotaLog”/usr/local/proftpd/var/quota” </p><p>◆显示磁盘限额信息 </p><p>ftp登录后可执行quotesite quota命令查看当前磁盘使用情况： </p><p>QuotaShowQuotason </p><p>◆设置磁盘限额日志文件 </p><p>QuotaLog”/var/log/quota” </p><p>◆指定磁盘限额模块使用的数据库信息 </p><p>SQLNamedQuerget-quota-limit SELECT”name,quota_type,bytes_in_avail,bytes_out_avail,bytes_xfer_avail,files_in_avail,files_out_avail,files_xfer_availFROM quotalimits WHERE name=’%{0}’AND quota_type=’%{1}’” </p><p>SQLNamedQueryget-quota-tallySELECT”name,quota_type,bytes_in_used,bytes_out_used,bytes_xfer_used,files_in_used,files_out_used,filed_xfer_used,FROMquotatallies WHERE name=’%{0}’AND quota_type =’%{1}” </p><p>SQLNamedQueryupdate-quota-tally UPDATE”bytes_in_used=bytes_in_used+%{0},bytes_out_used=bytes_out_used+%{1},bytes_xfer_used=bytes_xfer_used+%{2},files_in_used=files_in_used+%{3},files_out_used=files_out_used+%{4},files_xfer_used=files_xfer_used+%{5} WHERE name=’%{6}’AND quota_type = ‘%{7}’”quotatallies </p><p>SQLNamedQueryinsert-quota-tallyINSERT”%{0},%{1},%{2},%{3},%{4},%{5},%{6},%{7}”quotatallies </p><p>QuotaLimitTablesql:/get-quota-limit </p><p>QuotaTallyTablesql:/get-quota-tally/update-quota-tally/insert-quota-tally </p><p>另外，读者还可以在proftpd.conf中添加一些有关超时、限制连接次数、加快连接速度、支持断点传输及安全传输等内容。 </p><p>anon_other_write_enable=YES </p><p>ascll_upload_enable=YES </p><p>ascll_download_enable=YES </p><p>VsFTPD配置文件中还可以进行更多的设置，如磁盘配额、虚拟用户个人目录的建立、性能与负载控制、FTP被动模式断口设置、安全设置等，读者根据自己的需要进一步的完善。 </p><p>◆编辑文件 </p><p>修改/etc/pam.d/ftp中去掉其他的内容，添加以下的内容： </p><p>#auth </p><p>authrequired/soft/program/pam_mods/pam_mysql.so </p><p>user=ftpuserpasswd=6789host=localhost db=ftp </p><p>table=ftpusersusercolumn=userid passwdcolumn=passwd crypt=0 </p><p>#account </p><p>Accountrequired/soft/program/pam_mods/pam_mysql.so </p><p>User=ftpuserpasswd=6789 host=localhost db=ftp table=ftpusers usercolumn=useridpasswdcolumn=passwd crypt=0 </p><p>涉及到的参数，只要对应前面数据库的设置就可以明白它们的含义。其中：crypt=0,口令以明文方式(不加密)保存在数据库中，crypt=1,口令使用Unix系统的DES加密方式加密后保存在数据库中；crypt=2,口令经过MySQL的password()函数加密后保存。FTP数据库中ftpusers表的授权用户ftpusers和密码必须正确设置。 </p><p>◆开机自启动VsFTPD </p><p>请将vsftpd-2.2.1/xinetd.d/vsftpd文件制到/etc/xinetd.d/中(如果该目录中没有该文件)。此外，还需设置vsftpd.conf中listen和Tcp_Wrappers参数，将其都设置为NO，最后，用ntsysv命令，选中Vsftpd守护进程即可。 </p><p>通过上面的知识，结合Apache、PHP等软件可以开发许多功能，如自动申请主页空间等，而且使用phpMyAdmin可以以Web方式管理MySQL,很容易的添加和删除用户，这样FTP用户管理就轻松多了。</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7关闭防火墙</title>
      <link href="/2017/01/22/Centos7%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <content type="html"><![CDATA[<p><strong> Centos7关闭防火墙：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>操作系统环境：<a href="http://www.linuxidc.com/topicnews.aspx?tid=14" target="_blank" rel="noopener">CentOS</a> Linux release 7.0.1406(Core) 64位</p><p>CentOS 7.0默认使用的是firewall作为防火墙，这里改为iptables防火墙步骤。</p><p>1、关闭firewall：</p><p>systemctl stop firewalld.service #停止firewall</p><p>systemctl disable firewalld.service #禁止firewall开机启动</p><p>firewall-cmd –state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</p><p>2、iptables防火墙（这里iptables已经安装，下面进行配置）</p><p>vi/etc/sysconfig/iptables #编辑防火墙配置文件</p><p># sampleconfiguration for iptables service</p><p># you can edit thismanually or usesystem-config-firewall</p><p># please do not askus to add additionalports/services to this default configuration</p><p>*filter</p><p>:INPUT ACCEPT [0:0]</p><p>:FORWARD ACCEPT[0:0]</p><p>:OUTPUT ACCEPT[0:0]</p><p>-A INPUT -m state–state RELATED,ESTABLISHED -jACCEPT</p><p>-A INPUT -p icmp -jACCEPT</p><p>-A INPUT -i lo -jACCEPT</p><p>-A INPUT -p tcp -mstate –state NEW -m tcp –dport22 -j ACCEPT</p><p>-A INPUT -p tcp -m state –state NEW -m tcp –dport80 -jACCEPT</p><p>-A INPUT -p tcp -m state –state NEW -m tcp –dport8080-j ACCEPT</p><p>-A INPUT -j REJECT–reject-with icmp-host-prohibited</p><p>-A FORWARD -jREJECT –reject-withicmp-host-prohibited</p><p>COMMIT</p><p>:wq! #保存退出</p><p>备注：这里使用80和8080端口为例。***部分一般添加到“-A INPUT -p tcp -m state –state NEW -m tcp–dport 22 -jACCEPT”行的上面或者下面，切记不要添加到最后一行，否则防火墙重启后不生效。</p><p>systemctlrestart iptables.service #最后重启防火墙使配置生效</p><p>systemctlenable iptables.service #设置防火墙开机启动</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos中service命令与/etc/init.d的关系以及centos7的变化</title>
      <link href="/2017/01/20/centos%E4%B8%ADservice%E5%91%BD%E4%BB%A4%E4%B8%8E-etc-init-d%E7%9A%84%E5%85%B3%E7%B3%BB%E4%BB%A5%E5%8F%8Acentos7%E7%9A%84%E5%8F%98%E5%8C%96/"/>
      <content type="html"><![CDATA[<p><strong> centos中service命令与/etc/init.d的关系以及centos7的变化：</strong> <excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><p>centos中service命令与/etc/init.d的关系</p><p>service httpd start 其实是启动了存放在/etc/init.d目录下的脚本。</p><p>但是centos7的服务管理改规则了。</p><p>CentOS 7继承了RHEL 7的新的特性，例如强大的systemctl，</p><p>而systemctl的使用也使得以往系统服务的/etc/init.d的启动脚本的方式就此改变，</p><p>也大幅提高了系统服务的运行效率。但服务的配置和以往也发生了极大的不同，</p><p>说实在的，变的简单而易用了许多。</p><p>CentOS 7的服务systemctl脚本存放在：/usr/lib/systemd/，</p><p>有系统（system）和用户（user）之分，像需要开机不登陆就能运行的程序，</p><p>还是存在系统服务里吧，即：/usr/lib/systemd/system目录下</p><p>每一个服务以.service结尾，一般会分为3部分：[Unit]、[Service]和[Install]</p></the>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
